ARM GAS  /tmp/ccTg0jKO.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.TIM_Config,"ax",%progbits
  16              		.align	1
  17              		.global	TIM_Config
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	TIM_Config:
  25              	.LFB33:
  26              		.file 1 "Project/Demonstration2/main.c"
   1:Project/Demonstration2/main.c **** /**
   2:Project/Demonstration2/main.c ****   ******************************************************************************
   3:Project/Demonstration2/main.c ****   * @file    main.c 
   4:Project/Demonstration2/main.c ****   * @author  Mertcan Ekiz
   5:Project/Demonstration2/main.c ****   * @version V1.0.0
   6:Project/Demonstration2/main.c ****   * @date    25-Nov-2019
   7:Project/Demonstration2/main.c ****   * @brief   Main program body
   8:Project/Demonstration2/main.c **** 	*
   9:Project/Demonstration2/main.c **** 	*
  10:Project/Demonstration2/main.c **** 	*
  11:Project/Demonstration2/main.c ****   ******************************************************************************
  12:Project/Demonstration2/main.c ****   */ 
  13:Project/Demonstration2/main.c **** /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
  14:Project/Demonstration2/main.c **** #include "main.h"
  15:Project/Demonstration2/main.c **** #include <stm32f0xx.h>
  16:Project/Demonstration2/main.c **** #define PERIOD 1000
  17:Project/Demonstration2/main.c **** #define PRESCALER 48000
  18:Project/Demonstration2/main.c **** /** @addtogroup STM32F0-Discovery_Demo
  19:Project/Demonstration2/main.c ****   * @{
  20:Project/Demonstration2/main.c ****   */
  21:Project/Demonstration2/main.c **** 
  22:Project/Demonstration2/main.c **** /* Private typedef -----------------------------------------------------------*/
  23:Project/Demonstration2/main.c **** 
  24:Project/Demonstration2/main.c **** /* Private define ------------------------------------------------------------*/
  25:Project/Demonstration2/main.c **** /* Private macro -------------------------------------------------------------*/
  26:Project/Demonstration2/main.c **** /* Private variables ---------------------------------------------------------*/
  27:Project/Demonstration2/main.c **** static __IO uint32_t TimingDelay;
  28:Project/Demonstration2/main.c **** static __IO uint16_t TIM3_Period;
  29:Project/Demonstration2/main.c **** static const uint16_t TIM3_Prescaler = 48000;
  30:Project/Demonstration2/main.c **** static __IO uint8_t currentState;
  31:Project/Demonstration2/main.c **** 
  32:Project/Demonstration2/main.c **** /* Private function prototypes -----------------------------------------------*/
ARM GAS  /tmp/ccTg0jKO.s 			page 2


  33:Project/Demonstration2/main.c **** void Delay(__IO uint32_t nTime);
  34:Project/Demonstration2/main.c **** void TIM_Config(void);
  35:Project/Demonstration2/main.c **** /* Private functions ---------------------------------------------------------*/
  36:Project/Demonstration2/main.c **** 
  37:Project/Demonstration2/main.c **** /**
  38:Project/Demonstration2/main.c ****   * @brief  Main program.
  39:Project/Demonstration2/main.c ****   * @param  None
  40:Project/Demonstration2/main.c ****   * @retval None
  41:Project/Demonstration2/main.c ****   */
  42:Project/Demonstration2/main.c **** int main(void)
  43:Project/Demonstration2/main.c **** {
  44:Project/Demonstration2/main.c ****     uint8_t button;
  45:Project/Demonstration2/main.c ****     uint8_t button_accum[2] = { 0, 0 };
  46:Project/Demonstration2/main.c ****     uint8_t button_state = 0;
  47:Project/Demonstration2/main.c **** 	STM_EVAL_LEDInit(LED3);
  48:Project/Demonstration2/main.c **** 	STM_EVAL_LEDInit(LED4);
  49:Project/Demonstration2/main.c **** 	STM_EVAL_PBInit(BUTTON_USER, BUTTON_MODE_GPIO);
  50:Project/Demonstration2/main.c ****     SysTick_Config(SystemCoreClock / 1000);
  51:Project/Demonstration2/main.c ****     setState(STATE_OFF_A);
  52:Project/Demonstration2/main.c ****     
  53:Project/Demonstration2/main.c **** 	while(1)
  54:Project/Demonstration2/main.c ****     {
  55:Project/Demonstration2/main.c ****         // The STM32F0 Discovery button has a lot of switch bouncing issue. See:
  56:Project/Demonstration2/main.c ****         // https://www.allaboutcircuits.com/technical-articles/switch-bounce-how-to-deal-with-it/
  57:Project/Demonstration2/main.c ****         //
  58:Project/Demonstration2/main.c ****         // Electrically, this can be dealt with using a capacitor,
  59:Project/Demonstration2/main.c ****         // so this is a "capacitor" implementation that accumulates and
  60:Project/Demonstration2/main.c ****         // when the button is held longer than ~10ms, we consider it to be ON.
  61:Project/Demonstration2/main.c ****         
  62:Project/Demonstration2/main.c ****         uint8_t currentButton = STM_EVAL_PBGetState(BUTTON_USER);
  63:Project/Demonstration2/main.c ****         button ^= currentButton;
  64:Project/Demonstration2/main.c ****         if (button == 0) {
  65:Project/Demonstration2/main.c ****             button_accum[currentButton]++;
  66:Project/Demonstration2/main.c ****         } else {
  67:Project/Demonstration2/main.c ****             button_accum[currentButton] = 0;
  68:Project/Demonstration2/main.c ****         }
  69:Project/Demonstration2/main.c ****         button = currentButton;
  70:Project/Demonstration2/main.c ****         if (button_accum[currentButton] > 10) {
  71:Project/Demonstration2/main.c ****             button_state = currentButton;
  72:Project/Demonstration2/main.c ****             button_accum[0] = 0;
  73:Project/Demonstration2/main.c ****             button_accum[1] = 0;
  74:Project/Demonstration2/main.c ****         }
  75:Project/Demonstration2/main.c ****         
  76:Project/Demonstration2/main.c ****         // Finite state machine
  77:Project/Demonstration2/main.c ****         switch(currentState) {
  78:Project/Demonstration2/main.c ****             case STATE_OFF_A:
  79:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOff(LED3);
  80:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOff(LED4);
  81:Project/Demonstration2/main.c ****                 TIM_DeInit(TIM3);
  82:Project/Demonstration2/main.c ****                 if (!button_state) setState(STATE_OFF_B);
  83:Project/Demonstration2/main.c ****                 break;
  84:Project/Demonstration2/main.c ****             case STATE_OFF_B:
  85:Project/Demonstration2/main.c ****                 if (button_state) {
  86:Project/Demonstration2/main.c ****                     setState(STATE_5S_A);
  87:Project/Demonstration2/main.c ****                     TIM_Config();
  88:Project/Demonstration2/main.c ****                 }
  89:Project/Demonstration2/main.c ****                 break;
ARM GAS  /tmp/ccTg0jKO.s 			page 3


  90:Project/Demonstration2/main.c ****             case STATE_3S_A:
  91:Project/Demonstration2/main.c ****                 if (!button_state) setState(STATE_3S_B);
  92:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOn(LED3);
  93:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOff(LED4);
  94:Project/Demonstration2/main.c ****                 break;
  95:Project/Demonstration2/main.c ****             case STATE_3S_B:
  96:Project/Demonstration2/main.c ****                 if (button_state) setState(STATE_OFF_A);
  97:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOn(LED3);
  98:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOff(LED4);
  99:Project/Demonstration2/main.c ****                 break;
 100:Project/Demonstration2/main.c ****             case STATE_5S_A:
 101:Project/Demonstration2/main.c ****                 if (!button_state) setState(STATE_5S_B);
 102:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOff(LED3);
 103:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOn(LED4);
 104:Project/Demonstration2/main.c ****                 break;
 105:Project/Demonstration2/main.c ****             case STATE_5S_B:
 106:Project/Demonstration2/main.c ****                 if (button_state) setState(STATE_OFF_A);
 107:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOff(LED3);
 108:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOn(LED4);
 109:Project/Demonstration2/main.c ****                 break;
 110:Project/Demonstration2/main.c ****         }
 111:Project/Demonstration2/main.c ****         Delay(1);
 112:Project/Demonstration2/main.c **** 	}
 113:Project/Demonstration2/main.c **** }
 114:Project/Demonstration2/main.c **** 
 115:Project/Demonstration2/main.c **** void TIM_Config(void)
 116:Project/Demonstration2/main.c **** {
  27              		.loc 1 116 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 16
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 10B5     		push	{r4, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  36 0002 84B0     		sub	sp, sp, #16
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 24
 117:Project/Demonstration2/main.c ****     NVIC_InitTypeDef NVIC_InitStructure;
  39              		.loc 1 117 5 view .LVU1
 118:Project/Demonstration2/main.c ****     TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  40              		.loc 1 118 5 view .LVU2
 119:Project/Demonstration2/main.c ****     RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
  41              		.loc 1 119 5 view .LVU3
  42 0004 0121     		movs	r1, #1
  43 0006 0220     		movs	r0, #2
  44 0008 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
  45              	.LVL0:
 120:Project/Demonstration2/main.c ****     TIM_TimeBaseStructure.TIM_Period = TIM3_Period;
  46              		.loc 1 120 5 view .LVU4
  47              		.loc 1 120 38 is_stmt 0 view .LVU5
  48 000c 104B     		ldr	r3, .L2
  49 000e 1B88     		ldrh	r3, [r3]
  50 0010 0193     		str	r3, [sp, #4]
 121:Project/Demonstration2/main.c ****     TIM_TimeBaseStructure.TIM_Prescaler = TIM3_Prescaler;
  51              		.loc 1 121 5 is_stmt 1 view .LVU6
ARM GAS  /tmp/ccTg0jKO.s 			page 4


  52              		.loc 1 121 41 is_stmt 0 view .LVU7
  53 0012 104B     		ldr	r3, .L2+4
  54 0014 6A46     		mov	r2, sp
  55 0016 1380     		strh	r3, [r2]
 122:Project/Demonstration2/main.c ****     TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
  56              		.loc 1 122 5 is_stmt 1 view .LVU8
  57              		.loc 1 122 45 is_stmt 0 view .LVU9
  58 0018 0023     		movs	r3, #0
  59 001a 1381     		strh	r3, [r2, #8]
 123:Project/Demonstration2/main.c ****     TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  60              		.loc 1 123 5 is_stmt 1 view .LVU10
  61              		.loc 1 123 43 is_stmt 0 view .LVU11
  62 001c 5380     		strh	r3, [r2, #2]
 124:Project/Demonstration2/main.c ****     TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
  63              		.loc 1 124 5 is_stmt 1 view .LVU12
  64 001e 0E4C     		ldr	r4, .L2+8
  65 0020 6946     		mov	r1, sp
  66 0022 2000     		movs	r0, r4
  67 0024 FFF7FEFF 		bl	TIM_TimeBaseInit
  68              	.LVL1:
 125:Project/Demonstration2/main.c ****     TIM_ITConfig(TIM3, TIM_IT_CC3, ENABLE);
  69              		.loc 1 125 5 view .LVU13
  70 0028 0122     		movs	r2, #1
  71 002a 0821     		movs	r1, #8
  72 002c 2000     		movs	r0, r4
  73 002e FFF7FEFF 		bl	TIM_ITConfig
  74              	.LVL2:
 126:Project/Demonstration2/main.c ****     
 127:Project/Demonstration2/main.c ****     NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
  75              		.loc 1 127 5 view .LVU14
  76              		.loc 1 127 40 is_stmt 0 view .LVU15
  77 0032 03A8     		add	r0, sp, #12
  78 0034 1023     		movs	r3, #16
  79 0036 0370     		strb	r3, [r0]
 128:Project/Demonstration2/main.c ****     NVIC_InitStructure.NVIC_IRQChannelPriority = 0x00;
  80              		.loc 1 128 5 is_stmt 1 view .LVU16
  81              		.loc 1 128 48 is_stmt 0 view .LVU17
  82 0038 0023     		movs	r3, #0
  83 003a 4370     		strb	r3, [r0, #1]
 129:Project/Demonstration2/main.c ****     NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  84              		.loc 1 129 5 is_stmt 1 view .LVU18
  85              		.loc 1 129 43 is_stmt 0 view .LVU19
  86 003c 0123     		movs	r3, #1
  87 003e 8370     		strb	r3, [r0, #2]
 130:Project/Demonstration2/main.c ****     NVIC_Init(&NVIC_InitStructure);
  88              		.loc 1 130 5 is_stmt 1 view .LVU20
  89 0040 FFF7FEFF 		bl	NVIC_Init
  90              	.LVL3:
 131:Project/Demonstration2/main.c ****     
 132:Project/Demonstration2/main.c ****     TIM_Cmd(TIM3, ENABLE);
  91              		.loc 1 132 5 view .LVU21
  92 0044 0121     		movs	r1, #1
  93 0046 2000     		movs	r0, r4
  94 0048 FFF7FEFF 		bl	TIM_Cmd
  95              	.LVL4:
 133:Project/Demonstration2/main.c **** }
  96              		.loc 1 133 1 is_stmt 0 view .LVU22
ARM GAS  /tmp/ccTg0jKO.s 			page 5


  97 004c 04B0     		add	sp, sp, #16
  98              		@ sp needed
  99 004e 10BD     		pop	{r4, pc}
 100              	.L3:
 101              		.align	2
 102              	.L2:
 103 0050 00000000 		.word	.LANCHOR0
 104 0054 80BBFFFF 		.word	-17536
 105 0058 00040040 		.word	1073742848
 106              		.cfi_endproc
 107              	.LFE33:
 109              		.section	.text.TimingDelay_Decrement,"ax",%progbits
 110              		.align	1
 111              		.global	TimingDelay_Decrement
 112              		.syntax unified
 113              		.code	16
 114              		.thumb_func
 115              		.fpu softvfp
 117              	TimingDelay_Decrement:
 118              	.LFB34:
 134:Project/Demonstration2/main.c **** 
 135:Project/Demonstration2/main.c **** void TimingDelay_Decrement(void)
 136:Project/Demonstration2/main.c **** {
 119              		.loc 1 136 1 is_stmt 1 view -0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 0
 122              		@ frame_needed = 0, uses_anonymous_args = 0
 123              		@ link register save eliminated.
 137:Project/Demonstration2/main.c **** 	if (TimingDelay != 0x00) TimingDelay--;
 124              		.loc 1 137 2 view .LVU24
 125              		.loc 1 137 18 is_stmt 0 view .LVU25
 126 0000 044B     		ldr	r3, .L6
 127 0002 1B68     		ldr	r3, [r3]
 128              		.loc 1 137 5 view .LVU26
 129 0004 002B     		cmp	r3, #0
 130 0006 03D0     		beq	.L4
 131              		.loc 1 137 27 is_stmt 1 discriminator 1 view .LVU27
 132              		.loc 1 137 38 is_stmt 0 discriminator 1 view .LVU28
 133 0008 024A     		ldr	r2, .L6
 134 000a 1368     		ldr	r3, [r2]
 135 000c 013B     		subs	r3, r3, #1
 136 000e 1360     		str	r3, [r2]
 137              	.L4:
 138:Project/Demonstration2/main.c **** }
 138              		.loc 1 138 1 view .LVU29
 139              		@ sp needed
 140 0010 7047     		bx	lr
 141              	.L7:
 142 0012 C046     		.align	2
 143              	.L6:
 144 0014 00000000 		.word	.LANCHOR1
 145              		.cfi_endproc
 146              	.LFE34:
 148              		.section	.text.Delay,"ax",%progbits
 149              		.align	1
 150              		.global	Delay
 151              		.syntax unified
ARM GAS  /tmp/ccTg0jKO.s 			page 6


 152              		.code	16
 153              		.thumb_func
 154              		.fpu softvfp
 156              	Delay:
 157              	.LVL5:
 158              	.LFB35:
 139:Project/Demonstration2/main.c **** void Delay(__IO uint32_t nTime) {
 159              		.loc 1 139 33 is_stmt 1 view -0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 8
 162              		@ frame_needed = 0, uses_anonymous_args = 0
 163              		@ link register save eliminated.
 164              		.loc 1 139 33 is_stmt 0 view .LVU31
 165 0000 82B0     		sub	sp, sp, #8
 166              	.LCFI2:
 167              		.cfi_def_cfa_offset 8
 168 0002 0190     		str	r0, [sp, #4]
 140:Project/Demonstration2/main.c **** 	TimingDelay = nTime;
 169              		.loc 1 140 2 is_stmt 1 view .LVU32
 170              		.loc 1 140 14 is_stmt 0 view .LVU33
 171 0004 019A     		ldr	r2, [sp, #4]
 172 0006 044B     		ldr	r3, .L10
 173 0008 1A60     		str	r2, [r3]
 141:Project/Demonstration2/main.c **** 	while (TimingDelay > 0x00);
 174              		.loc 1 141 2 is_stmt 1 view .LVU34
 175              	.L9:
 176              		.loc 1 141 28 discriminator 1 view .LVU35
 177              		.loc 1 141 8 discriminator 1 view .LVU36
 178              		.loc 1 141 21 is_stmt 0 discriminator 1 view .LVU37
 179 000a 034B     		ldr	r3, .L10
 180 000c 1B68     		ldr	r3, [r3]
 181              		.loc 1 141 8 discriminator 1 view .LVU38
 182 000e 002B     		cmp	r3, #0
 183 0010 FBD1     		bne	.L9
 142:Project/Demonstration2/main.c **** }
 184              		.loc 1 142 1 view .LVU39
 185 0012 02B0     		add	sp, sp, #8
 186              		@ sp needed
 187 0014 7047     		bx	lr
 188              	.L11:
 189 0016 C046     		.align	2
 190              	.L10:
 191 0018 00000000 		.word	.LANCHOR1
 192              		.cfi_endproc
 193              	.LFE35:
 195              		.section	.text.setPeriod,"ax",%progbits
 196              		.align	1
 197              		.global	setPeriod
 198              		.syntax unified
 199              		.code	16
 200              		.thumb_func
 201              		.fpu softvfp
 203              	setPeriod:
 204              	.LVL6:
 205              	.LFB36:
 143:Project/Demonstration2/main.c **** 
 144:Project/Demonstration2/main.c **** void setPeriod(uint16_t period)
ARM GAS  /tmp/ccTg0jKO.s 			page 7


 145:Project/Demonstration2/main.c **** {
 206              		.loc 1 145 1 is_stmt 1 view -0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 0
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210              		@ link register save eliminated.
 146:Project/Demonstration2/main.c ****     TIM3_Period = period;
 211              		.loc 1 146 5 view .LVU41
 212              		.loc 1 146 17 is_stmt 0 view .LVU42
 213 0000 014B     		ldr	r3, .L13
 214 0002 1880     		strh	r0, [r3]
 147:Project/Demonstration2/main.c **** }
 215              		.loc 1 147 1 view .LVU43
 216              		@ sp needed
 217 0004 7047     		bx	lr
 218              	.L14:
 219 0006 C046     		.align	2
 220              	.L13:
 221 0008 00000000 		.word	.LANCHOR0
 222              		.cfi_endproc
 223              	.LFE36:
 225              		.section	.text.setState,"ax",%progbits
 226              		.align	1
 227              		.global	setState
 228              		.syntax unified
 229              		.code	16
 230              		.thumb_func
 231              		.fpu softvfp
 233              	setState:
 234              	.LVL7:
 235              	.LFB37:
 148:Project/Demonstration2/main.c **** 
 149:Project/Demonstration2/main.c **** void setState(uint8_t state)
 150:Project/Demonstration2/main.c **** {
 236              		.loc 1 150 1 is_stmt 1 view -0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 0
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240              		.loc 1 150 1 is_stmt 0 view .LVU45
 241 0000 10B5     		push	{r4, lr}
 242              	.LCFI3:
 243              		.cfi_def_cfa_offset 8
 244              		.cfi_offset 4, -8
 245              		.cfi_offset 14, -4
 246 0002 0400     		movs	r4, r0
 151:Project/Demonstration2/main.c ****     currentState = state;
 247              		.loc 1 151 5 is_stmt 1 view .LVU46
 248              		.loc 1 151 18 is_stmt 0 view .LVU47
 249 0004 094B     		ldr	r3, .L20
 250 0006 1870     		strb	r0, [r3]
 152:Project/Demonstration2/main.c ****     if (state == STATE_3S_A || state ==  STATE_3S_B) setPeriod(3000);
 251              		.loc 1 152 5 is_stmt 1 view .LVU48
 252              		.loc 1 152 29 is_stmt 0 view .LVU49
 253 0008 831E     		subs	r3, r0, #2
 254 000a DBB2     		uxtb	r3, r3
 255              		.loc 1 152 8 view .LVU50
 256 000c 012B     		cmp	r3, #1
ARM GAS  /tmp/ccTg0jKO.s 			page 8


 257 000e 04D9     		bls	.L18
 258              	.LVL8:
 259              	.L16:
 153:Project/Demonstration2/main.c ****     if (state == STATE_5S_A || state ==  STATE_5S_B) setPeriod(5000);
 260              		.loc 1 153 5 is_stmt 1 view .LVU51
 261              		.loc 1 153 29 is_stmt 0 view .LVU52
 262 0010 043C     		subs	r4, r4, #4
 263 0012 E4B2     		uxtb	r4, r4
 264              		.loc 1 153 8 view .LVU53
 265 0014 012C     		cmp	r4, #1
 266 0016 04D9     		bls	.L19
 267              	.L15:
 154:Project/Demonstration2/main.c **** }
 268              		.loc 1 154 1 view .LVU54
 269              		@ sp needed
 270 0018 10BD     		pop	{r4, pc}
 271              	.LVL9:
 272              	.L18:
 152:Project/Demonstration2/main.c ****     if (state == STATE_3S_A || state ==  STATE_3S_B) setPeriod(3000);
 273              		.loc 1 152 54 is_stmt 1 discriminator 1 view .LVU55
 274 001a 0548     		ldr	r0, .L20+4
 275              	.LVL10:
 152:Project/Demonstration2/main.c ****     if (state == STATE_3S_A || state ==  STATE_3S_B) setPeriod(3000);
 276              		.loc 1 152 54 is_stmt 0 discriminator 1 view .LVU56
 277 001c FFF7FEFF 		bl	setPeriod
 278              	.LVL11:
 152:Project/Demonstration2/main.c ****     if (state == STATE_3S_A || state ==  STATE_3S_B) setPeriod(3000);
 279              		.loc 1 152 54 discriminator 1 view .LVU57
 280 0020 F6E7     		b	.L16
 281              	.L19:
 153:Project/Demonstration2/main.c ****     if (state == STATE_5S_A || state ==  STATE_5S_B) setPeriod(5000);
 282              		.loc 1 153 54 is_stmt 1 discriminator 1 view .LVU58
 283 0022 0448     		ldr	r0, .L20+8
 284 0024 FFF7FEFF 		bl	setPeriod
 285              	.LVL12:
 286              		.loc 1 154 1 is_stmt 0 discriminator 1 view .LVU59
 287 0028 F6E7     		b	.L15
 288              	.L21:
 289 002a C046     		.align	2
 290              	.L20:
 291 002c 00000000 		.word	.LANCHOR2
 292 0030 B80B0000 		.word	3000
 293 0034 88130000 		.word	5000
 294              		.cfi_endproc
 295              	.LFE37:
 297              		.global	__aeabi_uidiv
 298              		.section	.text.main,"ax",%progbits
 299              		.align	1
 300              		.global	main
 301              		.syntax unified
 302              		.code	16
 303              		.thumb_func
 304              		.fpu softvfp
 306              	main:
 307              	.LFB32:
  43:Project/Demonstration2/main.c ****     uint8_t button;
 308              		.loc 1 43 1 is_stmt 1 view -0
ARM GAS  /tmp/ccTg0jKO.s 			page 9


 309              		.cfi_startproc
 310              		@ args = 0, pretend = 0, frame = 8
 311              		@ frame_needed = 0, uses_anonymous_args = 0
 312 0000 70B5     		push	{r4, r5, r6, lr}
 313              	.LCFI4:
 314              		.cfi_def_cfa_offset 16
 315              		.cfi_offset 4, -16
 316              		.cfi_offset 5, -12
 317              		.cfi_offset 6, -8
 318              		.cfi_offset 14, -4
 319 0002 82B0     		sub	sp, sp, #8
 320              	.LCFI5:
 321              		.cfi_def_cfa_offset 24
 322 0004 0026     		movs	r6, #0
  44:Project/Demonstration2/main.c ****     uint8_t button_accum[2] = { 0, 0 };
 323              		.loc 1 44 5 view .LVU61
  45:Project/Demonstration2/main.c ****     uint8_t button_state = 0;
 324              		.loc 1 45 5 view .LVU62
  45:Project/Demonstration2/main.c ****     uint8_t button_state = 0;
 325              		.loc 1 45 13 is_stmt 0 view .LVU63
 326 0006 01AB     		add	r3, sp, #4
 327 0008 1E80     		strh	r6, [r3]
  46:Project/Demonstration2/main.c **** 	STM_EVAL_LEDInit(LED3);
 328              		.loc 1 46 5 is_stmt 1 view .LVU64
 329              	.LVL13:
  47:Project/Demonstration2/main.c **** 	STM_EVAL_LEDInit(LED4);
 330              		.loc 1 47 2 view .LVU65
 331 000a 0020     		movs	r0, #0
 332 000c FFF7FEFF 		bl	STM_EVAL_LEDInit
 333              	.LVL14:
  48:Project/Demonstration2/main.c **** 	STM_EVAL_PBInit(BUTTON_USER, BUTTON_MODE_GPIO);
 334              		.loc 1 48 2 view .LVU66
 335 0010 0120     		movs	r0, #1
 336 0012 FFF7FEFF 		bl	STM_EVAL_LEDInit
 337              	.LVL15:
  49:Project/Demonstration2/main.c ****     SysTick_Config(SystemCoreClock / 1000);
 338              		.loc 1 49 2 view .LVU67
 339 0016 0021     		movs	r1, #0
 340 0018 0020     		movs	r0, #0
 341 001a FFF7FEFF 		bl	STM_EVAL_PBInit
 342              	.LVL16:
  50:Project/Demonstration2/main.c ****     setState(STATE_OFF_A);
 343              		.loc 1 50 5 view .LVU68
 344 001e 474B     		ldr	r3, .L44
 345 0020 1868     		ldr	r0, [r3]
 346 0022 FA21     		movs	r1, #250
 347 0024 8900     		lsls	r1, r1, #2
 348 0026 FFF7FEFF 		bl	__aeabi_uidiv
 349              	.LVL17:
 350              	.LBB9:
 351              	.LBI9:
 352              		.file 2 "./Libraries/CMSIS/Include/core_cm0.h"
   1:./Libraries/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:./Libraries/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:./Libraries/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./Libraries/CMSIS/Include/core_cm0.h ****  * @version  V2.10
   5:./Libraries/CMSIS/Include/core_cm0.h ****  * @date     19. July 2011
ARM GAS  /tmp/ccTg0jKO.s 			page 10


   6:./Libraries/CMSIS/Include/core_cm0.h ****  *
   7:./Libraries/CMSIS/Include/core_cm0.h ****  * @note
   8:./Libraries/CMSIS/Include/core_cm0.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:./Libraries/CMSIS/Include/core_cm0.h ****  *
  10:./Libraries/CMSIS/Include/core_cm0.h ****  * @par
  11:./Libraries/CMSIS/Include/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:./Libraries/CMSIS/Include/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:./Libraries/CMSIS/Include/core_cm0.h ****  * within development tools that are supporting such ARM based processors.
  14:./Libraries/CMSIS/Include/core_cm0.h ****  *
  15:./Libraries/CMSIS/Include/core_cm0.h ****  * @par
  16:./Libraries/CMSIS/Include/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./Libraries/CMSIS/Include/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./Libraries/CMSIS/Include/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./Libraries/CMSIS/Include/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./Libraries/CMSIS/Include/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./Libraries/CMSIS/Include/core_cm0.h ****  *
  22:./Libraries/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  23:./Libraries/CMSIS/Include/core_cm0.h **** #if defined ( __ICCARM__ )
  24:./Libraries/CMSIS/Include/core_cm0.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:./Libraries/CMSIS/Include/core_cm0.h **** #endif
  26:./Libraries/CMSIS/Include/core_cm0.h **** 
  27:./Libraries/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  28:./Libraries/CMSIS/Include/core_cm0.h ****  extern "C" {
  29:./Libraries/CMSIS/Include/core_cm0.h **** #endif
  30:./Libraries/CMSIS/Include/core_cm0.h **** 
  31:./Libraries/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:./Libraries/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:./Libraries/CMSIS/Include/core_cm0.h **** 
  34:./Libraries/CMSIS/Include/core_cm0.h **** 
  35:./Libraries/CMSIS/Include/core_cm0.h **** /** \mainpage CMSIS Cortex-M0
  36:./Libraries/CMSIS/Include/core_cm0.h **** 
  37:./Libraries/CMSIS/Include/core_cm0.h ****   This documentation describes the CMSIS Cortex-M Core Peripheral Access Layer.
  38:./Libraries/CMSIS/Include/core_cm0.h ****   It consists of:
  39:./Libraries/CMSIS/Include/core_cm0.h **** 
  40:./Libraries/CMSIS/Include/core_cm0.h ****      - Cortex-M Core Register Definitions
  41:./Libraries/CMSIS/Include/core_cm0.h ****      - Cortex-M functions
  42:./Libraries/CMSIS/Include/core_cm0.h ****      - Cortex-M instructions
  43:./Libraries/CMSIS/Include/core_cm0.h **** 
  44:./Libraries/CMSIS/Include/core_cm0.h ****   The CMSIS Cortex-M0 Core Peripheral Access Layer contains C and assembly functions that ease
  45:./Libraries/CMSIS/Include/core_cm0.h ****   access to the Cortex-M Core
  46:./Libraries/CMSIS/Include/core_cm0.h ****  */
  47:./Libraries/CMSIS/Include/core_cm0.h **** 
  48:./Libraries/CMSIS/Include/core_cm0.h **** /** \defgroup CMSIS_MISRA_Exceptions  CMSIS MISRA-C:2004 Compliance Exceptions
  49:./Libraries/CMSIS/Include/core_cm0.h ****   CMSIS violates following MISRA-C2004 Rules:
  50:./Libraries/CMSIS/Include/core_cm0.h ****   
  51:./Libraries/CMSIS/Include/core_cm0.h ****    - Violates MISRA 2004 Required Rule 8.5, object/function definition in header file.<br>
  52:./Libraries/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'. 
  53:./Libraries/CMSIS/Include/core_cm0.h **** 
  54:./Libraries/CMSIS/Include/core_cm0.h ****    - Violates MISRA 2004 Required Rule 18.4, declaration of union type or object of union type: '{.
  55:./Libraries/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  56:./Libraries/CMSIS/Include/core_cm0.h ****    
  57:./Libraries/CMSIS/Include/core_cm0.h ****    - Violates MISRA 2004 Advisory Rule 19.7, Function-like macro defined.<br>
  58:./Libraries/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code. 
  59:./Libraries/CMSIS/Include/core_cm0.h **** 
  60:./Libraries/CMSIS/Include/core_cm0.h ****  */
  61:./Libraries/CMSIS/Include/core_cm0.h **** 
  62:./Libraries/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccTg0jKO.s 			page 11


  63:./Libraries/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  64:./Libraries/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  65:./Libraries/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  66:./Libraries/CMSIS/Include/core_cm0.h **** /** \defgroup CMSIS_core_definitions CMSIS Core Definitions
  67:./Libraries/CMSIS/Include/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  68:./Libraries/CMSIS/Include/core_cm0.h ****    - CMSIS version number
  69:./Libraries/CMSIS/Include/core_cm0.h ****    - Cortex-M core
  70:./Libraries/CMSIS/Include/core_cm0.h ****    - Cortex-M core Revision Number
  71:./Libraries/CMSIS/Include/core_cm0.h ****   @{
  72:./Libraries/CMSIS/Include/core_cm0.h ****  */
  73:./Libraries/CMSIS/Include/core_cm0.h **** 
  74:./Libraries/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  75:./Libraries/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x02)                                                       /*!<
  76:./Libraries/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x10)                                                       /*!<
  77:./Libraries/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  78:./Libraries/CMSIS/Include/core_cm0.h **** 
  79:./Libraries/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
  80:./Libraries/CMSIS/Include/core_cm0.h **** 
  81:./Libraries/CMSIS/Include/core_cm0.h **** 
  82:./Libraries/CMSIS/Include/core_cm0.h **** #if   defined ( __CC_ARM )
  83:./Libraries/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:./Libraries/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:./Libraries/CMSIS/Include/core_cm0.h **** 
  86:./Libraries/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  87:./Libraries/CMSIS/Include/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  88:./Libraries/CMSIS/Include/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  89:./Libraries/CMSIS/Include/core_cm0.h **** 
  90:./Libraries/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  91:./Libraries/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  92:./Libraries/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  93:./Libraries/CMSIS/Include/core_cm0.h **** 
  94:./Libraries/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
  95:./Libraries/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  96:./Libraries/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  97:./Libraries/CMSIS/Include/core_cm0.h **** 
  98:./Libraries/CMSIS/Include/core_cm0.h **** #endif
  99:./Libraries/CMSIS/Include/core_cm0.h **** 
 100:./Libraries/CMSIS/Include/core_cm0.h **** /*!< __FPU_USED to be checked prior to making use of FPU specific registers and functions */
 101:./Libraries/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0
 102:./Libraries/CMSIS/Include/core_cm0.h **** 
 103:./Libraries/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
 104:./Libraries/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
 105:./Libraries/CMSIS/Include/core_cm0.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 106:./Libraries/CMSIS/Include/core_cm0.h ****   #endif
 107:./Libraries/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
 108:./Libraries/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
 109:./Libraries/CMSIS/Include/core_cm0.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 110:./Libraries/CMSIS/Include/core_cm0.h ****   #endif
 111:./Libraries/CMSIS/Include/core_cm0.h **** 
 112:./Libraries/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
 113:./Libraries/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 114:./Libraries/CMSIS/Include/core_cm0.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 115:./Libraries/CMSIS/Include/core_cm0.h ****   #endif
 116:./Libraries/CMSIS/Include/core_cm0.h **** 
 117:./Libraries/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 118:./Libraries/CMSIS/Include/core_cm0.h ****     /* add preprocessor checks */
 119:./Libraries/CMSIS/Include/core_cm0.h **** #endif
ARM GAS  /tmp/ccTg0jKO.s 			page 12


 120:./Libraries/CMSIS/Include/core_cm0.h **** 
 121:./Libraries/CMSIS/Include/core_cm0.h **** #include <stdint.h>                      /*!< standard types definitions                      */
 122:./Libraries/CMSIS/Include/core_cm0.h **** #include "core_cmInstr.h"                /*!< Core Instruction Access                         */
 123:./Libraries/CMSIS/Include/core_cm0.h **** #include "core_cmFunc.h"                 /*!< Core Function Access                            */
 124:./Libraries/CMSIS/Include/core_cm0.h **** 
 125:./Libraries/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 126:./Libraries/CMSIS/Include/core_cm0.h **** 
 127:./Libraries/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 128:./Libraries/CMSIS/Include/core_cm0.h **** 
 129:./Libraries/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 130:./Libraries/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 131:./Libraries/CMSIS/Include/core_cm0.h **** 
 132:./Libraries/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 133:./Libraries/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 134:./Libraries/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 135:./Libraries/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000
 136:./Libraries/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 137:./Libraries/CMSIS/Include/core_cm0.h ****   #endif
 138:./Libraries/CMSIS/Include/core_cm0.h **** 
 139:./Libraries/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 140:./Libraries/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2
 141:./Libraries/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 142:./Libraries/CMSIS/Include/core_cm0.h ****   #endif
 143:./Libraries/CMSIS/Include/core_cm0.h **** 
 144:./Libraries/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 145:./Libraries/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0
 146:./Libraries/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 147:./Libraries/CMSIS/Include/core_cm0.h ****   #endif
 148:./Libraries/CMSIS/Include/core_cm0.h **** #endif
 149:./Libraries/CMSIS/Include/core_cm0.h **** 
 150:./Libraries/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 151:./Libraries/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 152:./Libraries/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< defines 'read only' permissions                 */
 153:./Libraries/CMSIS/Include/core_cm0.h **** #else
 154:./Libraries/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< defines 'read only' permissions                 */
 155:./Libraries/CMSIS/Include/core_cm0.h **** #endif
 156:./Libraries/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< defines 'write only' permissions                */
 157:./Libraries/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< defines 'read / write' permissions              */
 158:./Libraries/CMSIS/Include/core_cm0.h **** 
 159:./Libraries/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_definitions */
 160:./Libraries/CMSIS/Include/core_cm0.h **** 
 161:./Libraries/CMSIS/Include/core_cm0.h **** 
 162:./Libraries/CMSIS/Include/core_cm0.h **** 
 163:./Libraries/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 164:./Libraries/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 165:./Libraries/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 166:./Libraries/CMSIS/Include/core_cm0.h **** /** \defgroup CMSIS_core_register CMSIS Core Register
 167:./Libraries/CMSIS/Include/core_cm0.h ****   Core Register contain:
 168:./Libraries/CMSIS/Include/core_cm0.h ****   - Core Register
 169:./Libraries/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 170:./Libraries/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 171:./Libraries/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 172:./Libraries/CMSIS/Include/core_cm0.h **** */
 173:./Libraries/CMSIS/Include/core_cm0.h **** 
 174:./Libraries/CMSIS/Include/core_cm0.h **** /** \ingroup  CMSIS_core_register
 175:./Libraries/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_CORE CMSIS Core
 176:./Libraries/CMSIS/Include/core_cm0.h ****   Type definitions for the Cortex-M Core Registers
ARM GAS  /tmp/ccTg0jKO.s 			page 13


 177:./Libraries/CMSIS/Include/core_cm0.h ****   @{
 178:./Libraries/CMSIS/Include/core_cm0.h ****  */
 179:./Libraries/CMSIS/Include/core_cm0.h **** 
 180:./Libraries/CMSIS/Include/core_cm0.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 181:./Libraries/CMSIS/Include/core_cm0.h ****  */
 182:./Libraries/CMSIS/Include/core_cm0.h **** typedef union
 183:./Libraries/CMSIS/Include/core_cm0.h **** {
 184:./Libraries/CMSIS/Include/core_cm0.h ****   struct
 185:./Libraries/CMSIS/Include/core_cm0.h ****   {
 186:./Libraries/CMSIS/Include/core_cm0.h **** #if (__CORTEX_M != 0x04)
 187:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 188:./Libraries/CMSIS/Include/core_cm0.h **** #else
 189:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 190:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 191:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 192:./Libraries/CMSIS/Include/core_cm0.h **** #endif
 193:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 194:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 195:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 196:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 197:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 198:./Libraries/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access                  */
 199:./Libraries/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 200:./Libraries/CMSIS/Include/core_cm0.h **** } APSR_Type;
 201:./Libraries/CMSIS/Include/core_cm0.h **** 
 202:./Libraries/CMSIS/Include/core_cm0.h **** 
 203:./Libraries/CMSIS/Include/core_cm0.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 204:./Libraries/CMSIS/Include/core_cm0.h ****  */
 205:./Libraries/CMSIS/Include/core_cm0.h **** typedef union
 206:./Libraries/CMSIS/Include/core_cm0.h **** {
 207:./Libraries/CMSIS/Include/core_cm0.h ****   struct
 208:./Libraries/CMSIS/Include/core_cm0.h ****   {
 209:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 210:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 211:./Libraries/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access                  */
 212:./Libraries/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 213:./Libraries/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 214:./Libraries/CMSIS/Include/core_cm0.h **** 
 215:./Libraries/CMSIS/Include/core_cm0.h **** 
 216:./Libraries/CMSIS/Include/core_cm0.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 217:./Libraries/CMSIS/Include/core_cm0.h ****  */
 218:./Libraries/CMSIS/Include/core_cm0.h **** typedef union
 219:./Libraries/CMSIS/Include/core_cm0.h **** {
 220:./Libraries/CMSIS/Include/core_cm0.h ****   struct
 221:./Libraries/CMSIS/Include/core_cm0.h ****   {
 222:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 223:./Libraries/CMSIS/Include/core_cm0.h **** #if (__CORTEX_M != 0x04)
 224:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 225:./Libraries/CMSIS/Include/core_cm0.h **** #else
 226:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 227:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 228:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 229:./Libraries/CMSIS/Include/core_cm0.h **** #endif
 230:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 231:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 232:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 233:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
ARM GAS  /tmp/ccTg0jKO.s 			page 14


 234:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 235:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 236:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 237:./Libraries/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access                  */
 238:./Libraries/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 239:./Libraries/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 240:./Libraries/CMSIS/Include/core_cm0.h **** 
 241:./Libraries/CMSIS/Include/core_cm0.h **** 
 242:./Libraries/CMSIS/Include/core_cm0.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 243:./Libraries/CMSIS/Include/core_cm0.h ****  */
 244:./Libraries/CMSIS/Include/core_cm0.h **** typedef union
 245:./Libraries/CMSIS/Include/core_cm0.h **** {
 246:./Libraries/CMSIS/Include/core_cm0.h ****   struct
 247:./Libraries/CMSIS/Include/core_cm0.h ****   {
 248:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 249:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 250:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 251:./Libraries/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 252:./Libraries/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access                  */
 253:./Libraries/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 254:./Libraries/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 255:./Libraries/CMSIS/Include/core_cm0.h **** 
 256:./Libraries/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 257:./Libraries/CMSIS/Include/core_cm0.h **** 
 258:./Libraries/CMSIS/Include/core_cm0.h **** 
 259:./Libraries/CMSIS/Include/core_cm0.h **** /** \ingroup  CMSIS_core_register
 260:./Libraries/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_NVIC CMSIS NVIC
 261:./Libraries/CMSIS/Include/core_cm0.h ****   Type definitions for the Cortex-M NVIC Registers
 262:./Libraries/CMSIS/Include/core_cm0.h ****   @{
 263:./Libraries/CMSIS/Include/core_cm0.h ****  */
 264:./Libraries/CMSIS/Include/core_cm0.h **** 
 265:./Libraries/CMSIS/Include/core_cm0.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 266:./Libraries/CMSIS/Include/core_cm0.h ****  */
 267:./Libraries/CMSIS/Include/core_cm0.h **** typedef struct
 268:./Libraries/CMSIS/Include/core_cm0.h **** {
 269:./Libraries/CMSIS/Include/core_cm0.h ****   __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 270:./Libraries/CMSIS/Include/core_cm0.h ****        uint32_t RESERVED0[31];
 271:./Libraries/CMSIS/Include/core_cm0.h ****   __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 272:./Libraries/CMSIS/Include/core_cm0.h ****        uint32_t RSERVED1[31];
 273:./Libraries/CMSIS/Include/core_cm0.h ****   __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 274:./Libraries/CMSIS/Include/core_cm0.h ****        uint32_t RESERVED2[31];
 275:./Libraries/CMSIS/Include/core_cm0.h ****   __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 276:./Libraries/CMSIS/Include/core_cm0.h ****        uint32_t RESERVED3[31];
 277:./Libraries/CMSIS/Include/core_cm0.h ****        uint32_t RESERVED4[64];
 278:./Libraries/CMSIS/Include/core_cm0.h ****   __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register     
 279:./Libraries/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 280:./Libraries/CMSIS/Include/core_cm0.h **** 
 281:./Libraries/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 282:./Libraries/CMSIS/Include/core_cm0.h **** 
 283:./Libraries/CMSIS/Include/core_cm0.h **** 
 284:./Libraries/CMSIS/Include/core_cm0.h **** /** \ingroup  CMSIS_core_register
 285:./Libraries/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_SCB CMSIS SCB
 286:./Libraries/CMSIS/Include/core_cm0.h ****   Type definitions for the Cortex-M System Control Block Registers
 287:./Libraries/CMSIS/Include/core_cm0.h ****   @{
 288:./Libraries/CMSIS/Include/core_cm0.h ****  */
 289:./Libraries/CMSIS/Include/core_cm0.h **** 
 290:./Libraries/CMSIS/Include/core_cm0.h **** /** \brief  Structure type to access the System Control Block (SCB).
ARM GAS  /tmp/ccTg0jKO.s 			page 15


 291:./Libraries/CMSIS/Include/core_cm0.h ****  */
 292:./Libraries/CMSIS/Include/core_cm0.h **** typedef struct
 293:./Libraries/CMSIS/Include/core_cm0.h **** {
 294:./Libraries/CMSIS/Include/core_cm0.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 295:./Libraries/CMSIS/Include/core_cm0.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 296:./Libraries/CMSIS/Include/core_cm0.h ****        uint32_t RESERVED0;
 297:./Libraries/CMSIS/Include/core_cm0.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 298:./Libraries/CMSIS/Include/core_cm0.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 299:./Libraries/CMSIS/Include/core_cm0.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 300:./Libraries/CMSIS/Include/core_cm0.h ****        uint32_t RESERVED1;
 301:./Libraries/CMSIS/Include/core_cm0.h ****   __IO uint32_t SHP[2];                  /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 302:./Libraries/CMSIS/Include/core_cm0.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 303:./Libraries/CMSIS/Include/core_cm0.h **** } SCB_Type;
 304:./Libraries/CMSIS/Include/core_cm0.h **** 
 305:./Libraries/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 306:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 307:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 308:./Libraries/CMSIS/Include/core_cm0.h **** 
 309:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 310:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 311:./Libraries/CMSIS/Include/core_cm0.h **** 
 312:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 313:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 314:./Libraries/CMSIS/Include/core_cm0.h **** 
 315:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 316:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 317:./Libraries/CMSIS/Include/core_cm0.h **** 
 318:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 319:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 320:./Libraries/CMSIS/Include/core_cm0.h **** 
 321:./Libraries/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 322:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 323:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 324:./Libraries/CMSIS/Include/core_cm0.h **** 
 325:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 326:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 327:./Libraries/CMSIS/Include/core_cm0.h **** 
 328:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 329:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 330:./Libraries/CMSIS/Include/core_cm0.h **** 
 331:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 332:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 333:./Libraries/CMSIS/Include/core_cm0.h **** 
 334:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 335:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 336:./Libraries/CMSIS/Include/core_cm0.h **** 
 337:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 338:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 339:./Libraries/CMSIS/Include/core_cm0.h **** 
 340:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 341:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 342:./Libraries/CMSIS/Include/core_cm0.h **** 
 343:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 344:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 345:./Libraries/CMSIS/Include/core_cm0.h **** 
 346:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 347:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
ARM GAS  /tmp/ccTg0jKO.s 			page 16


 348:./Libraries/CMSIS/Include/core_cm0.h **** 
 349:./Libraries/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 350:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 351:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 352:./Libraries/CMSIS/Include/core_cm0.h **** 
 353:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 354:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 355:./Libraries/CMSIS/Include/core_cm0.h **** 
 356:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 357:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 358:./Libraries/CMSIS/Include/core_cm0.h **** 
 359:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 360:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 361:./Libraries/CMSIS/Include/core_cm0.h **** 
 362:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 363:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 364:./Libraries/CMSIS/Include/core_cm0.h **** 
 365:./Libraries/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 366:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 367:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 368:./Libraries/CMSIS/Include/core_cm0.h **** 
 369:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 370:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 371:./Libraries/CMSIS/Include/core_cm0.h **** 
 372:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 373:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 374:./Libraries/CMSIS/Include/core_cm0.h **** 
 375:./Libraries/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 376:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 377:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 378:./Libraries/CMSIS/Include/core_cm0.h **** 
 379:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 380:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 381:./Libraries/CMSIS/Include/core_cm0.h **** 
 382:./Libraries/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 383:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 384:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 385:./Libraries/CMSIS/Include/core_cm0.h **** 
 386:./Libraries/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 387:./Libraries/CMSIS/Include/core_cm0.h **** 
 388:./Libraries/CMSIS/Include/core_cm0.h **** 
 389:./Libraries/CMSIS/Include/core_cm0.h **** /** \ingroup  CMSIS_core_register
 390:./Libraries/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_SysTick CMSIS SysTick
 391:./Libraries/CMSIS/Include/core_cm0.h ****   Type definitions for the Cortex-M System Timer Registers
 392:./Libraries/CMSIS/Include/core_cm0.h ****   @{
 393:./Libraries/CMSIS/Include/core_cm0.h ****  */
 394:./Libraries/CMSIS/Include/core_cm0.h **** 
 395:./Libraries/CMSIS/Include/core_cm0.h **** /** \brief  Structure type to access the System Timer (SysTick).
 396:./Libraries/CMSIS/Include/core_cm0.h ****  */
 397:./Libraries/CMSIS/Include/core_cm0.h **** typedef struct
 398:./Libraries/CMSIS/Include/core_cm0.h **** {
 399:./Libraries/CMSIS/Include/core_cm0.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 400:./Libraries/CMSIS/Include/core_cm0.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 401:./Libraries/CMSIS/Include/core_cm0.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 402:./Libraries/CMSIS/Include/core_cm0.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 403:./Libraries/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 404:./Libraries/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccTg0jKO.s 			page 17


 405:./Libraries/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 406:./Libraries/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 407:./Libraries/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 408:./Libraries/CMSIS/Include/core_cm0.h **** 
 409:./Libraries/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 410:./Libraries/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 411:./Libraries/CMSIS/Include/core_cm0.h **** 
 412:./Libraries/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 413:./Libraries/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 414:./Libraries/CMSIS/Include/core_cm0.h **** 
 415:./Libraries/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 416:./Libraries/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 417:./Libraries/CMSIS/Include/core_cm0.h **** 
 418:./Libraries/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 419:./Libraries/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 420:./Libraries/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 421:./Libraries/CMSIS/Include/core_cm0.h **** 
 422:./Libraries/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 423:./Libraries/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 424:./Libraries/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 425:./Libraries/CMSIS/Include/core_cm0.h **** 
 426:./Libraries/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 427:./Libraries/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 428:./Libraries/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 429:./Libraries/CMSIS/Include/core_cm0.h **** 
 430:./Libraries/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 431:./Libraries/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 432:./Libraries/CMSIS/Include/core_cm0.h **** 
 433:./Libraries/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 434:./Libraries/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 435:./Libraries/CMSIS/Include/core_cm0.h **** 
 436:./Libraries/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 437:./Libraries/CMSIS/Include/core_cm0.h **** 
 438:./Libraries/CMSIS/Include/core_cm0.h **** 
 439:./Libraries/CMSIS/Include/core_cm0.h **** /** \ingroup  CMSIS_core_register
 440:./Libraries/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_CoreDebug CMSIS Core Debug
 441:./Libraries/CMSIS/Include/core_cm0.h ****   Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible over DAP
 442:./Libraries/CMSIS/Include/core_cm0.h ****   and not via processor. Therefore they are not covered by the Cortex-M0 header file.
 443:./Libraries/CMSIS/Include/core_cm0.h ****   @{
 444:./Libraries/CMSIS/Include/core_cm0.h ****  */
 445:./Libraries/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 446:./Libraries/CMSIS/Include/core_cm0.h **** 
 447:./Libraries/CMSIS/Include/core_cm0.h **** 
 448:./Libraries/CMSIS/Include/core_cm0.h **** /** \ingroup  CMSIS_core_register
 449:./Libraries/CMSIS/Include/core_cm0.h ****   @{
 450:./Libraries/CMSIS/Include/core_cm0.h ****  */
 451:./Libraries/CMSIS/Include/core_cm0.h **** 
 452:./Libraries/CMSIS/Include/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 453:./Libraries/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 454:./Libraries/CMSIS/Include/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
 455:./Libraries/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
 456:./Libraries/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
 457:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 458:./Libraries/CMSIS/Include/core_cm0.h **** 
 459:./Libraries/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 460:./Libraries/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 461:./Libraries/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
ARM GAS  /tmp/ccTg0jKO.s 			page 18


 462:./Libraries/CMSIS/Include/core_cm0.h **** 
 463:./Libraries/CMSIS/Include/core_cm0.h **** 
 464:./Libraries/CMSIS/Include/core_cm0.h **** /*@} */
 465:./Libraries/CMSIS/Include/core_cm0.h **** 
 466:./Libraries/CMSIS/Include/core_cm0.h **** 
 467:./Libraries/CMSIS/Include/core_cm0.h **** 
 468:./Libraries/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 469:./Libraries/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 470:./Libraries/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 471:./Libraries/CMSIS/Include/core_cm0.h **** /** \defgroup CMSIS_Core_FunctionInterface CMSIS Core Function Interface
 472:./Libraries/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 473:./Libraries/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 474:./Libraries/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 475:./Libraries/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 476:./Libraries/CMSIS/Include/core_cm0.h **** */
 477:./Libraries/CMSIS/Include/core_cm0.h **** 
 478:./Libraries/CMSIS/Include/core_cm0.h **** 
 479:./Libraries/CMSIS/Include/core_cm0.h **** 
 480:./Libraries/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 481:./Libraries/CMSIS/Include/core_cm0.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 482:./Libraries/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_Core_NVICFunctions CMSIS Core NVIC Functions
 483:./Libraries/CMSIS/Include/core_cm0.h ****   @{
 484:./Libraries/CMSIS/Include/core_cm0.h ****  */
 485:./Libraries/CMSIS/Include/core_cm0.h **** 
 486:./Libraries/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 487:./Libraries/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 488:./Libraries/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 489:./Libraries/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 490:./Libraries/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 491:./Libraries/CMSIS/Include/core_cm0.h **** 
 492:./Libraries/CMSIS/Include/core_cm0.h **** 
 493:./Libraries/CMSIS/Include/core_cm0.h **** /** \brief  Enable External Interrupt
 494:./Libraries/CMSIS/Include/core_cm0.h **** 
 495:./Libraries/CMSIS/Include/core_cm0.h ****     This function enables a device specific interrupt in the NVIC interrupt controller.
 496:./Libraries/CMSIS/Include/core_cm0.h ****     The interrupt number cannot be a negative value.
 497:./Libraries/CMSIS/Include/core_cm0.h **** 
 498:./Libraries/CMSIS/Include/core_cm0.h ****     \param [in]      IRQn  Number of the external interrupt to enable
 499:./Libraries/CMSIS/Include/core_cm0.h ****  */
 500:./Libraries/CMSIS/Include/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 501:./Libraries/CMSIS/Include/core_cm0.h **** {
 502:./Libraries/CMSIS/Include/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 503:./Libraries/CMSIS/Include/core_cm0.h **** }
 504:./Libraries/CMSIS/Include/core_cm0.h **** 
 505:./Libraries/CMSIS/Include/core_cm0.h **** 
 506:./Libraries/CMSIS/Include/core_cm0.h **** /** \brief  Disable External Interrupt
 507:./Libraries/CMSIS/Include/core_cm0.h **** 
 508:./Libraries/CMSIS/Include/core_cm0.h ****     This function disables a device specific interrupt in the NVIC interrupt controller.
 509:./Libraries/CMSIS/Include/core_cm0.h ****     The interrupt number cannot be a negative value.
 510:./Libraries/CMSIS/Include/core_cm0.h **** 
 511:./Libraries/CMSIS/Include/core_cm0.h ****     \param [in]      IRQn  Number of the external interrupt to disable
 512:./Libraries/CMSIS/Include/core_cm0.h ****  */
 513:./Libraries/CMSIS/Include/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 514:./Libraries/CMSIS/Include/core_cm0.h **** {
 515:./Libraries/CMSIS/Include/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 516:./Libraries/CMSIS/Include/core_cm0.h **** }
 517:./Libraries/CMSIS/Include/core_cm0.h **** 
 518:./Libraries/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccTg0jKO.s 			page 19


 519:./Libraries/CMSIS/Include/core_cm0.h **** /** \brief  Get Pending Interrupt
 520:./Libraries/CMSIS/Include/core_cm0.h **** 
 521:./Libraries/CMSIS/Include/core_cm0.h ****     This function reads the pending register in the NVIC and returns the pending bit
 522:./Libraries/CMSIS/Include/core_cm0.h ****     for the specified interrupt.
 523:./Libraries/CMSIS/Include/core_cm0.h **** 
 524:./Libraries/CMSIS/Include/core_cm0.h ****     \param [in]      IRQn  Number of the interrupt for get pending
 525:./Libraries/CMSIS/Include/core_cm0.h ****     \return             0  Interrupt status is not pending
 526:./Libraries/CMSIS/Include/core_cm0.h ****     \return             1  Interrupt status is pending
 527:./Libraries/CMSIS/Include/core_cm0.h ****  */
 528:./Libraries/CMSIS/Include/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 529:./Libraries/CMSIS/Include/core_cm0.h **** {
 530:./Libraries/CMSIS/Include/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));
 531:./Libraries/CMSIS/Include/core_cm0.h **** }
 532:./Libraries/CMSIS/Include/core_cm0.h **** 
 533:./Libraries/CMSIS/Include/core_cm0.h **** 
 534:./Libraries/CMSIS/Include/core_cm0.h **** /** \brief  Set Pending Interrupt
 535:./Libraries/CMSIS/Include/core_cm0.h **** 
 536:./Libraries/CMSIS/Include/core_cm0.h ****     This function sets the pending bit for the specified interrupt.
 537:./Libraries/CMSIS/Include/core_cm0.h ****     The interrupt number cannot be a negative value.
 538:./Libraries/CMSIS/Include/core_cm0.h **** 
 539:./Libraries/CMSIS/Include/core_cm0.h ****     \param [in]      IRQn  Number of the interrupt for set pending
 540:./Libraries/CMSIS/Include/core_cm0.h ****  */
 541:./Libraries/CMSIS/Include/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 542:./Libraries/CMSIS/Include/core_cm0.h **** {
 543:./Libraries/CMSIS/Include/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 544:./Libraries/CMSIS/Include/core_cm0.h **** }
 545:./Libraries/CMSIS/Include/core_cm0.h **** 
 546:./Libraries/CMSIS/Include/core_cm0.h **** 
 547:./Libraries/CMSIS/Include/core_cm0.h **** /** \brief  Clear Pending Interrupt
 548:./Libraries/CMSIS/Include/core_cm0.h **** 
 549:./Libraries/CMSIS/Include/core_cm0.h ****     This function clears the pending bit for the specified interrupt.
 550:./Libraries/CMSIS/Include/core_cm0.h ****     The interrupt number cannot be a negative value.
 551:./Libraries/CMSIS/Include/core_cm0.h **** 
 552:./Libraries/CMSIS/Include/core_cm0.h ****     \param [in]      IRQn  Number of the interrupt for clear pending
 553:./Libraries/CMSIS/Include/core_cm0.h ****  */
 554:./Libraries/CMSIS/Include/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 555:./Libraries/CMSIS/Include/core_cm0.h **** {
 556:./Libraries/CMSIS/Include/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 557:./Libraries/CMSIS/Include/core_cm0.h **** }
 558:./Libraries/CMSIS/Include/core_cm0.h **** 
 559:./Libraries/CMSIS/Include/core_cm0.h **** 
 560:./Libraries/CMSIS/Include/core_cm0.h **** /** \brief  Set Interrupt Priority
 561:./Libraries/CMSIS/Include/core_cm0.h **** 
 562:./Libraries/CMSIS/Include/core_cm0.h ****     This function sets the priority for the specified interrupt. The interrupt
 563:./Libraries/CMSIS/Include/core_cm0.h ****     number can be positive to specify an external (device specific)
 564:./Libraries/CMSIS/Include/core_cm0.h ****     interrupt, or negative to specify an internal (core) interrupt.
 565:./Libraries/CMSIS/Include/core_cm0.h **** 
 566:./Libraries/CMSIS/Include/core_cm0.h ****     Note: The priority cannot be set for every core interrupt.
 567:./Libraries/CMSIS/Include/core_cm0.h **** 
 568:./Libraries/CMSIS/Include/core_cm0.h ****     \param [in]      IRQn  Number of the interrupt for set priority
 569:./Libraries/CMSIS/Include/core_cm0.h ****     \param [in]  priority  Priority to set
 570:./Libraries/CMSIS/Include/core_cm0.h ****  */
 571:./Libraries/CMSIS/Include/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 572:./Libraries/CMSIS/Include/core_cm0.h **** {
 573:./Libraries/CMSIS/Include/core_cm0.h ****   if(IRQn < 0) {
 574:./Libraries/CMSIS/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 575:./Libraries/CMSIS/Include/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
ARM GAS  /tmp/ccTg0jKO.s 			page 20


 576:./Libraries/CMSIS/Include/core_cm0.h ****   else {
 577:./Libraries/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 578:./Libraries/CMSIS/Include/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 579:./Libraries/CMSIS/Include/core_cm0.h **** }
 580:./Libraries/CMSIS/Include/core_cm0.h **** 
 581:./Libraries/CMSIS/Include/core_cm0.h **** 
 582:./Libraries/CMSIS/Include/core_cm0.h **** /** \brief  Get Interrupt Priority
 583:./Libraries/CMSIS/Include/core_cm0.h **** 
 584:./Libraries/CMSIS/Include/core_cm0.h ****     This function reads the priority for the specified interrupt. The interrupt
 585:./Libraries/CMSIS/Include/core_cm0.h ****     number can be positive to specify an external (device specific)
 586:./Libraries/CMSIS/Include/core_cm0.h ****     interrupt, or negative to specify an internal (core) interrupt.
 587:./Libraries/CMSIS/Include/core_cm0.h **** 
 588:./Libraries/CMSIS/Include/core_cm0.h ****     The returned priority value is automatically aligned to the implemented
 589:./Libraries/CMSIS/Include/core_cm0.h ****     priority bits of the microcontroller.
 590:./Libraries/CMSIS/Include/core_cm0.h **** 
 591:./Libraries/CMSIS/Include/core_cm0.h ****     \param [in]   IRQn  Number of the interrupt for get priority
 592:./Libraries/CMSIS/Include/core_cm0.h ****     \return             Interrupt Priority
 593:./Libraries/CMSIS/Include/core_cm0.h ****  */
 594:./Libraries/CMSIS/Include/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 595:./Libraries/CMSIS/Include/core_cm0.h **** {
 596:./Libraries/CMSIS/Include/core_cm0.h **** 
 597:./Libraries/CMSIS/Include/core_cm0.h ****   if(IRQn < 0) {
 598:./Libraries/CMSIS/Include/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 599:./Libraries/CMSIS/Include/core_cm0.h ****   else {
 600:./Libraries/CMSIS/Include/core_cm0.h ****     return((uint32_t)((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 601:./Libraries/CMSIS/Include/core_cm0.h **** }
 602:./Libraries/CMSIS/Include/core_cm0.h **** 
 603:./Libraries/CMSIS/Include/core_cm0.h **** 
 604:./Libraries/CMSIS/Include/core_cm0.h **** /** \brief  System Reset
 605:./Libraries/CMSIS/Include/core_cm0.h **** 
 606:./Libraries/CMSIS/Include/core_cm0.h ****     This function initiate a system reset request to reset the MCU.
 607:./Libraries/CMSIS/Include/core_cm0.h ****  */
 608:./Libraries/CMSIS/Include/core_cm0.h **** static __INLINE void NVIC_SystemReset(void)
 609:./Libraries/CMSIS/Include/core_cm0.h **** {
 610:./Libraries/CMSIS/Include/core_cm0.h ****   __DSB();                                                     /* Ensure all outstanding memory acc
 611:./Libraries/CMSIS/Include/core_cm0.h ****                                                                   buffered write are completed befo
 612:./Libraries/CMSIS/Include/core_cm0.h ****   SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
 613:./Libraries/CMSIS/Include/core_cm0.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 614:./Libraries/CMSIS/Include/core_cm0.h ****   __DSB();                                                     /* Ensure completion of memory acces
 615:./Libraries/CMSIS/Include/core_cm0.h ****   while(1);                                                    /* wait until reset */
 616:./Libraries/CMSIS/Include/core_cm0.h **** }
 617:./Libraries/CMSIS/Include/core_cm0.h **** 
 618:./Libraries/CMSIS/Include/core_cm0.h **** /*@} end of CMSIS_Core_NVICFunctions */
 619:./Libraries/CMSIS/Include/core_cm0.h **** 
 620:./Libraries/CMSIS/Include/core_cm0.h **** 
 621:./Libraries/CMSIS/Include/core_cm0.h **** 
 622:./Libraries/CMSIS/Include/core_cm0.h **** /* ##################################    SysTick function  ########################################
 623:./Libraries/CMSIS/Include/core_cm0.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 624:./Libraries/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_Core_SysTickFunctions CMSIS Core SysTick Functions
 625:./Libraries/CMSIS/Include/core_cm0.h ****   @{
 626:./Libraries/CMSIS/Include/core_cm0.h ****  */
 627:./Libraries/CMSIS/Include/core_cm0.h **** 
 628:./Libraries/CMSIS/Include/core_cm0.h **** #if (__Vendor_SysTickConfig == 0)
 629:./Libraries/CMSIS/Include/core_cm0.h **** 
 630:./Libraries/CMSIS/Include/core_cm0.h **** /** \brief  System Tick Configuration
 631:./Libraries/CMSIS/Include/core_cm0.h **** 
 632:./Libraries/CMSIS/Include/core_cm0.h ****     This function initialises the system tick timer and its interrupt and start the system tick tim
ARM GAS  /tmp/ccTg0jKO.s 			page 21


 633:./Libraries/CMSIS/Include/core_cm0.h ****     Counter is in free running mode to generate periodical interrupts.
 634:./Libraries/CMSIS/Include/core_cm0.h **** 
 635:./Libraries/CMSIS/Include/core_cm0.h ****     \param [in]  ticks  Number of ticks between two interrupts
 636:./Libraries/CMSIS/Include/core_cm0.h ****     \return          0  Function succeeded
 637:./Libraries/CMSIS/Include/core_cm0.h ****     \return          1  Function failed
 638:./Libraries/CMSIS/Include/core_cm0.h ****  */
 639:./Libraries/CMSIS/Include/core_cm0.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
 353              		.loc 2 639 26 view .LVU69
 354              	.LBB10:
 640:./Libraries/CMSIS/Include/core_cm0.h **** {
 641:./Libraries/CMSIS/Include/core_cm0.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 355              		.loc 2 641 3 view .LVU70
 642:./Libraries/CMSIS/Include/core_cm0.h **** 
 643:./Libraries/CMSIS/Include/core_cm0.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 356              		.loc 2 643 3 view .LVU71
 357              		.loc 2 643 27 is_stmt 0 view .LVU72
 358 002a 0302     		lsls	r3, r0, #8
 359 002c 1B0A     		lsrs	r3, r3, #8
 360              		.loc 2 643 54 view .LVU73
 361 002e 013B     		subs	r3, r3, #1
 362              		.loc 2 643 18 view .LVU74
 363 0030 434A     		ldr	r2, .L44+4
 364 0032 5360     		str	r3, [r2, #4]
 644:./Libraries/CMSIS/Include/core_cm0.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 365              		.loc 2 644 3 is_stmt 1 view .LVU75
 366              	.LVL18:
 367              	.LBB11:
 368              	.LBI11:
 571:./Libraries/CMSIS/Include/core_cm0.h **** {
 369              		.loc 2 571 22 view .LVU76
 370              	.LBB12:
 573:./Libraries/CMSIS/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 371              		.loc 2 573 3 view .LVU77
 574:./Libraries/CMSIS/Include/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 372              		.loc 2 574 5 view .LVU78
 574:./Libraries/CMSIS/Include/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 373              		.loc 2 574 41 is_stmt 0 view .LVU79
 374 0034 4348     		ldr	r0, .L44+8
 375              	.LVL19:
 574:./Libraries/CMSIS/Include/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 376              		.loc 2 574 41 view .LVU80
 377 0036 036A     		ldr	r3, [r0, #32]
 574:./Libraries/CMSIS/Include/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 378              		.loc 2 574 58 view .LVU81
 379 0038 1B02     		lsls	r3, r3, #8
 380 003a 1B0A     		lsrs	r3, r3, #8
 574:./Libraries/CMSIS/Include/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 381              		.loc 2 574 89 view .LVU82
 382 003c C021     		movs	r1, #192
 383 003e 0906     		lsls	r1, r1, #24
 384 0040 0B43     		orrs	r3, r1
 574:./Libraries/CMSIS/Include/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 385              		.loc 2 574 30 view .LVU83
 386 0042 0362     		str	r3, [r0, #32]
 387              	.LVL20:
 574:./Libraries/CMSIS/Include/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 388              		.loc 2 574 30 view .LVU84
ARM GAS  /tmp/ccTg0jKO.s 			page 22


 389              	.LBE12:
 390              	.LBE11:
 645:./Libraries/CMSIS/Include/core_cm0.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 391              		.loc 2 645 3 is_stmt 1 view .LVU85
 392              		.loc 2 645 18 is_stmt 0 view .LVU86
 393 0044 9660     		str	r6, [r2, #8]
 646:./Libraries/CMSIS/Include/core_cm0.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 394              		.loc 2 646 3 is_stmt 1 view .LVU87
 395              		.loc 2 646 18 is_stmt 0 view .LVU88
 396 0046 0723     		movs	r3, #7
 397 0048 1360     		str	r3, [r2]
 647:./Libraries/CMSIS/Include/core_cm0.h ****                    SysTick_CTRL_TICKINT_Msk   |
 648:./Libraries/CMSIS/Include/core_cm0.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
 649:./Libraries/CMSIS/Include/core_cm0.h ****   return (0);                                                  /* Function successful */
 398              		.loc 2 649 3 is_stmt 1 view .LVU89
 399              		.loc 2 649 3 is_stmt 0 view .LVU90
 400              	.LBE10:
 401              	.LBE9:
  51:Project/Demonstration2/main.c ****     
 402              		.loc 1 51 5 is_stmt 1 view .LVU91
 403 004a 0020     		movs	r0, #0
 404 004c FFF7FEFF 		bl	setState
 405              	.LVL21:
  46:Project/Demonstration2/main.c **** 	STM_EVAL_LEDInit(LED3);
 406              		.loc 1 46 13 is_stmt 0 view .LVU92
 407 0050 0025     		movs	r5, #0
 408 0052 29E0     		b	.L38
 409              	.LVL22:
 410              	.L40:
 411              	.LBB13:
  65:Project/Demonstration2/main.c ****         } else {
 412              		.loc 1 65 13 is_stmt 1 view .LVU93
  65:Project/Demonstration2/main.c ****         } else {
 413              		.loc 1 65 25 is_stmt 0 view .LVU94
 414 0054 FF23     		movs	r3, #255
 415 0056 0340     		ands	r3, r0
 416 0058 01A9     		add	r1, sp, #4
 417 005a CA5C     		ldrb	r2, [r1, r3]
  65:Project/Demonstration2/main.c ****         } else {
 418              		.loc 1 65 40 view .LVU95
 419 005c 0132     		adds	r2, r2, #1
 420 005e CA54     		strb	r2, [r1, r3]
 421 0060 2DE0     		b	.L24
 422              	.LVL23:
 423              	.L33:
  79:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOff(LED4);
 424              		.loc 1 79 17 is_stmt 1 view .LVU96
 425 0062 0020     		movs	r0, #0
 426 0064 FFF7FEFF 		bl	STM_EVAL_LEDOff
 427              	.LVL24:
  80:Project/Demonstration2/main.c ****                 TIM_DeInit(TIM3);
 428              		.loc 1 80 17 view .LVU97
 429 0068 0120     		movs	r0, #1
 430 006a FFF7FEFF 		bl	STM_EVAL_LEDOff
 431              	.LVL25:
  81:Project/Demonstration2/main.c ****                 if (!button_state) setState(STATE_OFF_B);
 432              		.loc 1 81 17 view .LVU98
ARM GAS  /tmp/ccTg0jKO.s 			page 23


 433 006e 3648     		ldr	r0, .L44+12
 434 0070 FFF7FEFF 		bl	TIM_DeInit
 435              	.LVL26:
  82:Project/Demonstration2/main.c ****                 break;
 436              		.loc 1 82 17 view .LVU99
  82:Project/Demonstration2/main.c ****                 break;
 437              		.loc 1 82 20 is_stmt 0 view .LVU100
 438 0074 002D     		cmp	r5, #0
 439 0076 13D1     		bne	.L26
  82:Project/Demonstration2/main.c ****                 break;
 440              		.loc 1 82 36 is_stmt 1 discriminator 1 view .LVU101
 441 0078 0120     		movs	r0, #1
 442 007a FFF7FEFF 		bl	setState
 443              	.LVL27:
 444 007e 0FE0     		b	.L26
 445              	.L32:
  85:Project/Demonstration2/main.c ****                     setState(STATE_5S_A);
 446              		.loc 1 85 17 view .LVU102
  85:Project/Demonstration2/main.c ****                     setState(STATE_5S_A);
 447              		.loc 1 85 20 is_stmt 0 view .LVU103
 448 0080 002D     		cmp	r5, #0
 449 0082 0DD0     		beq	.L26
  86:Project/Demonstration2/main.c ****                     TIM_Config();
 450              		.loc 1 86 21 is_stmt 1 view .LVU104
 451 0084 0420     		movs	r0, #4
 452 0086 FFF7FEFF 		bl	setState
 453              	.LVL28:
  87:Project/Demonstration2/main.c ****                 }
 454              		.loc 1 87 21 view .LVU105
 455 008a FFF7FEFF 		bl	TIM_Config
 456              	.LVL29:
 457 008e 07E0     		b	.L26
 458              	.L31:
  91:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOn(LED3);
 459              		.loc 1 91 17 view .LVU106
  91:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOn(LED3);
 460              		.loc 1 91 20 is_stmt 0 view .LVU107
 461 0090 002D     		cmp	r5, #0
 462 0092 28D0     		beq	.L39
 463              	.L34:
  92:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOff(LED4);
 464              		.loc 1 92 17 is_stmt 1 view .LVU108
 465 0094 0020     		movs	r0, #0
 466 0096 FFF7FEFF 		bl	STM_EVAL_LEDOn
 467              	.LVL30:
  93:Project/Demonstration2/main.c ****                 break;
 468              		.loc 1 93 17 view .LVU109
 469 009a 0120     		movs	r0, #1
 470 009c FFF7FEFF 		bl	STM_EVAL_LEDOff
 471              	.LVL31:
  94:Project/Demonstration2/main.c ****             case STATE_3S_B:
 472              		.loc 1 94 17 view .LVU110
 473              	.L26:
 111:Project/Demonstration2/main.c **** 	}
 474              		.loc 1 111 9 view .LVU111
 475 00a0 0120     		movs	r0, #1
 476 00a2 FFF7FEFF 		bl	Delay
ARM GAS  /tmp/ccTg0jKO.s 			page 24


 477              	.LVL32:
 478              	.LBE13:
  53:Project/Demonstration2/main.c ****     {
 479              		.loc 1 53 7 view .LVU112
 480              	.LBB14:
  69:Project/Demonstration2/main.c ****         if (button_accum[currentButton] > 10) {
 481              		.loc 1 69 16 is_stmt 0 view .LVU113
 482 00a6 2600     		movs	r6, r4
 483              	.LVL33:
 484              	.L38:
  69:Project/Demonstration2/main.c ****         if (button_accum[currentButton] > 10) {
 485              		.loc 1 69 16 view .LVU114
 486              	.LBE14:
  53:Project/Demonstration2/main.c ****     {
 487              		.loc 1 53 2 is_stmt 1 view .LVU115
 488              	.LBB15:
  62:Project/Demonstration2/main.c ****         button ^= currentButton;
 489              		.loc 1 62 9 view .LVU116
  62:Project/Demonstration2/main.c ****         button ^= currentButton;
 490              		.loc 1 62 33 is_stmt 0 view .LVU117
 491 00a8 0020     		movs	r0, #0
 492 00aa FFF7FEFF 		bl	STM_EVAL_PBGetState
 493              	.LVL34:
  62:Project/Demonstration2/main.c ****         button ^= currentButton;
 494              		.loc 1 62 17 view .LVU118
 495 00ae C4B2     		uxtb	r4, r0
 496              	.LVL35:
  63:Project/Demonstration2/main.c ****         if (button == 0) {
 497              		.loc 1 63 9 is_stmt 1 view .LVU119
  64:Project/Demonstration2/main.c ****             button_accum[currentButton]++;
 498              		.loc 1 64 9 view .LVU120
  64:Project/Demonstration2/main.c ****             button_accum[currentButton]++;
 499              		.loc 1 64 12 is_stmt 0 view .LVU121
 500 00b0 A642     		cmp	r6, r4
 501 00b2 CFD0     		beq	.L40
  67:Project/Demonstration2/main.c ****         }
 502              		.loc 1 67 13 is_stmt 1 view .LVU122
  67:Project/Demonstration2/main.c ****         }
 503              		.loc 1 67 25 is_stmt 0 view .LVU123
 504 00b4 FF23     		movs	r3, #255
 505 00b6 0340     		ands	r3, r0
  67:Project/Demonstration2/main.c ****         }
 506              		.loc 1 67 41 view .LVU124
 507 00b8 01AA     		add	r2, sp, #4
 508 00ba 0021     		movs	r1, #0
 509 00bc D154     		strb	r1, [r2, r3]
 510              	.L24:
  69:Project/Demonstration2/main.c ****         if (button_accum[currentButton] > 10) {
 511              		.loc 1 69 9 is_stmt 1 view .LVU125
 512              	.LVL36:
  70:Project/Demonstration2/main.c ****             button_state = currentButton;
 513              		.loc 1 70 9 view .LVU126
  70:Project/Demonstration2/main.c ****             button_state = currentButton;
 514              		.loc 1 70 25 is_stmt 0 view .LVU127
 515 00be FF23     		movs	r3, #255
 516 00c0 1840     		ands	r0, r3
 517 00c2 01AB     		add	r3, sp, #4
ARM GAS  /tmp/ccTg0jKO.s 			page 25


 518 00c4 1B5C     		ldrb	r3, [r3, r0]
  70:Project/Demonstration2/main.c ****             button_state = currentButton;
 519              		.loc 1 70 12 view .LVU128
 520 00c6 0A2B     		cmp	r3, #10
 521 00c8 04D9     		bls	.L25
  71:Project/Demonstration2/main.c ****             button_accum[0] = 0;
 522              		.loc 1 71 13 is_stmt 1 view .LVU129
 523              	.LVL37:
  72:Project/Demonstration2/main.c ****             button_accum[1] = 0;
 524              		.loc 1 72 13 view .LVU130
  72:Project/Demonstration2/main.c ****             button_accum[1] = 0;
 525              		.loc 1 72 29 is_stmt 0 view .LVU131
 526 00ca 01AB     		add	r3, sp, #4
 527 00cc 0022     		movs	r2, #0
 528 00ce 1A70     		strb	r2, [r3]
  73:Project/Demonstration2/main.c ****         }
 529              		.loc 1 73 13 is_stmt 1 view .LVU132
  73:Project/Demonstration2/main.c ****         }
 530              		.loc 1 73 29 is_stmt 0 view .LVU133
 531 00d0 5A70     		strb	r2, [r3, #1]
  71:Project/Demonstration2/main.c ****             button_accum[0] = 0;
 532              		.loc 1 71 26 view .LVU134
 533 00d2 2500     		movs	r5, r4
 534              	.LVL38:
 535              	.L25:
  77:Project/Demonstration2/main.c ****             case STATE_OFF_A:
 536              		.loc 1 77 9 is_stmt 1 view .LVU135
 537 00d4 1D4B     		ldr	r3, .L44+16
 538 00d6 1B78     		ldrb	r3, [r3]
 539 00d8 DBB2     		uxtb	r3, r3
 540 00da 052B     		cmp	r3, #5
 541 00dc E0D8     		bhi	.L26
 542 00de 9B00     		lsls	r3, r3, #2
 543 00e0 1B4A     		ldr	r2, .L44+20
 544 00e2 D358     		ldr	r3, [r2, r3]
 545 00e4 9F46     		mov	pc, r3
 546              		.section	.rodata.main,"a",%progbits
 547              		.align	2
 548              	.L28:
 549 0000 62000000 		.word	.L33
 550 0004 80000000 		.word	.L32
 551 0008 90000000 		.word	.L31
 552 000c EE000000 		.word	.L30
 553 0010 08010000 		.word	.L29
 554 0014 22010000 		.word	.L27
 555              		.section	.text.main
 556              	.L39:
  91:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOn(LED3);
 557              		.loc 1 91 36 discriminator 1 view .LVU136
 558 00e6 0320     		movs	r0, #3
 559 00e8 FFF7FEFF 		bl	setState
 560              	.LVL39:
 561 00ec D2E7     		b	.L34
 562              	.L30:
  96:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOn(LED3);
 563              		.loc 1 96 17 view .LVU137
  96:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOn(LED3);
ARM GAS  /tmp/ccTg0jKO.s 			page 26


 564              		.loc 1 96 20 is_stmt 0 view .LVU138
 565 00ee 002D     		cmp	r5, #0
 566 00f0 06D1     		bne	.L41
 567              	.L35:
  97:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOff(LED4);
 568              		.loc 1 97 17 is_stmt 1 view .LVU139
 569 00f2 0020     		movs	r0, #0
 570 00f4 FFF7FEFF 		bl	STM_EVAL_LEDOn
 571              	.LVL40:
  98:Project/Demonstration2/main.c ****                 break;
 572              		.loc 1 98 17 view .LVU140
 573 00f8 0120     		movs	r0, #1
 574 00fa FFF7FEFF 		bl	STM_EVAL_LEDOff
 575              	.LVL41:
  99:Project/Demonstration2/main.c ****             case STATE_5S_A:
 576              		.loc 1 99 17 view .LVU141
 577 00fe CFE7     		b	.L26
 578              	.L41:
  96:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOn(LED3);
 579              		.loc 1 96 35 discriminator 1 view .LVU142
 580 0100 0020     		movs	r0, #0
 581 0102 FFF7FEFF 		bl	setState
 582              	.LVL42:
 583 0106 F4E7     		b	.L35
 584              	.L29:
 101:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOff(LED3);
 585              		.loc 1 101 17 view .LVU143
 101:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOff(LED3);
 586              		.loc 1 101 20 is_stmt 0 view .LVU144
 587 0108 002D     		cmp	r5, #0
 588 010a 06D0     		beq	.L42
 589              	.L36:
 102:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOn(LED4);
 590              		.loc 1 102 17 is_stmt 1 view .LVU145
 591 010c 0020     		movs	r0, #0
 592 010e FFF7FEFF 		bl	STM_EVAL_LEDOff
 593              	.LVL43:
 103:Project/Demonstration2/main.c ****                 break;
 594              		.loc 1 103 17 view .LVU146
 595 0112 0120     		movs	r0, #1
 596 0114 FFF7FEFF 		bl	STM_EVAL_LEDOn
 597              	.LVL44:
 104:Project/Demonstration2/main.c ****             case STATE_5S_B:
 598              		.loc 1 104 17 view .LVU147
 599 0118 C2E7     		b	.L26
 600              	.L42:
 101:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOff(LED3);
 601              		.loc 1 101 36 discriminator 1 view .LVU148
 602 011a 0520     		movs	r0, #5
 603 011c FFF7FEFF 		bl	setState
 604              	.LVL45:
 605 0120 F4E7     		b	.L36
 606              	.L27:
 106:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOff(LED3);
 607              		.loc 1 106 17 view .LVU149
 106:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOff(LED3);
 608              		.loc 1 106 20 is_stmt 0 view .LVU150
ARM GAS  /tmp/ccTg0jKO.s 			page 27


 609 0122 002D     		cmp	r5, #0
 610 0124 06D1     		bne	.L43
 611              	.L37:
 107:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOn(LED4);
 612              		.loc 1 107 17 is_stmt 1 view .LVU151
 613 0126 0020     		movs	r0, #0
 614 0128 FFF7FEFF 		bl	STM_EVAL_LEDOff
 615              	.LVL46:
 108:Project/Demonstration2/main.c ****                 break;
 616              		.loc 1 108 17 view .LVU152
 617 012c 0120     		movs	r0, #1
 618 012e FFF7FEFF 		bl	STM_EVAL_LEDOn
 619              	.LVL47:
 109:Project/Demonstration2/main.c ****         }
 620              		.loc 1 109 17 view .LVU153
 621 0132 B5E7     		b	.L26
 622              	.L43:
 106:Project/Demonstration2/main.c ****                 STM_EVAL_LEDOff(LED3);
 623              		.loc 1 106 35 discriminator 1 view .LVU154
 624 0134 0020     		movs	r0, #0
 625 0136 FFF7FEFF 		bl	setState
 626              	.LVL48:
 627 013a F4E7     		b	.L37
 628              	.L45:
 629              		.align	2
 630              	.L44:
 631 013c 00000000 		.word	SystemCoreClock
 632 0140 10E000E0 		.word	-536813552
 633 0144 00ED00E0 		.word	-536810240
 634 0148 00040040 		.word	1073742848
 635 014c 00000000 		.word	.LANCHOR2
 636 0150 00000000 		.word	.L28
 637              	.LBE15:
 638              		.cfi_endproc
 639              	.LFE32:
 641              		.section	.text.getState,"ax",%progbits
 642              		.align	1
 643              		.global	getState
 644              		.syntax unified
 645              		.code	16
 646              		.thumb_func
 647              		.fpu softvfp
 649              	getState:
 650              	.LFB38:
 155:Project/Demonstration2/main.c **** 
 156:Project/Demonstration2/main.c **** uint8_t getState(void)
 157:Project/Demonstration2/main.c **** {
 651              		.loc 1 157 1 view -0
 652              		.cfi_startproc
 653              		@ args = 0, pretend = 0, frame = 0
 654              		@ frame_needed = 0, uses_anonymous_args = 0
 655              		@ link register save eliminated.
 158:Project/Demonstration2/main.c ****     return currentState;
 656              		.loc 1 158 5 view .LVU156
 657              		.loc 1 158 12 is_stmt 0 view .LVU157
 658 0000 014B     		ldr	r3, .L47
 659 0002 1878     		ldrb	r0, [r3]
ARM GAS  /tmp/ccTg0jKO.s 			page 28


 660 0004 C0B2     		uxtb	r0, r0
 159:Project/Demonstration2/main.c **** }
 661              		.loc 1 159 1 view .LVU158
 662              		@ sp needed
 663 0006 7047     		bx	lr
 664              	.L48:
 665              		.align	2
 666              	.L47:
 667 0008 00000000 		.word	.LANCHOR2
 668              		.cfi_endproc
 669              	.LFE38:
 671              		.section	.bss.TIM3_Period,"aw",%nobits
 672              		.align	1
 673              		.set	.LANCHOR0,. + 0
 676              	TIM3_Period:
 677 0000 0000     		.space	2
 678              		.section	.bss.TimingDelay,"aw",%nobits
 679              		.align	2
 680              		.set	.LANCHOR1,. + 0
 683              	TimingDelay:
 684 0000 00000000 		.space	4
 685              		.section	.bss.currentState,"aw",%nobits
 686              		.set	.LANCHOR2,. + 0
 689              	currentState:
 690 0000 00       		.space	1
 691              		.text
 692              	.Letext0:
 693              		.file 3 "./Libraries/CMSIS/ST/STM32F0xx/Include/stm32f0xx.h"
 694              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 695              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 696              		.file 6 "./Libraries/STM32F0xx_StdPeriph_Driver/inc/stm32f0xx_tim.h"
 697              		.file 7 "./Libraries/STM32F0xx_StdPeriph_Driver/inc/stm32f0xx_misc.h"
 698              		.file 8 "./Utilities/STM32F0-Discovery/stm32f0_discovery.h"
 699              		.file 9 "Project/Demonstration2/main.h"
 700              		.file 10 "./Libraries/CMSIS/ST/STM32F0xx/Include/system_stm32f0xx.h"
 701              		.file 11 "./Libraries/STM32F0xx_StdPeriph_Driver/inc/stm32f0xx_rcc.h"
ARM GAS  /tmp/ccTg0jKO.s 			page 29


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccTg0jKO.s:16     .text.TIM_Config:0000000000000000 $t
     /tmp/ccTg0jKO.s:24     .text.TIM_Config:0000000000000000 TIM_Config
     /tmp/ccTg0jKO.s:103    .text.TIM_Config:0000000000000050 $d
     /tmp/ccTg0jKO.s:110    .text.TimingDelay_Decrement:0000000000000000 $t
     /tmp/ccTg0jKO.s:117    .text.TimingDelay_Decrement:0000000000000000 TimingDelay_Decrement
     /tmp/ccTg0jKO.s:144    .text.TimingDelay_Decrement:0000000000000014 $d
     /tmp/ccTg0jKO.s:149    .text.Delay:0000000000000000 $t
     /tmp/ccTg0jKO.s:156    .text.Delay:0000000000000000 Delay
     /tmp/ccTg0jKO.s:191    .text.Delay:0000000000000018 $d
     /tmp/ccTg0jKO.s:196    .text.setPeriod:0000000000000000 $t
     /tmp/ccTg0jKO.s:203    .text.setPeriod:0000000000000000 setPeriod
     /tmp/ccTg0jKO.s:221    .text.setPeriod:0000000000000008 $d
     /tmp/ccTg0jKO.s:226    .text.setState:0000000000000000 $t
     /tmp/ccTg0jKO.s:233    .text.setState:0000000000000000 setState
     /tmp/ccTg0jKO.s:291    .text.setState:000000000000002c $d
     /tmp/ccTg0jKO.s:299    .text.main:0000000000000000 $t
     /tmp/ccTg0jKO.s:306    .text.main:0000000000000000 main
     /tmp/ccTg0jKO.s:547    .rodata.main:0000000000000000 $d
     /tmp/ccTg0jKO.s:631    .text.main:000000000000013c $d
     /tmp/ccTg0jKO.s:642    .text.getState:0000000000000000 $t
     /tmp/ccTg0jKO.s:649    .text.getState:0000000000000000 getState
     /tmp/ccTg0jKO.s:667    .text.getState:0000000000000008 $d
     /tmp/ccTg0jKO.s:672    .bss.TIM3_Period:0000000000000000 $d
     /tmp/ccTg0jKO.s:676    .bss.TIM3_Period:0000000000000000 TIM3_Period
     /tmp/ccTg0jKO.s:679    .bss.TimingDelay:0000000000000000 $d
     /tmp/ccTg0jKO.s:683    .bss.TimingDelay:0000000000000000 TimingDelay
     /tmp/ccTg0jKO.s:689    .bss.currentState:0000000000000000 currentState
     /tmp/ccTg0jKO.s:690    .bss.currentState:0000000000000000 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphClockCmd
TIM_TimeBaseInit
TIM_ITConfig
NVIC_Init
TIM_Cmd
__aeabi_uidiv
STM_EVAL_LEDInit
STM_EVAL_PBInit
STM_EVAL_LEDOff
TIM_DeInit
STM_EVAL_LEDOn
STM_EVAL_PBGetState
SystemCoreClock
