ARM GAS  /tmp/ccaBVS0B.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f0xx_pwr.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.PWR_DeInit,"ax",%progbits
  16              		.align	1
  17              		.global	PWR_DeInit
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	PWR_DeInit:
  25              	.LFB32:
  26              		.file 1 "Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c"
   1:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
   2:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ******************************************************************************
   3:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @file    stm32f0xx_pwr.c
   4:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @author  MCD Application Team
   5:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @version V1.0.0
   6:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @date    23-March-2012
   7:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @brief   This file provides firmware functions to manage the following 
   8:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:
   9:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *           + Backup Domain Access
  10:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *           + PVD configuration
  11:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *           + WakeUp pins configuration
  12:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *           + Low Power modes configuration
  13:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *           + Flags management
  14:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *
  15:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ******************************************************************************
  16:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @attention
  17:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *
  18:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  19:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *
  20:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  21:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * You may not use this file except in compliance with the License.
  22:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * You may obtain a copy of the License at:
  23:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *
  24:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  25:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *
  26:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * Unless required by applicable law or agreed to in writing, software 
  27:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  28:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  29:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * See the License for the specific language governing permissions and
  30:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * limitations under the License.
  31:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *
  32:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ******************************************************************************
ARM GAS  /tmp/ccaBVS0B.s 			page 2


  33:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
  34:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
  35:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /* Includes ------------------------------------------------------------------*/
  36:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** #include "stm32f0xx_pwr.h"
  37:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** #include "stm32f0xx_rcc.h"
  38:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
  39:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
  40:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @{
  41:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
  42:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
  43:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /** @defgroup PWR 
  44:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @brief PWR driver modules
  45:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @{
  46:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */ 
  47:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
  48:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  49:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /* Private define ------------------------------------------------------------*/
  50:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
  51:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /* ------------------ PWR registers bit mask ------------------------ */
  52:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
  53:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /* CR register bit mask */
  54:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** #define CR_DS_MASK               ((uint32_t)0xFFFFFFFC)
  55:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** #define CR_PLS_MASK              ((uint32_t)0xFFFFFF1F)
  56:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
  57:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /* Private macro -------------------------------------------------------------*/
  58:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /* Private variables ---------------------------------------------------------*/
  59:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  60:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /* Private functions ---------------------------------------------------------*/
  61:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
  62:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /** @defgroup PWR_Private_Functions
  63:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @{
  64:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
  65:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
  66:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /** @defgroup PWR_Group1 Backup Domain Access function 
  67:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****  *  @brief   Backup Domain Access function
  68:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****  *
  69:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** @verbatim
  70:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ==============================================================================
  71:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                    ##### Backup Domain Access function #####
  72:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ==============================================================================
  73:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
  74:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     [..] After reset, the Backup Domain Registers (RCC BDCR Register, RTC registers
  75:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****          and RTC backup registers) are protected against possible stray write accesses.
  76:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     [..] To enable access to Backup domain use the PWR_BackupAccessCmd(ENABLE) function.
  77:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
  78:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** @endverbatim
  79:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @{
  80:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
  81:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
  82:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
  83:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @brief  Deinitializes the PWR peripheral registers to their default reset values.
  84:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @param  None
  85:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @retval None
  86:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
  87:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** void PWR_DeInit(void)
  88:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** {
  27              		.loc 1 88 1 view -0
ARM GAS  /tmp/ccaBVS0B.s 			page 3


  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 10B5     		push	{r4, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  89:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  36              		.loc 1 89 3 view .LVU1
  37 0002 8024     		movs	r4, #128
  38 0004 6405     		lsls	r4, r4, #21
  39 0006 0121     		movs	r1, #1
  40 0008 2000     		movs	r0, r4
  41 000a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  42              	.LVL0:
  90:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
  43              		.loc 1 90 3 view .LVU2
  44 000e 0021     		movs	r1, #0
  45 0010 2000     		movs	r0, r4
  46 0012 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  47              	.LVL1:
  91:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** }
  48              		.loc 1 91 1 is_stmt 0 view .LVU3
  49              		@ sp needed
  50 0016 10BD     		pop	{r4, pc}
  51              		.cfi_endproc
  52              	.LFE32:
  54              		.section	.text.PWR_BackupAccessCmd,"ax",%progbits
  55              		.align	1
  56              		.global	PWR_BackupAccessCmd
  57              		.syntax unified
  58              		.code	16
  59              		.thumb_func
  60              		.fpu softvfp
  62              	PWR_BackupAccessCmd:
  63              	.LVL2:
  64              	.LFB33:
  92:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
  93:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
  94:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @brief  Enables or disables access to the Backup domain registers.
  95:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @note   If the HSE divided by 32 is used as the RTC clock, the 
  96:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         Backup Domain Access should be kept enabled.
  97:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @param  NewState: new state of the access to the Backup domain registers.
  98:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
  99:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @retval None
 100:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 101:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** void PWR_BackupAccessCmd(FunctionalState NewState)
 102:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** {
  65              		.loc 1 102 1 is_stmt 1 view -0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69              		@ link register save eliminated.
 103:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Check the parameters */
 104:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
  70              		.loc 1 104 3 view .LVU5
ARM GAS  /tmp/ccaBVS0B.s 			page 4


 105:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   
 106:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   if (NewState != DISABLE)
  71              		.loc 1 106 3 view .LVU6
  72              		.loc 1 106 6 is_stmt 0 view .LVU7
  73 0000 0028     		cmp	r0, #0
  74 0002 06D0     		beq	.L3
 107:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   {
 108:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     /* Enable the Backup Domain Access */
 109:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     PWR->CR |= PWR_CR_DBP;
  75              		.loc 1 109 5 is_stmt 1 view .LVU8
  76              		.loc 1 109 13 is_stmt 0 view .LVU9
  77 0004 064A     		ldr	r2, .L5
  78 0006 1168     		ldr	r1, [r2]
  79 0008 8023     		movs	r3, #128
  80 000a 5B00     		lsls	r3, r3, #1
  81 000c 0B43     		orrs	r3, r1
  82 000e 1360     		str	r3, [r2]
  83              	.L2:
 110:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 111:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   else
 112:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   {
 113:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     /* Disable the Backup Domain Access */
 114:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     PWR->CR &= (uint32_t)~((uint32_t)PWR_CR_DBP);
 115:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   } 
 116:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** }
  84              		.loc 1 116 1 view .LVU10
  85              		@ sp needed
  86 0010 7047     		bx	lr
  87              	.L3:
 114:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   } 
  88              		.loc 1 114 5 is_stmt 1 view .LVU11
 114:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   } 
  89              		.loc 1 114 13 is_stmt 0 view .LVU12
  90 0012 034A     		ldr	r2, .L5
  91 0014 1368     		ldr	r3, [r2]
  92 0016 0349     		ldr	r1, .L5+4
  93 0018 0B40     		ands	r3, r1
  94 001a 1360     		str	r3, [r2]
  95              		.loc 1 116 1 view .LVU13
  96 001c F8E7     		b	.L2
  97              	.L6:
  98 001e C046     		.align	2
  99              	.L5:
 100 0020 00700040 		.word	1073770496
 101 0024 FFFEFFFF 		.word	-257
 102              		.cfi_endproc
 103              	.LFE33:
 105              		.section	.text.PWR_PVDLevelConfig,"ax",%progbits
 106              		.align	1
 107              		.global	PWR_PVDLevelConfig
 108              		.syntax unified
 109              		.code	16
 110              		.thumb_func
 111              		.fpu softvfp
 113              	PWR_PVDLevelConfig:
 114              	.LVL3:
 115              	.LFB34:
ARM GAS  /tmp/ccaBVS0B.s 			page 5


 117:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 118:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
 119:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @}
 120:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 121:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 122:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /** @defgroup PWR_Group2 PVD configuration functions
 123:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****  *  @brief   PVD configuration functions 
 124:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****  *
 125:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** @verbatim
 126:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ==============================================================================
 127:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                     ##### PVD configuration functions #####
 128:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ==============================================================================
 129:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   [..]
 130:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   (+) The PVD is used to monitor the VDD power supply by comparing it to a threshold
 131:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****       selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
 132:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   (+) A PVDO flag is available to indicate if VDD/VDDA is higher or lower than the 
 133:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****       PVD threshold. This event is internally connected to the EXTI line16
 134:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****       and can generate an interrupt if enabled through the EXTI registers.
 135:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   (+) The PVD is stopped in Standby mode.
 136:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 137:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** @endverbatim
 138:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @{
 139:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 140:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 141:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
 142:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 143:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @param  PWR_PVDLevel: specifies the PVD detection level
 144:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         This parameter can be one of the following values:
 145:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_PVDLevel_0: PVD detection level set to 1.9V
 146:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_PVDLevel_1: PVD detection level set to 2.1V
 147:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_PVDLevel_2: PVD detection level set to 2.3V
 148:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_PVDLevel_3: PVD detection level set to 2.5V
 149:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_PVDLevel_4: PVD detection level set to 2.7V
 150:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_PVDLevel_5: PVD detection level set to 2.9V
 151:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_PVDLevel_6: PVD detection level set to 3.1V
 152:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_PVDLevel_7: PVD detection level set to 3.3V
 153:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @retval None
 154:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 155:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
 156:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** {
 116              		.loc 1 156 1 is_stmt 1 view -0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120              		@ link register save eliminated.
 157:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   uint32_t tmpreg = 0;
 121              		.loc 1 157 3 view .LVU15
 158:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   
 159:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Check the parameters */
 160:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
 122              		.loc 1 160 3 view .LVU16
 161:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   
 162:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   tmpreg = PWR->CR;
 123              		.loc 1 162 3 view .LVU17
 124              		.loc 1 162 10 is_stmt 0 view .LVU18
 125 0000 034A     		ldr	r2, .L8
 126 0002 1368     		ldr	r3, [r2]
ARM GAS  /tmp/ccaBVS0B.s 			page 6


 127              	.LVL4:
 163:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   
 164:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Clear PLS[7:5] bits */
 165:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   tmpreg &= CR_PLS_MASK;
 128              		.loc 1 165 3 is_stmt 1 view .LVU19
 129              		.loc 1 165 10 is_stmt 0 view .LVU20
 130 0004 E021     		movs	r1, #224
 131 0006 8B43     		bics	r3, r1
 132              	.LVL5:
 166:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   
 167:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Set PLS[7:5] bits according to PWR_PVDLevel value */
 168:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   tmpreg |= PWR_PVDLevel;
 133              		.loc 1 168 3 is_stmt 1 view .LVU21
 134              		.loc 1 168 10 is_stmt 0 view .LVU22
 135 0008 0343     		orrs	r3, r0
 136              	.LVL6:
 169:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   
 170:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Store the new value */
 171:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   PWR->CR = tmpreg;
 137              		.loc 1 171 3 is_stmt 1 view .LVU23
 138              		.loc 1 171 11 is_stmt 0 view .LVU24
 139 000a 1360     		str	r3, [r2]
 172:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** }
 140              		.loc 1 172 1 view .LVU25
 141              		@ sp needed
 142 000c 7047     		bx	lr
 143              	.L9:
 144 000e C046     		.align	2
 145              	.L8:
 146 0010 00700040 		.word	1073770496
 147              		.cfi_endproc
 148              	.LFE34:
 150              		.section	.text.PWR_PVDCmd,"ax",%progbits
 151              		.align	1
 152              		.global	PWR_PVDCmd
 153              		.syntax unified
 154              		.code	16
 155              		.thumb_func
 156              		.fpu softvfp
 158              	PWR_PVDCmd:
 159              	.LVL7:
 160              	.LFB35:
 173:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 174:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
 175:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @brief  Enables or disables the Power Voltage Detector(PVD).
 176:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @param  NewState: new state of the PVD.
 177:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 178:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @retval None
 179:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 180:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** void PWR_PVDCmd(FunctionalState NewState)
 181:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** {
 161              		.loc 1 181 1 is_stmt 1 view -0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165              		@ link register save eliminated.
 182:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Check the parameters */
ARM GAS  /tmp/ccaBVS0B.s 			page 7


 183:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 166              		.loc 1 183 3 view .LVU27
 184:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   
 185:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   if (NewState != DISABLE)
 167              		.loc 1 185 3 view .LVU28
 168              		.loc 1 185 6 is_stmt 0 view .LVU29
 169 0000 0028     		cmp	r0, #0
 170 0002 05D0     		beq	.L11
 186:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   {
 187:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     /* Enable the PVD */
 188:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     PWR->CR |= PWR_CR_PVDE;
 171              		.loc 1 188 5 is_stmt 1 view .LVU30
 172              		.loc 1 188 13 is_stmt 0 view .LVU31
 173 0004 054A     		ldr	r2, .L13
 174 0006 1368     		ldr	r3, [r2]
 175 0008 1021     		movs	r1, #16
 176 000a 0B43     		orrs	r3, r1
 177 000c 1360     		str	r3, [r2]
 178              	.L10:
 189:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 190:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   else
 191:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   {
 192:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     /* Disable the PVD */
 193:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     PWR->CR &= (uint32_t)~((uint32_t)PWR_CR_PVDE);
 194:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   } 
 195:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** }
 179              		.loc 1 195 1 view .LVU32
 180              		@ sp needed
 181 000e 7047     		bx	lr
 182              	.L11:
 193:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   } 
 183              		.loc 1 193 5 is_stmt 1 view .LVU33
 193:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   } 
 184              		.loc 1 193 13 is_stmt 0 view .LVU34
 185 0010 024A     		ldr	r2, .L13
 186 0012 1368     		ldr	r3, [r2]
 187 0014 1021     		movs	r1, #16
 188 0016 8B43     		bics	r3, r1
 189 0018 1360     		str	r3, [r2]
 190              		.loc 1 195 1 view .LVU35
 191 001a F8E7     		b	.L10
 192              	.L14:
 193              		.align	2
 194              	.L13:
 195 001c 00700040 		.word	1073770496
 196              		.cfi_endproc
 197              	.LFE35:
 199              		.section	.text.PWR_WakeUpPinCmd,"ax",%progbits
 200              		.align	1
 201              		.global	PWR_WakeUpPinCmd
 202              		.syntax unified
 203              		.code	16
 204              		.thumb_func
 205              		.fpu softvfp
 207              	PWR_WakeUpPinCmd:
 208              	.LVL8:
 209              	.LFB36:
ARM GAS  /tmp/ccaBVS0B.s 			page 8


 196:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 197:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
 198:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @}
 199:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 200:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 201:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /** @defgroup PWR_Group3 WakeUp pins configuration functions
 202:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****  *  @brief   WakeUp pins configuration functions 
 203:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****  *
 204:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** @verbatim
 205:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ==============================================================================
 206:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                ##### WakeUp pin configuration functions #####
 207:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ==============================================================================
 208:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 209:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   (+) WakeUp pins are used to wakeup the system from Standby mode. These pins are 
 210:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****       forced in input pull down configuration and are active on rising edges.
 211:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   (+) There are three WakeUp pins: WakeUp Pin 1 on PA.00 and WakeUp Pin 2 on PC.13.
 212:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 213:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** @endverbatim
 214:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @{
 215:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 216:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 217:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
 218:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @brief  Enables or disables the WakeUp Pin functionality.
 219:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @param  PWR_WakeUpPin: specifies the WakeUpPin.
 220:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         This parameter can be: PWR_WakeUpPin_1 or PWR_WakeUpPin_2.
 221:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @param  NewState: new state of the WakeUp Pin functionality.
 222:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 223:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @retval None
 224:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 225:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** void PWR_WakeUpPinCmd(uint32_t PWR_WakeUpPin, FunctionalState NewState)
 226:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** {
 210              		.loc 1 226 1 is_stmt 1 view -0
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 0
 213              		@ frame_needed = 0, uses_anonymous_args = 0
 214              		@ link register save eliminated.
 227:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Check the parameters */
 228:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(PWR_WakeUpPin));
 215              		.loc 1 228 3 view .LVU37
 229:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 216              		.loc 1 229 3 view .LVU38
 230:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 231:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   if (NewState != DISABLE)
 217              		.loc 1 231 3 view .LVU39
 218              		.loc 1 231 6 is_stmt 0 view .LVU40
 219 0000 0029     		cmp	r1, #0
 220 0002 04D0     		beq	.L16
 232:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   {
 233:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     /* Enable the EWUPx pin */
 234:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     PWR->CSR |= PWR_WakeUpPin;
 221              		.loc 1 234 5 is_stmt 1 view .LVU41
 222              		.loc 1 234 14 is_stmt 0 view .LVU42
 223 0004 044A     		ldr	r2, .L18
 224 0006 5368     		ldr	r3, [r2, #4]
 225 0008 1843     		orrs	r0, r3
 226              	.LVL9:
 227              		.loc 1 234 14 view .LVU43
ARM GAS  /tmp/ccaBVS0B.s 			page 9


 228 000a 5060     		str	r0, [r2, #4]
 229              	.L15:
 235:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 236:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   else
 237:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   {
 238:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     /* Disable the EWUPx pin */
 239:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     PWR->CSR &= ~PWR_WakeUpPin;
 240:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 241:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** }
 230              		.loc 1 241 1 view .LVU44
 231              		@ sp needed
 232 000c 7047     		bx	lr
 233              	.LVL10:
 234              	.L16:
 239:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 235              		.loc 1 239 5 is_stmt 1 view .LVU45
 239:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 236              		.loc 1 239 14 is_stmt 0 view .LVU46
 237 000e 024A     		ldr	r2, .L18
 238 0010 5368     		ldr	r3, [r2, #4]
 239 0012 8343     		bics	r3, r0
 240 0014 5360     		str	r3, [r2, #4]
 241              		.loc 1 241 1 view .LVU47
 242 0016 F9E7     		b	.L15
 243              	.L19:
 244              		.align	2
 245              	.L18:
 246 0018 00700040 		.word	1073770496
 247              		.cfi_endproc
 248              	.LFE36:
 250              		.section	.text.PWR_EnterSleepMode,"ax",%progbits
 251              		.align	1
 252              		.global	PWR_EnterSleepMode
 253              		.syntax unified
 254              		.code	16
 255              		.thumb_func
 256              		.fpu softvfp
 258              	PWR_EnterSleepMode:
 259              	.LVL11:
 260              	.LFB37:
 242:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 243:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
 244:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @}
 245:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 246:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 247:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 248:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /** @defgroup PWR_Group4 Low Power modes configuration functions
 249:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****  *  @brief   Low Power modes configuration functions 
 250:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****  *
 251:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** @verbatim
 252:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ==============================================================================
 253:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****               ##### Low Power modes configuration functions #####
 254:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ==============================================================================
 255:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 256:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     [..] The devices feature three low-power modes:
 257:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     (+) Sleep mode: Cortex-M0 core stopped, peripherals kept running.
 258:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     (+) Stop mode: all clocks are stopped, regulator running, regulator in low power mode
ARM GAS  /tmp/ccaBVS0B.s 			page 10


 259:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     (+) Standby mode: VCORE domain powered off
 260:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 261:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *** Sleep mode *** 
 262:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ==================
 263:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   [..] 
 264:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     (+) Entry:
 265:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****         (++) The Sleep mode is entered by executing the WFE() or WFI() instructions.
 266:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     (+) Exit:
 267:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****         (++) Any peripheral interrupt acknowledged by the nested vectored interrupt 
 268:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              controller (NVIC) can wake up the device from Sleep mode.
 269:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 270:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *** Stop mode *** 
 271:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   =================
 272:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   [..] In Stop mode, all clocks in the VCORE domain are stopped, the PLL, the HSI,
 273:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****        the HSI14 and the HSE RC oscillators are disabled. Internal SRAM and register 
 274:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****        contents are preserved.
 275:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****        The voltage regulator can be configured either in normal or low-power mode.
 276:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 277:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     (+) Entry:
 278:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****         (++) The Stop mode is entered using the PWR_EnterSTOPMode(PWR_Regulator_LowPower,) 
 279:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              function with regulator in LowPower or with Regulator ON.
 280:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     (+) Exit:
 281:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****         (++) Any EXTI Line (Internal or External) configured in Interrupt/Event mode
 282:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              or any internal IPs (I2C, UASRT or CEC) wakeup event.
 283:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 284:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *** Standby mode *** 
 285:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ====================
 286:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   [..] The Standby mode allows to achieve the lowest power consumption. It is based 
 287:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****        on the Cortex-M0 deepsleep mode, with the voltage regulator disabled. 
 288:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****        The VCORE domain is consequently powered off. The PLL, the HSI, the HSI14 
 289:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****        oscillator and the HSE oscillator are also switched off. SRAM and register 
 290:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****        contents are lost except for the Backup domain (RTC registers, RTC backup 
 291:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****        registers and Standby circuitry).
 292:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****    
 293:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   [..] The voltage regulator is OFF.
 294:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 295:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     (+) Entry:
 296:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****         (++) The Standby mode is entered using the PWR_EnterSTANDBYMode() function.
 297:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     (+) Exit:
 298:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****         (++) WKUP pin rising edge, RTC alarm (Alarm A and Alarm B), RTC wakeup,
 299:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              tamper event, time-stamp event, external reset in NRST pin, IWDG reset.
 300:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 301:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *** Auto-wakeup (AWU) from low-power mode *** 
 302:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   =============================================
 303:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   [..] The MCU can be woken up from low-power mode by an RTC Alarm event, a tamper 
 304:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****        event, a time-stamp event, or a comparator event, without depending on an 
 305:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****        external interrupt (Auto-wakeup mode).
 306:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 307:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     (+) RTC auto-wakeup (AWU) from the Stop mode
 308:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****         (++) To wake up from the Stop mode with an RTC alarm event, it is necessary to:
 309:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              (+++) Configure the EXTI Line 17 to be sensitive to rising edges (Interrupt 
 310:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                    or Event modes) using the EXTI_Init() function.
 311:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              (+++) Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 312:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              (+++) Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 313:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                    and RTC_AlarmCmd() functions.
 314:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****         (++) To wake up from the Stop mode with an RTC Tamper or time stamp event, it 
 315:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              is necessary to:
ARM GAS  /tmp/ccaBVS0B.s 			page 11


 316:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              (+++) Configure the EXTI Line 19 to be sensitive to rising edges (Interrupt 
 317:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                    or Event modes) using the EXTI_Init() function.
 318:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              (+++) Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 319:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                    function.
 320:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              (+++) Configure the RTC to detect the tamper or time stamp event using the
 321:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                    RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 322:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                    functions.
 323:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 324:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     (+) RTC auto-wakeup (AWU) from the Standby mode
 325:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****         (++) To wake up from the Standby mode with an RTC alarm event, it is necessary to:
 326:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              (+++) Enable the RTC Alarm Interrupt using the RTC_ITConfig() function.
 327:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              (+++) Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 328:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                    and RTC_AlarmCmd() functions.
 329:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****         (++) To wake up from the Standby mode with an RTC Tamper or time stamp event, it 
 330:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              is necessary to:
 331:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              (+++) Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 332:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                    function.
 333:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              (+++) Configure the RTC to detect the tamper or time stamp event using the
 334:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                    RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 335:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                    functions.
 336:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 337:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     (+) Comparator auto-wakeup (AWU) from the Stop mode
 338:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****         (++) To wake up from the Stop mode with an comparator 1 or comparator 2 wakeup
 339:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              event, it is necessary to:
 340:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              (+++) Configure the EXTI Line 21 for comparator 1 or EXTI Line 22 for comparator 2 
 341:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                    to be sensitive to to the selected edges (falling, rising or falling 
 342:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                    and rising) (Interrupt or Event modes) using the EXTI_Init() function.
 343:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              (+++) Configure the comparator to generate the event.
 344:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 345:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** @endverbatim
 346:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @{
 347:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 348:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 349:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
 350:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @brief  Enters Sleep mode.
 351:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @note   In Sleep mode, all I/O pins keep the same state as in Run mode.
 352:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @param  PWR_SLEEPEntry: specifies if SLEEP mode in entered with WFI or WFE instruction.
 353:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         This parameter can be one of the following values:
 354:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_SLEEPEntry_WFI: enter SLEEP mode with WFI instruction
 355:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_SLEEPEntry_WFE: enter SLEEP mode with WFE instruction
 356:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @retval None
 357:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 358:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** void PWR_EnterSleepMode(uint8_t PWR_SLEEPEntry)
 359:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** {
 261              		.loc 1 359 1 is_stmt 1 view -0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 0
 264              		@ frame_needed = 0, uses_anonymous_args = 0
 265              		@ link register save eliminated.
 360:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Check the parameters */
 361:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   assert_param(IS_PWR_SLEEP_ENTRY(PWR_SLEEPEntry));
 266              		.loc 1 361 3 view .LVU49
 362:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 363:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Clear SLEEPDEEP bit of Cortex-M0 System Control Register */
 364:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 267              		.loc 1 364 3 view .LVU50
 268              		.loc 1 364 12 is_stmt 0 view .LVU51
ARM GAS  /tmp/ccaBVS0B.s 			page 12


 269 0000 054A     		ldr	r2, .L24
 270 0002 1369     		ldr	r3, [r2, #16]
 271 0004 0421     		movs	r1, #4
 272 0006 8B43     		bics	r3, r1
 273 0008 1361     		str	r3, [r2, #16]
 365:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   
 366:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Select SLEEP mode entry -------------------------------------------------*/
 367:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   if(PWR_SLEEPEntry == PWR_SLEEPEntry_WFI)
 274              		.loc 1 367 3 is_stmt 1 view .LVU52
 275              		.loc 1 367 5 is_stmt 0 view .LVU53
 276 000a 0128     		cmp	r0, #1
 277 000c 01D0     		beq	.L23
 368:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   {
 369:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     /* Request Wait For Interrupt */
 370:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     __WFI();
 371:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 372:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   else
 373:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   {
 374:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     /* Request Wait For Event */
 375:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     __WFE();
 278              		.loc 1 375 5 is_stmt 1 view .LVU54
 279              	.LBB12:
 280              	.LBI12:
 281              		.file 2 "./Libraries/CMSIS/Include/core_cmInstr.h"
   1:./Libraries/CMSIS/Include/core_cmInstr.h **** /**************************************************************************//**
   2:./Libraries/CMSIS/Include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:./Libraries/CMSIS/Include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:./Libraries/CMSIS/Include/core_cmInstr.h ****  * @version  V2.10
   5:./Libraries/CMSIS/Include/core_cmInstr.h ****  * @date     19. July 2011
   6:./Libraries/CMSIS/Include/core_cmInstr.h ****  *
   7:./Libraries/CMSIS/Include/core_cmInstr.h ****  * @note
   8:./Libraries/CMSIS/Include/core_cmInstr.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:./Libraries/CMSIS/Include/core_cmInstr.h ****  *
  10:./Libraries/CMSIS/Include/core_cmInstr.h ****  * @par
  11:./Libraries/CMSIS/Include/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./Libraries/CMSIS/Include/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./Libraries/CMSIS/Include/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors. 
  14:./Libraries/CMSIS/Include/core_cmInstr.h ****  *
  15:./Libraries/CMSIS/Include/core_cmInstr.h ****  * @par
  16:./Libraries/CMSIS/Include/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./Libraries/CMSIS/Include/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./Libraries/CMSIS/Include/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./Libraries/CMSIS/Include/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./Libraries/CMSIS/Include/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./Libraries/CMSIS/Include/core_cmInstr.h ****  *
  22:./Libraries/CMSIS/Include/core_cmInstr.h ****  ******************************************************************************/
  23:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  24:./Libraries/CMSIS/Include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:./Libraries/CMSIS/Include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  27:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  28:./Libraries/CMSIS/Include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:./Libraries/CMSIS/Include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:./Libraries/CMSIS/Include/core_cmInstr.h ****   Access to dedicated instructions
  31:./Libraries/CMSIS/Include/core_cmInstr.h ****   @{
  32:./Libraries/CMSIS/Include/core_cmInstr.h **** */
  33:./Libraries/CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/ccaBVS0B.s 			page 13


  34:./Libraries/CMSIS/Include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:./Libraries/CMSIS/Include/core_cmInstr.h **** /* ARM armcc specific functions */
  36:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  37:./Libraries/CMSIS/Include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:./Libraries/CMSIS/Include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:./Libraries/CMSIS/Include/core_cmInstr.h **** #endif
  40:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  41:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  42:./Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
  43:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  44:./Libraries/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:./Libraries/CMSIS/Include/core_cmInstr.h ****  */
  46:./Libraries/CMSIS/Include/core_cmInstr.h **** #define __NOP                             __nop
  47:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  48:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  49:./Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  51:./Libraries/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:./Libraries/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
  53:./Libraries/CMSIS/Include/core_cmInstr.h ****  */
  54:./Libraries/CMSIS/Include/core_cmInstr.h **** #define __WFI                             __wfi
  55:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  56:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  57:./Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
  58:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  59:./Libraries/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:./Libraries/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:./Libraries/CMSIS/Include/core_cmInstr.h ****  */
  62:./Libraries/CMSIS/Include/core_cmInstr.h **** #define __WFE                             __wfe
  63:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  64:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  65:./Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
  66:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  67:./Libraries/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:./Libraries/CMSIS/Include/core_cmInstr.h ****  */
  69:./Libraries/CMSIS/Include/core_cmInstr.h **** #define __SEV                             __sev
  70:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  71:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  72:./Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  74:./Libraries/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
  75:./Libraries/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
  76:./Libraries/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:./Libraries/CMSIS/Include/core_cmInstr.h ****  */
  78:./Libraries/CMSIS/Include/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  80:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  81:./Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  83:./Libraries/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
  84:./Libraries/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:./Libraries/CMSIS/Include/core_cmInstr.h ****  */
  86:./Libraries/CMSIS/Include/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  88:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  89:./Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:./Libraries/CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/ccaBVS0B.s 			page 14


  91:./Libraries/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
  92:./Libraries/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:./Libraries/CMSIS/Include/core_cmInstr.h ****  */
  94:./Libraries/CMSIS/Include/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  96:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  97:./Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:./Libraries/CMSIS/Include/core_cmInstr.h **** 
  99:./Libraries/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 101:./Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:./Libraries/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 103:./Libraries/CMSIS/Include/core_cmInstr.h ****  */
 104:./Libraries/CMSIS/Include/core_cmInstr.h **** #define __REV                             __rev
 105:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 106:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 107:./Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 109:./Libraries/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 111:./Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:./Libraries/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 113:./Libraries/CMSIS/Include/core_cmInstr.h ****  */
 114:./Libraries/CMSIS/Include/core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 115:./Libraries/CMSIS/Include/core_cmInstr.h **** {
 116:./Libraries/CMSIS/Include/core_cmInstr.h ****   rev16 r0, r0
 117:./Libraries/CMSIS/Include/core_cmInstr.h ****   bx lr
 118:./Libraries/CMSIS/Include/core_cmInstr.h **** }
 119:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 120:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 121:./Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 123:./Libraries/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 125:./Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:./Libraries/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 127:./Libraries/CMSIS/Include/core_cmInstr.h ****  */
 128:./Libraries/CMSIS/Include/core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 129:./Libraries/CMSIS/Include/core_cmInstr.h **** {
 130:./Libraries/CMSIS/Include/core_cmInstr.h ****   revsh r0, r0
 131:./Libraries/CMSIS/Include/core_cmInstr.h ****   bx lr
 132:./Libraries/CMSIS/Include/core_cmInstr.h **** }
 133:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 134:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 135:./Libraries/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 136:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 137:./Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 138:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 139:./Libraries/CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 140:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 141:./Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 142:./Libraries/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 143:./Libraries/CMSIS/Include/core_cmInstr.h ****  */
 144:./Libraries/CMSIS/Include/core_cmInstr.h **** #define __RBIT                            __rbit
 145:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 146:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 147:./Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
ARM GAS  /tmp/ccaBVS0B.s 			page 15


 148:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 149:./Libraries/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 150:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 151:./Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 152:./Libraries/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 153:./Libraries/CMSIS/Include/core_cmInstr.h ****  */
 154:./Libraries/CMSIS/Include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 155:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 156:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 157:./Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 158:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 159:./Libraries/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 160:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 161:./Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 162:./Libraries/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 163:./Libraries/CMSIS/Include/core_cmInstr.h ****  */
 164:./Libraries/CMSIS/Include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 165:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 166:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 167:./Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 168:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 169:./Libraries/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 170:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 171:./Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 172:./Libraries/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 173:./Libraries/CMSIS/Include/core_cmInstr.h ****  */
 174:./Libraries/CMSIS/Include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 175:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 176:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 177:./Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 178:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 179:./Libraries/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 180:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 181:./Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 182:./Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 183:./Libraries/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 184:./Libraries/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 185:./Libraries/CMSIS/Include/core_cmInstr.h ****  */
 186:./Libraries/CMSIS/Include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 187:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 188:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 189:./Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 190:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 191:./Libraries/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 192:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 193:./Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 194:./Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 195:./Libraries/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 196:./Libraries/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 197:./Libraries/CMSIS/Include/core_cmInstr.h ****  */
 198:./Libraries/CMSIS/Include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 199:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 200:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 201:./Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 202:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 203:./Libraries/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 204:./Libraries/CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/ccaBVS0B.s 			page 16


 205:./Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 206:./Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 207:./Libraries/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 208:./Libraries/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 209:./Libraries/CMSIS/Include/core_cmInstr.h ****  */
 210:./Libraries/CMSIS/Include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 211:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 212:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 213:./Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 214:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 215:./Libraries/CMSIS/Include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 216:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 217:./Libraries/CMSIS/Include/core_cmInstr.h ****  */
 218:./Libraries/CMSIS/Include/core_cmInstr.h **** #define __CLREX                           __clrex
 219:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 220:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 221:./Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Signed Saturate
 222:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 223:./Libraries/CMSIS/Include/core_cmInstr.h ****     This function saturates a signed value.
 224:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 225:./Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 226:./Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 227:./Libraries/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 228:./Libraries/CMSIS/Include/core_cmInstr.h ****  */
 229:./Libraries/CMSIS/Include/core_cmInstr.h **** #define __SSAT                            __ssat
 230:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 231:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 232:./Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 233:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 234:./Libraries/CMSIS/Include/core_cmInstr.h ****     This function saturates an unsigned value.
 235:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 236:./Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:./Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 238:./Libraries/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 239:./Libraries/CMSIS/Include/core_cmInstr.h ****  */
 240:./Libraries/CMSIS/Include/core_cmInstr.h **** #define __USAT                            __usat
 241:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 242:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 243:./Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Count leading zeros
 244:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 245:./Libraries/CMSIS/Include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 246:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 247:./Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 248:./Libraries/CMSIS/Include/core_cmInstr.h ****     \return             number of leading zeros in value
 249:./Libraries/CMSIS/Include/core_cmInstr.h ****  */
 250:./Libraries/CMSIS/Include/core_cmInstr.h **** #define __CLZ                             __clz 
 251:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 252:./Libraries/CMSIS/Include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 253:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 254:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 255:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 256:./Libraries/CMSIS/Include/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 257:./Libraries/CMSIS/Include/core_cmInstr.h **** /* IAR iccarm specific functions */
 258:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 259:./Libraries/CMSIS/Include/core_cmInstr.h **** #include <cmsis_iar.h>
 260:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 261:./Libraries/CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/ccaBVS0B.s 			page 17


 262:./Libraries/CMSIS/Include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 263:./Libraries/CMSIS/Include/core_cmInstr.h **** /* GNU gcc specific functions */
 264:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 265:./Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
 266:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 267:./Libraries/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 268:./Libraries/CMSIS/Include/core_cmInstr.h ****  */
 269:./Libraries/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 270:./Libraries/CMSIS/Include/core_cmInstr.h **** {
 271:./Libraries/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("nop");
 272:./Libraries/CMSIS/Include/core_cmInstr.h **** }
 273:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 274:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 275:./Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 276:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 277:./Libraries/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 278:./Libraries/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
 279:./Libraries/CMSIS/Include/core_cmInstr.h ****  */
 280:./Libraries/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 281:./Libraries/CMSIS/Include/core_cmInstr.h **** {
 282:./Libraries/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfi");
 283:./Libraries/CMSIS/Include/core_cmInstr.h **** }
 284:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 285:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 286:./Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
 287:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 288:./Libraries/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 289:./Libraries/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 290:./Libraries/CMSIS/Include/core_cmInstr.h ****  */
 291:./Libraries/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
 282              		.loc 2 291 57 view .LVU55
 283              	.LBB13:
 292:./Libraries/CMSIS/Include/core_cmInstr.h **** {
 293:./Libraries/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfe");
 284              		.loc 2 293 3 view .LVU56
 285              		.syntax divided
 286              	@ 293 "./Libraries/CMSIS/Include/core_cmInstr.h" 1
 287 000e 20BF     		wfe
 288              	@ 0 "" 2
 289              		.thumb
 290              		.syntax unified
 291              	.L20:
 292              	.LBE13:
 293              	.LBE12:
 376:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 377:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** }
 294              		.loc 1 377 1 is_stmt 0 view .LVU57
 295              		@ sp needed
 296 0010 7047     		bx	lr
 297              	.L23:
 370:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 298              		.loc 1 370 5 is_stmt 1 view .LVU58
 299              	.LBB14:
 300              	.LBI14:
 280:./Libraries/CMSIS/Include/core_cmInstr.h **** {
 301              		.loc 2 280 57 view .LVU59
 302              	.LBB15:
ARM GAS  /tmp/ccaBVS0B.s 			page 18


 282:./Libraries/CMSIS/Include/core_cmInstr.h **** }
 303              		.loc 2 282 3 view .LVU60
 304              		.syntax divided
 305              	@ 282 "./Libraries/CMSIS/Include/core_cmInstr.h" 1
 306 0012 30BF     		wfi
 307              	@ 0 "" 2
 283:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 308              		.loc 2 283 1 is_stmt 0 view .LVU61
 309              		.thumb
 310              		.syntax unified
 311 0014 FCE7     		b	.L20
 312              	.L25:
 313 0016 C046     		.align	2
 314              	.L24:
 315 0018 00ED00E0 		.word	-536810240
 316              	.LBE15:
 317              	.LBE14:
 318              		.cfi_endproc
 319              	.LFE37:
 321              		.section	.text.PWR_EnterSTOPMode,"ax",%progbits
 322              		.align	1
 323              		.global	PWR_EnterSTOPMode
 324              		.syntax unified
 325              		.code	16
 326              		.thumb_func
 327              		.fpu softvfp
 329              	PWR_EnterSTOPMode:
 330              	.LVL12:
 331              	.LFB38:
 378:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 379:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
 380:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @brief  Enters STOP mode.
 381:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @note   In Stop mode, all I/O pins keep the same state as in Run mode.
 382:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @note   When exiting Stop mode by issuing an interrupt or a wakeup event, 
 383:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 384:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @note   When the voltage regulator operates in low power mode, an additional 
 385:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 386:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption 
 387:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         is higher although the startup time is reduced.
 388:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @param  PWR_Regulator: specifies the regulator state in STOP mode.
 389:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         This parameter can be one of the following values:
 390:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_Regulator_ON: STOP mode with regulator ON
 391:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_Regulator_LowPower: STOP mode with regulator in low power mode
 392:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
 393:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         This parameter can be one of the following values:
 394:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
 395:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
 396:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @retval None
 397:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 398:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
 399:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** {
 332              		.loc 1 399 1 is_stmt 1 view -0
 333              		.cfi_startproc
 334              		@ args = 0, pretend = 0, frame = 0
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336              		.loc 1 399 1 is_stmt 0 view .LVU63
 337 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccaBVS0B.s 			page 19


 338              	.LCFI1:
 339              		.cfi_def_cfa_offset 8
 340              		.cfi_offset 4, -8
 341              		.cfi_offset 14, -4
 400:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   uint32_t tmpreg = 0;
 342              		.loc 1 400 3 is_stmt 1 view .LVU64
 343              	.LVL13:
 401:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 402:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Check the parameters */
 403:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   assert_param(IS_PWR_REGULATOR(PWR_Regulator));
 344              		.loc 1 403 3 view .LVU65
 404:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
 345              		.loc 1 404 3 view .LVU66
 405:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 406:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 407:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   tmpreg = PWR->CR;
 346              		.loc 1 407 3 view .LVU67
 347              		.loc 1 407 10 is_stmt 0 view .LVU68
 348 0002 0B4A     		ldr	r2, .L30
 349 0004 1368     		ldr	r3, [r2]
 350              	.LVL14:
 408:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Clear PDDS and LPDSR bits */
 409:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   tmpreg &= CR_DS_MASK;
 351              		.loc 1 409 3 is_stmt 1 view .LVU69
 352              		.loc 1 409 10 is_stmt 0 view .LVU70
 353 0006 0324     		movs	r4, #3
 354 0008 A343     		bics	r3, r4
 355              	.LVL15:
 410:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 411:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Set LPDSR bit according to PWR_Regulator value */
 412:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   tmpreg |= PWR_Regulator;
 356              		.loc 1 412 3 is_stmt 1 view .LVU71
 357              		.loc 1 412 10 is_stmt 0 view .LVU72
 358 000a 0343     		orrs	r3, r0
 359              	.LVL16:
 413:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 414:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Store the new value */
 415:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   PWR->CR = tmpreg;
 360              		.loc 1 415 3 is_stmt 1 view .LVU73
 361              		.loc 1 415 11 is_stmt 0 view .LVU74
 362 000c 1360     		str	r3, [r2]
 416:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 417:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex-M0 System Control Register */
 418:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 363              		.loc 1 418 3 is_stmt 1 view .LVU75
 364              		.loc 1 418 12 is_stmt 0 view .LVU76
 365 000e 094A     		ldr	r2, .L30+4
 366 0010 1369     		ldr	r3, [r2, #16]
 367              	.LVL17:
 368              		.loc 1 418 12 view .LVU77
 369 0012 0420     		movs	r0, #4
 370              	.LVL18:
 371              		.loc 1 418 12 view .LVU78
 372 0014 0343     		orrs	r3, r0
 373 0016 1361     		str	r3, [r2, #16]
 374              	.LVL19:
 419:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
ARM GAS  /tmp/ccaBVS0B.s 			page 20


 420:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 421:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 375              		.loc 1 421 3 is_stmt 1 view .LVU79
 376              		.loc 1 421 5 is_stmt 0 view .LVU80
 377 0018 0129     		cmp	r1, #1
 378 001a 06D0     		beq	.L29
 422:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   {
 423:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     /* Request Wait For Interrupt */
 424:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     __WFI();
 425:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 426:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   else
 427:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   {
 428:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     /* Request Wait For Event */
 429:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     __WFE();
 379              		.loc 1 429 5 is_stmt 1 view .LVU81
 380              	.LBB16:
 381              	.LBI16:
 291:./Libraries/CMSIS/Include/core_cmInstr.h **** {
 382              		.loc 2 291 57 view .LVU82
 383              	.LBB17:
 384              		.loc 2 293 3 view .LVU83
 385              		.syntax divided
 386              	@ 293 "./Libraries/CMSIS/Include/core_cmInstr.h" 1
 387 001c 20BF     		wfe
 388              	@ 0 "" 2
 389              		.thumb
 390              		.syntax unified
 391              	.L28:
 392              	.LBE17:
 393              	.LBE16:
 430:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 431:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 432:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 394              		.loc 1 432 3 view .LVU84
 395              		.loc 1 432 12 is_stmt 0 view .LVU85
 396 001e 054A     		ldr	r2, .L30+4
 397 0020 1369     		ldr	r3, [r2, #16]
 398 0022 0421     		movs	r1, #4
 399              	.LVL20:
 400              		.loc 1 432 12 view .LVU86
 401 0024 8B43     		bics	r3, r1
 402 0026 1361     		str	r3, [r2, #16]
 433:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** }
 403              		.loc 1 433 1 view .LVU87
 404              		@ sp needed
 405              		.loc 1 433 1 view .LVU88
 406 0028 10BD     		pop	{r4, pc}
 407              	.LVL21:
 408              	.L29:
 424:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 409              		.loc 1 424 5 is_stmt 1 view .LVU89
 410              	.LBB18:
 411              	.LBI18:
 280:./Libraries/CMSIS/Include/core_cmInstr.h **** {
 412              		.loc 2 280 57 view .LVU90
 413              	.LBB19:
 282:./Libraries/CMSIS/Include/core_cmInstr.h **** }
ARM GAS  /tmp/ccaBVS0B.s 			page 21


 414              		.loc 2 282 3 view .LVU91
 415              		.syntax divided
 416              	@ 282 "./Libraries/CMSIS/Include/core_cmInstr.h" 1
 417 002a 30BF     		wfi
 418              	@ 0 "" 2
 283:./Libraries/CMSIS/Include/core_cmInstr.h **** 
 419              		.loc 2 283 1 is_stmt 0 view .LVU92
 420              		.thumb
 421              		.syntax unified
 422 002c F7E7     		b	.L28
 423              	.L31:
 424 002e C046     		.align	2
 425              	.L30:
 426 0030 00700040 		.word	1073770496
 427 0034 00ED00E0 		.word	-536810240
 428              	.LBE19:
 429              	.LBE18:
 430              		.cfi_endproc
 431              	.LFE38:
 433              		.section	.text.PWR_EnterSTANDBYMode,"ax",%progbits
 434              		.align	1
 435              		.global	PWR_EnterSTANDBYMode
 436              		.syntax unified
 437              		.code	16
 438              		.thumb_func
 439              		.fpu softvfp
 441              	PWR_EnterSTANDBYMode:
 442              	.LFB39:
 434:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 435:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
 436:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @brief  Enters STANDBY mode.
 437:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @note   In Standby mode, all I/O pins are high impedance except for:
 438:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         Reset pad (still available) 
 439:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         RTC_AF1 pin (PC13) if configured for Wakeup pin 2 (WKUP2), tamper, 
 440:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         time-stamp, RTC Alarm out, or RTC clock calibration out.
 441:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         WKUP pin 1 (PA0) if enabled.
 442:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @param  None
 443:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @retval None
 444:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 445:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** void PWR_EnterSTANDBYMode(void)
 446:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** {
 443              		.loc 1 446 1 is_stmt 1 view -0
 444              		.cfi_startproc
 445              		@ args = 0, pretend = 0, frame = 0
 446              		@ frame_needed = 0, uses_anonymous_args = 0
 447              		@ link register save eliminated.
 447:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Clear Wakeup flag */
 448:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   PWR->CR |= PWR_CR_CWUF;
 448              		.loc 1 448 3 view .LVU94
 449              		.loc 1 448 11 is_stmt 0 view .LVU95
 450 0000 074B     		ldr	r3, .L33
 451 0002 1A68     		ldr	r2, [r3]
 452 0004 0421     		movs	r1, #4
 453 0006 0A43     		orrs	r2, r1
 454 0008 1A60     		str	r2, [r3]
 449:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 450:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Select STANDBY mode */
ARM GAS  /tmp/ccaBVS0B.s 			page 22


 451:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   PWR->CR |= PWR_CR_PDDS;
 455              		.loc 1 451 3 is_stmt 1 view .LVU96
 456              		.loc 1 451 11 is_stmt 0 view .LVU97
 457 000a 1A68     		ldr	r2, [r3]
 458 000c 0220     		movs	r0, #2
 459 000e 0243     		orrs	r2, r0
 460 0010 1A60     		str	r2, [r3]
 452:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 453:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex-M0 System Control Register */
 454:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 461              		.loc 1 454 3 is_stmt 1 view .LVU98
 462              		.loc 1 454 12 is_stmt 0 view .LVU99
 463 0012 044A     		ldr	r2, .L33+4
 464 0014 1369     		ldr	r3, [r2, #16]
 465 0016 0B43     		orrs	r3, r1
 466 0018 1361     		str	r3, [r2, #16]
 455:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 456:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Request Wait For Interrupt */
 457:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   __WFI();
 467              		.loc 1 457 3 is_stmt 1 view .LVU100
 468              	.LBB20:
 469              	.LBI20:
 280:./Libraries/CMSIS/Include/core_cmInstr.h **** {
 470              		.loc 2 280 57 view .LVU101
 471              	.LBB21:
 282:./Libraries/CMSIS/Include/core_cmInstr.h **** }
 472              		.loc 2 282 3 view .LVU102
 473              		.syntax divided
 474              	@ 282 "./Libraries/CMSIS/Include/core_cmInstr.h" 1
 475 001a 30BF     		wfi
 476              	@ 0 "" 2
 477              		.thumb
 478              		.syntax unified
 479              	.LBE21:
 480              	.LBE20:
 458:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** }
 481              		.loc 1 458 1 is_stmt 0 view .LVU103
 482              		@ sp needed
 483 001c 7047     		bx	lr
 484              	.L34:
 485 001e C046     		.align	2
 486              	.L33:
 487 0020 00700040 		.word	1073770496
 488 0024 00ED00E0 		.word	-536810240
 489              		.cfi_endproc
 490              	.LFE39:
 492              		.section	.text.PWR_GetFlagStatus,"ax",%progbits
 493              		.align	1
 494              		.global	PWR_GetFlagStatus
 495              		.syntax unified
 496              		.code	16
 497              		.thumb_func
 498              		.fpu softvfp
 500              	PWR_GetFlagStatus:
 501              	.LVL22:
 502              	.LFB40:
 459:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
ARM GAS  /tmp/ccaBVS0B.s 			page 23


 460:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
 461:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @}
 462:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 463:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 464:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /** @defgroup PWR_Group5 Flags management functions
 465:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****  *  @brief   Flags management functions 
 466:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****  *
 467:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** @verbatim
 468:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ==============================================================================
 469:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                        ##### Flags management functions #####
 470:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ==============================================================================
 471:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 472:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** @endverbatim
 473:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @{
 474:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 475:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 476:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
 477:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @brief  Checks whether the specified PWR flag is set or not.
 478:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to check.
 479:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         This parameter can be one of the following values:
 480:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_FLAG_WU: Wake Up flag. This flag indicates that a wakeup
 481:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *                  event was received from the WKUP pin or from the RTC alarm 
 482:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *                  (Alarm A or Alarm B), RTC Tamper event or RTC TimeStamp event.
 483:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_FLAG_SB: StandBy flag. This flag indicates that the 
 484:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *                  system was resumed from StandBy mode.
 485:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_FLAG_PVDO: PVD Output. This flag is valid only if PVD 
 486:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *                  is enabled by the PWR_PVDCmd() function.
 487:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_FLAG_VREFINTRDY: Internal Voltage Reference Ready flag. 
 488:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *                  This flag indicates the state of the internal voltage 
 489:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *                  reference, VREFINT.
 490:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @retval The new state of PWR_FLAG (SET or RESET).
 491:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 492:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
 493:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** {
 503              		.loc 1 493 1 is_stmt 1 view -0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507              		@ link register save eliminated.
 494:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   FlagStatus bitstatus = RESET;
 508              		.loc 1 494 3 view .LVU105
 495:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Check the parameters */
 496:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
 509              		.loc 1 496 3 view .LVU106
 497:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 498:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 510              		.loc 1 498 3 view .LVU107
 511              		.loc 1 498 11 is_stmt 0 view .LVU108
 512 0000 034B     		ldr	r3, .L38
 513 0002 5B68     		ldr	r3, [r3, #4]
 514              		.loc 1 498 6 view .LVU109
 515 0004 1842     		tst	r0, r3
 516 0006 01D0     		beq	.L37
 499:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   {
 500:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     bitstatus = SET;
 517              		.loc 1 500 15 view .LVU110
 518 0008 0120     		movs	r0, #1
ARM GAS  /tmp/ccaBVS0B.s 			page 24


 519              	.LVL23:
 520              	.L36:
 501:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 502:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   else
 503:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   {
 504:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     bitstatus = RESET;
 505:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 506:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Return the flag status */
 507:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   return bitstatus;
 521              		.loc 1 507 3 is_stmt 1 view .LVU111
 508:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** }
 522              		.loc 1 508 1 is_stmt 0 view .LVU112
 523              		@ sp needed
 524 000a 7047     		bx	lr
 525              	.LVL24:
 526              	.L37:
 504:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 527              		.loc 1 504 15 view .LVU113
 528 000c 0020     		movs	r0, #0
 529              	.LVL25:
 504:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 530              		.loc 1 504 15 view .LVU114
 531 000e FCE7     		b	.L36
 532              	.L39:
 533              		.align	2
 534              	.L38:
 535 0010 00700040 		.word	1073770496
 536              		.cfi_endproc
 537              	.LFE40:
 539              		.section	.text.PWR_ClearFlag,"ax",%progbits
 540              		.align	1
 541              		.global	PWR_ClearFlag
 542              		.syntax unified
 543              		.code	16
 544              		.thumb_func
 545              		.fpu softvfp
 547              	PWR_ClearFlag:
 548              	.LVL26:
 549              	.LFB41:
 509:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 510:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
 511:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @brief  Clears the PWR's pending flags.
 512:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to clear.
 513:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         This parameter can be one of the following values:
 514:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_FLAG_WU: Wake Up flag
 515:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_FLAG_SB: StandBy flag
 516:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @retval None
 517:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 518:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** void PWR_ClearFlag(uint32_t PWR_FLAG)
 519:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** {
 550              		.loc 1 519 1 is_stmt 1 view -0
 551              		.cfi_startproc
 552              		@ args = 0, pretend = 0, frame = 0
 553              		@ frame_needed = 0, uses_anonymous_args = 0
 554              		@ link register save eliminated.
 520:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Check the parameters */
 521:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
ARM GAS  /tmp/ccaBVS0B.s 			page 25


 555              		.loc 1 521 3 view .LVU116
 522:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 523:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   PWR->CR |=  PWR_FLAG << 2;
 556              		.loc 1 523 3 view .LVU117
 557              		.loc 1 523 11 is_stmt 0 view .LVU118
 558 0000 024A     		ldr	r2, .L41
 559 0002 1368     		ldr	r3, [r2]
 560              		.loc 1 523 24 view .LVU119
 561 0004 8000     		lsls	r0, r0, #2
 562              	.LVL27:
 563              		.loc 1 523 11 view .LVU120
 564 0006 0343     		orrs	r3, r0
 565 0008 1360     		str	r3, [r2]
 524:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** }
 566              		.loc 1 524 1 view .LVU121
 567              		@ sp needed
 568 000a 7047     		bx	lr
 569              	.L42:
 570              		.align	2
 571              	.L41:
 572 000c 00700040 		.word	1073770496
 573              		.cfi_endproc
 574              	.LFE41:
 576              		.text
 577              	.Letext0:
 578              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 579              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 580              		.file 5 "./Libraries/CMSIS/Include/core_cm0.h"
 581              		.file 6 "./Libraries/CMSIS/ST/STM32F0xx/Include/stm32f0xx.h"
 582              		.file 7 "./Libraries/CMSIS/ST/STM32F0xx/Include/system_stm32f0xx.h"
 583              		.file 8 "./Libraries/STM32F0xx_StdPeriph_Driver/inc/stm32f0xx_rcc.h"
ARM GAS  /tmp/ccaBVS0B.s 			page 26


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f0xx_pwr.c
     /tmp/ccaBVS0B.s:16     .text.PWR_DeInit:0000000000000000 $t
     /tmp/ccaBVS0B.s:24     .text.PWR_DeInit:0000000000000000 PWR_DeInit
     /tmp/ccaBVS0B.s:55     .text.PWR_BackupAccessCmd:0000000000000000 $t
     /tmp/ccaBVS0B.s:62     .text.PWR_BackupAccessCmd:0000000000000000 PWR_BackupAccessCmd
     /tmp/ccaBVS0B.s:100    .text.PWR_BackupAccessCmd:0000000000000020 $d
     /tmp/ccaBVS0B.s:106    .text.PWR_PVDLevelConfig:0000000000000000 $t
     /tmp/ccaBVS0B.s:113    .text.PWR_PVDLevelConfig:0000000000000000 PWR_PVDLevelConfig
     /tmp/ccaBVS0B.s:146    .text.PWR_PVDLevelConfig:0000000000000010 $d
     /tmp/ccaBVS0B.s:151    .text.PWR_PVDCmd:0000000000000000 $t
     /tmp/ccaBVS0B.s:158    .text.PWR_PVDCmd:0000000000000000 PWR_PVDCmd
     /tmp/ccaBVS0B.s:195    .text.PWR_PVDCmd:000000000000001c $d
     /tmp/ccaBVS0B.s:200    .text.PWR_WakeUpPinCmd:0000000000000000 $t
     /tmp/ccaBVS0B.s:207    .text.PWR_WakeUpPinCmd:0000000000000000 PWR_WakeUpPinCmd
     /tmp/ccaBVS0B.s:246    .text.PWR_WakeUpPinCmd:0000000000000018 $d
     /tmp/ccaBVS0B.s:251    .text.PWR_EnterSleepMode:0000000000000000 $t
     /tmp/ccaBVS0B.s:258    .text.PWR_EnterSleepMode:0000000000000000 PWR_EnterSleepMode
     /tmp/ccaBVS0B.s:315    .text.PWR_EnterSleepMode:0000000000000018 $d
     /tmp/ccaBVS0B.s:322    .text.PWR_EnterSTOPMode:0000000000000000 $t
     /tmp/ccaBVS0B.s:329    .text.PWR_EnterSTOPMode:0000000000000000 PWR_EnterSTOPMode
     /tmp/ccaBVS0B.s:426    .text.PWR_EnterSTOPMode:0000000000000030 $d
     /tmp/ccaBVS0B.s:434    .text.PWR_EnterSTANDBYMode:0000000000000000 $t
     /tmp/ccaBVS0B.s:441    .text.PWR_EnterSTANDBYMode:0000000000000000 PWR_EnterSTANDBYMode
     /tmp/ccaBVS0B.s:487    .text.PWR_EnterSTANDBYMode:0000000000000020 $d
     /tmp/ccaBVS0B.s:493    .text.PWR_GetFlagStatus:0000000000000000 $t
     /tmp/ccaBVS0B.s:500    .text.PWR_GetFlagStatus:0000000000000000 PWR_GetFlagStatus
     /tmp/ccaBVS0B.s:535    .text.PWR_GetFlagStatus:0000000000000010 $d
     /tmp/ccaBVS0B.s:540    .text.PWR_ClearFlag:0000000000000000 $t
     /tmp/ccaBVS0B.s:547    .text.PWR_ClearFlag:0000000000000000 PWR_ClearFlag
     /tmp/ccaBVS0B.s:572    .text.PWR_ClearFlag:000000000000000c $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
