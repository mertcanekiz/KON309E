ARM GAS  /tmp/ccEZPSp0.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f0xx_usart.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.USART_DeInit,"ax",%progbits
  16              		.align	1
  17              		.global	USART_DeInit
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	USART_DeInit:
  25              	.LVL0:
  26              	.LFB32:
  27              		.file 1 "Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c"
   1:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
   2:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   ******************************************************************************
   3:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @file    stm32f0xx_usart.c
   4:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @author  MCD Application Team
   5:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @version V1.0.0
   6:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @date    23-March-2012
   7:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief   This file provides firmware functions to manage the following 
   8:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          functionalities of the Universal synchronous asynchronous receiver
   9:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          transmitter (USART):
  10:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + Initialization and Configuration
  11:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + STOP Mode
  12:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + AutoBaudRate
  13:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + Data transfers
  14:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + Multi-Processor Communication
  15:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + LIN mode
  16:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + Half-duplex mode
  17:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + Smartcard mode
  18:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + IrDA mode
  19:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + RS485 mode  
  20:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + DMA transfers management
  21:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + Interrupts and flags management
  22:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           
  23:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *  @verbatim
  24:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
  25:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                        ##### How to use this driver #####
  26:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
  27:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..]
  28:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) Enable peripheral clock using RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE)
  29:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             function for USART1 or using RCC_APB1PeriphClockCmd(RCC_APB1Periph_USARTx, ENABLE)
  30:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             function for USART2 and USART3.
  31:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) According to the USART mode, enable the GPIO clocks using 
ARM GAS  /tmp/ccEZPSp0.s 			page 2


  32:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             RCC_AHBPeriphClockCmd() function. (The I/O can be TX, RX, CTS, 
  33:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             or and SCLK). 
  34:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) Peripheral's alternate function: 
  35:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) Connect the pin to the desired peripherals' Alternate 
  36:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                  Function (AF) using GPIO_PinAFConfig() function.
  37:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) Configure the desired pin in alternate function by:
  38:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF.
  39:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) Select the type, pull-up/pull-down and output speed via 
  40:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                  GPIO_PuPd, GPIO_OType and GPIO_Speed members.
  41:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) Call GPIO_Init() function.        
  42:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware 
  43:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             flow control and Mode(Receiver/Transmitter) using the SPI_Init()
  44:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             function.  
  45:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) For synchronous mode, enable the clock and program the polarity,
  46:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             phase and last bit using the USART_ClockInit() function.  
  47:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) Enable the NVIC and the corresponding interrupt using the function 
  48:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             USART_ITConfig() if you need to use interrupt mode.   
  49:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) When using the DMA mode: 
  50:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) Configure the DMA using DMA_Init() function.
  51:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) Active the needed channel Request using USART_DMACmd() function.   
  52:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) Enable the USART using the USART_Cmd() function.   
  53:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) Enable the DMA using the DMA_Cmd() function, when using DMA mode.   
  54:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..]
  55:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             Refer to Multi-Processor, LIN, half-duplex, Smartcard, IrDA sub-sections
  56:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             for more details.
  57:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             
  58:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
  59:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        
  60:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   ******************************************************************************
  61:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @attention
  62:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *
  63:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  64:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *
  65:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  66:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * You may not use this file except in compliance with the License.
  67:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * You may obtain a copy of the License at:
  68:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *
  69:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  70:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *
  71:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * Unless required by applicable law or agreed to in writing, software 
  72:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  73:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  74:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * See the License for the specific language governing permissions and
  75:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * limitations under the License.
  76:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *
  77:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   ******************************************************************************
  78:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
  79:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
  80:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Includes ------------------------------------------------------------------*/
  81:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** #include "stm32f0xx_usart.h"
  82:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** #include "stm32f0xx_rcc.h"
  83:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
  84:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
  85:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
  86:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
  87:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
  88:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART 
ARM GAS  /tmp/ccEZPSp0.s 			page 3


  89:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief USART driver modules
  90:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
  91:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
  92:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
  93:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Private typedef -----------------------------------------------------------*/
  94:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Private define ------------------------------------------------------------*/
  95:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
  96:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*!< USART CR1 register clear Mask ((~(uint32_t)0xFFFFE6F3)) */
  97:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** #define CR1_CLEAR_MASK            ((uint32_t)(USART_CR1_M | USART_CR1_PCE | \
  98:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                                               USART_CR1_PS | USART_CR1_TE | \
  99:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                                               USART_CR1_RE))
 100:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 101:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*!< USART CR2 register clock bits clear Mask ((~(uint32_t)0xFFFFF0FF)) */
 102:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** #define CR2_CLOCK_CLEAR_MASK      ((uint32_t)(USART_CR2_CLKEN | USART_CR2_CPOL | \
 103:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                                               USART_CR2_CPHA | USART_CR2_LBCL))
 104:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 105:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*!< USART CR3 register clear Mask ((~(uint32_t)0xFFFFFCFF)) */
 106:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** #define CR3_CLEAR_MASK            ((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE))
 107:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 108:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*!< USART Interrupts mask */
 109:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** #define IT_MASK                   ((uint32_t)0x000000FF)
 110:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 111:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Private macro -------------------------------------------------------------*/
 112:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Private variables ---------------------------------------------------------*/
 113:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Private function prototypes -----------------------------------------------*/
 114:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Private functions ---------------------------------------------------------*/
 115:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 116:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Private_Functions
 117:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
 118:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 119:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 120:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group1 Initialization and Configuration functions
 121:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   Initialization and Configuration functions 
 122:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
 123:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
 124:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 125:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           ##### Initialization and Configuration functions #####
 126:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 127:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..]
 128:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         This subsection provides a set of functions allowing to initialize the USART 
 129:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         in asynchronous and in synchronous modes.
 130:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (+) For the asynchronous mode only these parameters can be configured: 
 131:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           (++) Baud Rate.
 132:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           (++) Word Length.
 133:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           (++) Stop Bit.
 134:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           (++) Parity: If the parity is enabled, then the MSB bit of the data written
 135:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                in the data register is transmitted but is changed by the parity bit.
 136:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                Depending on the frame length defined by the M bit (8-bits or 9-bits),
 137:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                the possible USART frame formats are as listed in the following table:
 138:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 139:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    +-------------------------------------------------------------+     
 140:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |   M bit |  PCE bit  |            USART frame                |
 141:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |---------------------|---------------------------------------|             
 142:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |    0    |    0      |    | SB | 8 bit data | STB |          |
 143:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |---------|-----------|---------------------------------------|  
 144:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 145:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |---------|-----------|---------------------------------------|  
ARM GAS  /tmp/ccEZPSp0.s 			page 4


 146:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |    1    |    0      |    | SB | 9 bit data | STB |          |
 147:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |---------|-----------|---------------------------------------|  
 148:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 149:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    +-------------------------------------------------------------+            
 150:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 151:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           (++) Hardware flow control.
 152:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           (++) Receiver/transmitter modes.
 153:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The USART_Init() function follows the USART  asynchronous configuration 
 154:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          procedure(details for the procedure are available in reference manual.
 155:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (+) For the synchronous mode in addition to the asynchronous mode parameters
 156:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             these parameters should be also configured:
 157:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) USART Clock Enabled.
 158:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) USART polarity.
 159:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) USART phase.
 160:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) USART LastBit.
 161:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] These parameters can be configured using the USART_ClockInit() function.
 162:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 163:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
 164:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
 165:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 166:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 167:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 168:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 169:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 170:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 171:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 172:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 173:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
  28              		.loc 1 173 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 173 1 is_stmt 0 view .LVU1
  33 0000 10B5     		push	{r4, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 14, -4
 174:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 175:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
  38              		.loc 1 175 3 is_stmt 1 view .LVU2
 176:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 177:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (USARTx == USART1)
  39              		.loc 1 177 3 view .LVU3
  40              		.loc 1 177 6 is_stmt 0 view .LVU4
  41 0002 0E4B     		ldr	r3, .L6
  42 0004 9842     		cmp	r0, r3
  43 0006 03D0     		beq	.L4
 178:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 179:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 180:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 181:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 182:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else 
 183:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 184:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     if  (USARTx == USART2)
  44              		.loc 1 184 5 is_stmt 1 view .LVU5
  45              		.loc 1 184 9 is_stmt 0 view .LVU6
ARM GAS  /tmp/ccEZPSp0.s 			page 5


  46 0008 0D4B     		ldr	r3, .L6+4
  47 000a 9842     		cmp	r0, r3
  48 000c 0BD0     		beq	.L5
  49              	.LVL1:
  50              	.L1:
 185:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     {
 186:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 187:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 188:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     }
 189:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 190:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
  51              		.loc 1 190 1 view .LVU7
  52              		@ sp needed
  53 000e 10BD     		pop	{r4, pc}
  54              	.LVL2:
  55              	.L4:
 179:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  56              		.loc 1 179 5 is_stmt 1 view .LVU8
  57 0010 8024     		movs	r4, #128
  58 0012 E401     		lsls	r4, r4, #7
  59 0014 0121     		movs	r1, #1
  60 0016 2000     		movs	r0, r4
  61              	.LVL3:
 179:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  62              		.loc 1 179 5 is_stmt 0 view .LVU9
  63 0018 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  64              	.LVL4:
 180:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
  65              		.loc 1 180 5 is_stmt 1 view .LVU10
  66 001c 0021     		movs	r1, #0
  67 001e 2000     		movs	r0, r4
  68 0020 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  69              	.LVL5:
  70 0024 F3E7     		b	.L1
  71              	.LVL6:
  72              	.L5:
 186:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  73              		.loc 1 186 7 view .LVU11
  74 0026 8024     		movs	r4, #128
  75 0028 A402     		lsls	r4, r4, #10
  76 002a 0121     		movs	r1, #1
  77 002c 2000     		movs	r0, r4
  78              	.LVL7:
 186:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  79              		.loc 1 186 7 is_stmt 0 view .LVU12
  80 002e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  81              	.LVL8:
 187:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     }
  82              		.loc 1 187 7 is_stmt 1 view .LVU13
  83 0032 0021     		movs	r1, #0
  84 0034 2000     		movs	r0, r4
  85 0036 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  86              	.LVL9:
  87              		.loc 1 190 1 is_stmt 0 view .LVU14
  88 003a E8E7     		b	.L1
  89              	.L7:
  90              		.align	2
ARM GAS  /tmp/ccEZPSp0.s 			page 6


  91              	.L6:
  92 003c 00380140 		.word	1073821696
  93 0040 00440040 		.word	1073759232
  94              		.cfi_endproc
  95              	.LFE32:
  97              		.global	__aeabi_uidiv
  98              		.section	.text.USART_Init,"ax",%progbits
  99              		.align	1
 100              		.global	USART_Init
 101              		.syntax unified
 102              		.code	16
 103              		.thumb_func
 104              		.fpu softvfp
 106              	USART_Init:
 107              	.LVL10:
 108              	.LFB33:
 191:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 192:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 193:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 194:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   parameters in the USART_InitStruct .
 195:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 196:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
 197:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   that contains the configuration information for the specified USART peripheral.
 198:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 199:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 200:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 201:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 109              		.loc 1 201 1 is_stmt 1 view -0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 32
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113              		.loc 1 201 1 is_stmt 0 view .LVU16
 114 0000 70B5     		push	{r4, r5, r6, lr}
 115              	.LCFI1:
 116              		.cfi_def_cfa_offset 16
 117              		.cfi_offset 4, -16
 118              		.cfi_offset 5, -12
 119              		.cfi_offset 6, -8
 120              		.cfi_offset 14, -4
 121 0002 88B0     		sub	sp, sp, #32
 122              	.LCFI2:
 123              		.cfi_def_cfa_offset 48
 124 0004 0400     		movs	r4, r0
 125 0006 0D00     		movs	r5, r1
 202:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t tmpreg = 0, apbclock = 0;
 126              		.loc 1 202 3 is_stmt 1 view .LVU17
 127              	.LVL11:
 203:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t integerdivider = 0;
 128              		.loc 1 203 3 view .LVU18
 204:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t fractionaldivider = 0;
 129              		.loc 1 204 3 view .LVU19
 205:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 130              		.loc 1 205 3 view .LVU20
 206:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 207:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 208:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 131              		.loc 1 208 3 view .LVU21
ARM GAS  /tmp/ccEZPSp0.s 			page 7


 209:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 132              		.loc 1 209 3 view .LVU22
 210:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 133              		.loc 1 210 3 view .LVU23
 211:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 134              		.loc 1 211 3 view .LVU24
 212:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 135              		.loc 1 212 3 view .LVU25
 213:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 136              		.loc 1 213 3 view .LVU26
 214:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 137              		.loc 1 214 3 view .LVU27
 215:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 216:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Disable USART */
 217:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 138              		.loc 1 217 3 view .LVU28
 139              		.loc 1 217 15 is_stmt 0 view .LVU29
 140 0008 0368     		ldr	r3, [r0]
 141 000a 0122     		movs	r2, #1
 142 000c 9343     		bics	r3, r2
 143 000e 0360     		str	r3, [r0]
 218:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 219:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 220:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg = USARTx->CR2;
 144              		.loc 1 220 3 is_stmt 1 view .LVU30
 145              		.loc 1 220 10 is_stmt 0 view .LVU31
 146 0010 4368     		ldr	r3, [r0, #4]
 147              	.LVL12:
 221:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear STOP[13:12] bits */
 222:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 148              		.loc 1 222 3 is_stmt 1 view .LVU32
 149              		.loc 1 222 10 is_stmt 0 view .LVU33
 150 0012 2B4A     		ldr	r2, .L16
 151 0014 1340     		ands	r3, r2
 152              	.LVL13:
 223:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 224:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
 225:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set STOP[13:12] bits according to USART_StopBits value */
 226:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 153              		.loc 1 226 3 is_stmt 1 view .LVU34
 154              		.loc 1 226 10 is_stmt 0 view .LVU35
 155 0016 8A68     		ldr	r2, [r1, #8]
 156 0018 1343     		orrs	r3, r2
 157              	.LVL14:
 227:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 228:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Write to USART CR2 */
 229:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 = tmpreg;
 158              		.loc 1 229 3 is_stmt 1 view .LVU36
 159              		.loc 1 229 15 is_stmt 0 view .LVU37
 160 001a 4360     		str	r3, [r0, #4]
 230:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 231:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*---------------------------- USART CR1 Configuration -----------------------*/
 232:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg = USARTx->CR1;
 161              		.loc 1 232 3 is_stmt 1 view .LVU38
 162              		.loc 1 232 10 is_stmt 0 view .LVU39
 163 001c 0368     		ldr	r3, [r0]
 164              	.LVL15:
ARM GAS  /tmp/ccEZPSp0.s 			page 8


 233:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 234:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 165              		.loc 1 234 3 is_stmt 1 view .LVU40
 166              		.loc 1 234 10 is_stmt 0 view .LVU41
 167 001e 294A     		ldr	r2, .L16+4
 168 0020 1A40     		ands	r2, r3
 169              	.LVL16:
 235:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 236:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Configure the USART Word Length, Parity and mode ----------------------- */
 237:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the M bits according to USART_WordLength value */
 238:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set PCE and PS bits according to USART_Parity value */
 239:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set TE and RE bits according to USART_Mode value */
 240:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 170              		.loc 1 240 3 is_stmt 1 view .LVU42
 171              		.loc 1 240 58 is_stmt 0 view .LVU43
 172 0022 4B68     		ldr	r3, [r1, #4]
 173 0024 C968     		ldr	r1, [r1, #12]
 174              	.LVL17:
 175              		.loc 1 240 58 view .LVU44
 176 0026 0B43     		orrs	r3, r1
 177              		.loc 1 240 91 view .LVU45
 178 0028 2969     		ldr	r1, [r5, #16]
 179 002a 0B43     		orrs	r3, r1
 180              		.loc 1 240 10 view .LVU46
 181 002c 1343     		orrs	r3, r2
 182              	.LVL18:
 241:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             USART_InitStruct->USART_Mode;
 242:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 243:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Write to USART CR1 */
 244:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 = tmpreg;
 183              		.loc 1 244 3 is_stmt 1 view .LVU47
 184              		.loc 1 244 15 is_stmt 0 view .LVU48
 185 002e 0360     		str	r3, [r0]
 245:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 246:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*---------------------------- USART CR3 Configuration -----------------------*/  
 247:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg = USARTx->CR3;
 186              		.loc 1 247 3 is_stmt 1 view .LVU49
 187              		.loc 1 247 10 is_stmt 0 view .LVU50
 188 0030 8368     		ldr	r3, [r0, #8]
 189              	.LVL19:
 248:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear CTSE and RTSE bits */
 249:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 190              		.loc 1 249 3 is_stmt 1 view .LVU51
 191              		.loc 1 249 10 is_stmt 0 view .LVU52
 192 0032 254A     		ldr	r2, .L16+8
 193 0034 1340     		ands	r3, r2
 194              	.LVL20:
 250:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 251:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Configure the USART HFC -------------------------------------------------*/
 252:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 253:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 195              		.loc 1 253 3 is_stmt 1 view .LVU53
 196              		.loc 1 253 10 is_stmt 0 view .LVU54
 197 0036 6A69     		ldr	r2, [r5, #20]
 198 0038 1343     		orrs	r3, r2
 199              	.LVL21:
 254:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
ARM GAS  /tmp/ccEZPSp0.s 			page 9


 255:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Write to USART CR3 */
 256:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 = tmpreg;
 200              		.loc 1 256 3 is_stmt 1 view .LVU55
 201              		.loc 1 256 15 is_stmt 0 view .LVU56
 202 003a 8360     		str	r3, [r0, #8]
 257:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 258:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*---------------------------- USART BRR Configuration -----------------------*/
 259:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Configure the USART Baud Rate -------------------------------------------*/
 260:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 203              		.loc 1 260 3 is_stmt 1 view .LVU57
 204 003c 01A8     		add	r0, sp, #4
 205              	.LVL22:
 206              		.loc 1 260 3 is_stmt 0 view .LVU58
 207 003e FFF7FEFF 		bl	RCC_GetClocksFreq
 208              	.LVL23:
 261:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 262:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (USARTx == USART1)
 209              		.loc 1 262 3 is_stmt 1 view .LVU59
 210              		.loc 1 262 6 is_stmt 0 view .LVU60
 211 0042 224B     		ldr	r3, .L16+12
 212 0044 9C42     		cmp	r4, r3
 213 0046 25D0     		beq	.L15
 263:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 264:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 265:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 266:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 267:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 268:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK_Frequency;
 214              		.loc 1 268 5 is_stmt 1 view .LVU61
 215              		.loc 1 268 14 is_stmt 0 view .LVU62
 216 0048 039B     		ldr	r3, [sp, #12]
 217              	.LVL24:
 218              	.L10:
 269:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 270:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Determine the integer part */
 271:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 219              		.loc 1 271 3 is_stmt 1 view .LVU63
 220              		.loc 1 271 14 is_stmt 0 view .LVU64
 221 004a 2268     		ldr	r2, [r4]
 222              		.loc 1 271 6 view .LVU65
 223 004c 1204     		lsls	r2, r2, #16
 224 004e 23D5     		bpl	.L11
 272:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 273:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Integer part computing in case Oversampling mode is 8 Samples */
 274:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 225              		.loc 1 274 5 is_stmt 1 view .LVU66
 226              		.loc 1 274 27 is_stmt 0 view .LVU67
 227 0050 9800     		lsls	r0, r3, #2
 228 0052 C018     		adds	r0, r0, r3
 229 0054 8300     		lsls	r3, r0, #2
 230              	.LVL25:
 231              		.loc 1 274 27 view .LVU68
 232 0056 C018     		adds	r0, r0, r3
 233              		.loc 1 274 63 view .LVU69
 234 0058 2968     		ldr	r1, [r5]
 235              		.loc 1 274 44 view .LVU70
 236 005a 4900     		lsls	r1, r1, #1
ARM GAS  /tmp/ccEZPSp0.s 			page 10


 237              		.loc 1 274 20 view .LVU71
 238 005c FFF7FEFF 		bl	__aeabi_uidiv
 239              	.LVL26:
 240 0060 0500     		movs	r5, r0
 241              	.LVL27:
 242              	.L12:
 275:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 276:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
 277:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 278:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Integer part computing in case Oversampling mode is 16 Samples */
 279:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 280:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 281:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg = (integerdivider / 100) << 4;
 243              		.loc 1 281 3 is_stmt 1 view .LVU72
 244              		.loc 1 281 28 is_stmt 0 view .LVU73
 245 0062 6421     		movs	r1, #100
 246 0064 2800     		movs	r0, r5
 247              		.loc 1 281 28 view .LVU74
 248 0066 FFF7FEFF 		bl	__aeabi_uidiv
 249              	.LVL28:
 250              		.loc 1 281 10 view .LVU75
 251 006a 0601     		lsls	r6, r0, #4
 252              	.LVL29:
 282:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 283:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Determine the fractional part */
 284:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 253              		.loc 1 284 3 is_stmt 1 view .LVU76
 254              		.loc 1 284 55 is_stmt 0 view .LVU77
 255 006c 3309     		lsrs	r3, r6, #4
 256              		.loc 1 284 45 view .LVU78
 257 006e 6420     		movs	r0, #100
 258 0070 5843     		muls	r0, r3
 259              		.loc 1 284 21 view .LVU79
 260 0072 2D1A     		subs	r5, r5, r0
 261              	.LVL30:
 285:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 286:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Implement the fractional part in the register */
 287:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 262              		.loc 1 287 3 is_stmt 1 view .LVU80
 263              		.loc 1 287 14 is_stmt 0 view .LVU81
 264 0074 2368     		ldr	r3, [r4]
 265              		.loc 1 287 6 view .LVU82
 266 0076 1B04     		lsls	r3, r3, #16
 267 0078 18D5     		bpl	.L13
 288:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 289:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 268              		.loc 1 289 5 is_stmt 1 view .LVU83
 269              		.loc 1 289 37 is_stmt 0 view .LVU84
 270 007a ED00     		lsls	r5, r5, #3
 271              	.LVL31:
 272              		.loc 1 289 42 view .LVU85
 273 007c 2800     		movs	r0, r5
 274 007e 3230     		adds	r0, r0, #50
 275              		.loc 1 289 48 view .LVU86
 276 0080 6421     		movs	r1, #100
 277 0082 FFF7FEFF 		bl	__aeabi_uidiv
 278              	.LVL32:
ARM GAS  /tmp/ccEZPSp0.s 			page 11


 279              		.loc 1 289 56 view .LVU87
 280 0086 0723     		movs	r3, #7
 281 0088 0340     		ands	r3, r0
 282              		.loc 1 289 12 view .LVU88
 283 008a 1E43     		orrs	r6, r3
 284              	.LVL33:
 285              	.L14:
 290:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 291:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
 292:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 293:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 294:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 295:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  
 296:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Write to USART BRR */
 297:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->BRR = (uint16_t)tmpreg;
 286              		.loc 1 297 3 is_stmt 1 view .LVU89
 287              		.loc 1 297 17 is_stmt 0 view .LVU90
 288 008c B6B2     		uxth	r6, r6
 289              	.LVL34:
 290              		.loc 1 297 15 view .LVU91
 291 008e A681     		strh	r6, [r4, #12]
 298:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 292              		.loc 1 298 1 view .LVU92
 293 0090 08B0     		add	sp, sp, #32
 294              		@ sp needed
 295              	.LVL35:
 296              		.loc 1 298 1 view .LVU93
 297 0092 70BD     		pop	{r4, r5, r6, pc}
 298              	.LVL36:
 299              	.L15:
 264:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 300              		.loc 1 264 5 is_stmt 1 view .LVU94
 264:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 301              		.loc 1 264 14 is_stmt 0 view .LVU95
 302 0094 079B     		ldr	r3, [sp, #28]
 303              	.LVL37:
 264:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 304              		.loc 1 264 14 view .LVU96
 305 0096 D8E7     		b	.L10
 306              	.L11:
 279:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 307              		.loc 1 279 5 is_stmt 1 view .LVU97
 279:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 308              		.loc 1 279 27 is_stmt 0 view .LVU98
 309 0098 9800     		lsls	r0, r3, #2
 310 009a C018     		adds	r0, r0, r3
 311 009c 8300     		lsls	r3, r0, #2
 312              	.LVL38:
 279:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 313              		.loc 1 279 27 view .LVU99
 314 009e C018     		adds	r0, r0, r3
 279:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 315              		.loc 1 279 63 view .LVU100
 316 00a0 2968     		ldr	r1, [r5]
 279:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 317              		.loc 1 279 44 view .LVU101
 318 00a2 8900     		lsls	r1, r1, #2
ARM GAS  /tmp/ccEZPSp0.s 			page 12


 279:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 319              		.loc 1 279 20 view .LVU102
 320 00a4 FFF7FEFF 		bl	__aeabi_uidiv
 321              	.LVL39:
 322 00a8 0500     		movs	r5, r0
 323              	.LVL40:
 279:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 324              		.loc 1 279 20 view .LVU103
 325 00aa DAE7     		b	.L12
 326              	.LVL41:
 327              	.L13:
 293:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 328              		.loc 1 293 5 is_stmt 1 view .LVU104
 293:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 329              		.loc 1 293 37 is_stmt 0 view .LVU105
 330 00ac 2D01     		lsls	r5, r5, #4
 331              	.LVL42:
 293:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 332              		.loc 1 293 43 view .LVU106
 333 00ae 2800     		movs	r0, r5
 334 00b0 3230     		adds	r0, r0, #50
 293:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 335              		.loc 1 293 49 view .LVU107
 336 00b2 6421     		movs	r1, #100
 337 00b4 FFF7FEFF 		bl	__aeabi_uidiv
 338              	.LVL43:
 293:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 339              		.loc 1 293 57 view .LVU108
 340 00b8 0F23     		movs	r3, #15
 341 00ba 0340     		ands	r3, r0
 293:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 342              		.loc 1 293 12 view .LVU109
 343 00bc 1E43     		orrs	r6, r3
 344              	.LVL44:
 293:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 345              		.loc 1 293 12 view .LVU110
 346 00be E5E7     		b	.L14
 347              	.L17:
 348              		.align	2
 349              	.L16:
 350 00c0 FFCFFFFF 		.word	-12289
 351 00c4 F3E9FFFF 		.word	-5645
 352 00c8 FFFCFFFF 		.word	-769
 353 00cc 00380140 		.word	1073821696
 354              		.cfi_endproc
 355              	.LFE33:
 357              		.section	.text.USART_StructInit,"ax",%progbits
 358              		.align	1
 359              		.global	USART_StructInit
 360              		.syntax unified
 361              		.code	16
 362              		.thumb_func
 363              		.fpu softvfp
 365              	USART_StructInit:
 366              	.LVL45:
 367              	.LFB34:
 299:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
ARM GAS  /tmp/ccEZPSp0.s 			page 13


 300:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 301:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 302:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
 303:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   which will be initialized.
 304:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 305:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 306:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 307:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 368              		.loc 1 307 1 is_stmt 1 view -0
 369              		.cfi_startproc
 370              		@ args = 0, pretend = 0, frame = 0
 371              		@ frame_needed = 0, uses_anonymous_args = 0
 372              		@ link register save eliminated.
 308:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* USART_InitStruct members default value */
 309:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 373              		.loc 1 309 3 view .LVU112
 374              		.loc 1 309 36 is_stmt 0 view .LVU113
 375 0000 9623     		movs	r3, #150
 376 0002 9B01     		lsls	r3, r3, #6
 377 0004 0360     		str	r3, [r0]
 310:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 378              		.loc 1 310 3 is_stmt 1 view .LVU114
 379              		.loc 1 310 38 is_stmt 0 view .LVU115
 380 0006 0023     		movs	r3, #0
 381 0008 4360     		str	r3, [r0, #4]
 311:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 382              		.loc 1 311 3 is_stmt 1 view .LVU116
 383              		.loc 1 311 36 is_stmt 0 view .LVU117
 384 000a 8360     		str	r3, [r0, #8]
 312:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 385              		.loc 1 312 3 is_stmt 1 view .LVU118
 386              		.loc 1 312 34 is_stmt 0 view .LVU119
 387 000c C360     		str	r3, [r0, #12]
 313:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 388              		.loc 1 313 3 is_stmt 1 view .LVU120
 389              		.loc 1 313 32 is_stmt 0 view .LVU121
 390 000e 0C22     		movs	r2, #12
 391 0010 0261     		str	r2, [r0, #16]
 314:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 392              		.loc 1 314 3 is_stmt 1 view .LVU122
 393              		.loc 1 314 47 is_stmt 0 view .LVU123
 394 0012 4361     		str	r3, [r0, #20]
 315:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 395              		.loc 1 315 1 view .LVU124
 396              		@ sp needed
 397 0014 7047     		bx	lr
 398              		.cfi_endproc
 399              	.LFE34:
 401              		.section	.text.USART_ClockInit,"ax",%progbits
 402              		.align	1
 403              		.global	USART_ClockInit
 404              		.syntax unified
 405              		.code	16
 406              		.thumb_func
 407              		.fpu softvfp
 409              	USART_ClockInit:
 410              	.LVL46:
ARM GAS  /tmp/ccEZPSp0.s 			page 14


 411              	.LFB35:
 316:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 317:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 318:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 319:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   specified parameters in the USART_ClockInitStruct.
 320:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 321:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
 322:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   structure that contains the configuration information for the specified 
 323:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   USART peripheral.  
 324:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 325:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 326:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 327:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 412              		.loc 1 327 1 is_stmt 1 view -0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 0
 415              		@ frame_needed = 0, uses_anonymous_args = 0
 416              		.loc 1 327 1 is_stmt 0 view .LVU126
 417 0000 10B5     		push	{r4, lr}
 418              	.LCFI3:
 419              		.cfi_def_cfa_offset 8
 420              		.cfi_offset 4, -8
 421              		.cfi_offset 14, -4
 328:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t tmpreg = 0;
 422              		.loc 1 328 3 is_stmt 1 view .LVU127
 423              	.LVL47:
 329:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 330:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 424              		.loc 1 330 3 view .LVU128
 331:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 425              		.loc 1 331 3 view .LVU129
 332:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 426              		.loc 1 332 3 view .LVU130
 333:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 427              		.loc 1 333 3 view .LVU131
 334:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 428              		.loc 1 334 3 view .LVU132
 335:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 336:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg = USARTx->CR2;
 429              		.loc 1 336 3 view .LVU133
 430              		.loc 1 336 10 is_stmt 0 view .LVU134
 431 0002 4368     		ldr	r3, [r0, #4]
 432              	.LVL48:
 337:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
 338:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 433              		.loc 1 338 3 is_stmt 1 view .LVU135
 434              		.loc 1 338 10 is_stmt 0 view .LVU136
 435 0004 054A     		ldr	r2, .L20
 436 0006 1A40     		ands	r2, r3
 437              	.LVL49:
 339:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
 340:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 341:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 342:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 343:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 344:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 438              		.loc 1 344 3 is_stmt 1 view .LVU137
ARM GAS  /tmp/ccEZPSp0.s 			page 15


 439              		.loc 1 344 59 is_stmt 0 view .LVU138
 440 0008 0B68     		ldr	r3, [r1]
 441 000a 4C68     		ldr	r4, [r1, #4]
 442 000c 2343     		orrs	r3, r4
 443              		.loc 1 344 95 view .LVU139
 444 000e 8C68     		ldr	r4, [r1, #8]
 445 0010 2343     		orrs	r3, r4
 345:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                        USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 446              		.loc 1 345 81 view .LVU140
 447 0012 C968     		ldr	r1, [r1, #12]
 448              	.LVL50:
 449              		.loc 1 345 58 view .LVU141
 450 0014 0B43     		orrs	r3, r1
 344:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                        USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 451              		.loc 1 344 10 view .LVU142
 452 0016 1343     		orrs	r3, r2
 453              	.LVL51:
 346:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Write to USART CR2 */
 347:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 = tmpreg;
 454              		.loc 1 347 3 is_stmt 1 view .LVU143
 455              		.loc 1 347 15 is_stmt 0 view .LVU144
 456 0018 4360     		str	r3, [r0, #4]
 348:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 457              		.loc 1 348 1 view .LVU145
 458              		@ sp needed
 459 001a 10BD     		pop	{r4, pc}
 460              	.L21:
 461              		.align	2
 462              	.L20:
 463 001c FFF0FFFF 		.word	-3841
 464              		.cfi_endproc
 465              	.LFE35:
 467              		.section	.text.USART_ClockStructInit,"ax",%progbits
 468              		.align	1
 469              		.global	USART_ClockStructInit
 470              		.syntax unified
 471              		.code	16
 472              		.thumb_func
 473              		.fpu softvfp
 475              	USART_ClockStructInit:
 476              	.LVL52:
 477              	.LFB36:
 349:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 350:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 351:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 352:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
 353:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   structure which will be initialized.
 354:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 355:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 356:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 357:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 478              		.loc 1 357 1 is_stmt 1 view -0
 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 0
 481              		@ frame_needed = 0, uses_anonymous_args = 0
 482              		@ link register save eliminated.
 358:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* USART_ClockInitStruct members default value */
ARM GAS  /tmp/ccEZPSp0.s 			page 16


 359:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 483              		.loc 1 359 3 view .LVU147
 484              		.loc 1 359 38 is_stmt 0 view .LVU148
 485 0000 0023     		movs	r3, #0
 486 0002 0360     		str	r3, [r0]
 360:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 487              		.loc 1 360 3 is_stmt 1 view .LVU149
 488              		.loc 1 360 37 is_stmt 0 view .LVU150
 489 0004 4360     		str	r3, [r0, #4]
 361:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 490              		.loc 1 361 3 is_stmt 1 view .LVU151
 491              		.loc 1 361 37 is_stmt 0 view .LVU152
 492 0006 8360     		str	r3, [r0, #8]
 362:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 493              		.loc 1 362 3 is_stmt 1 view .LVU153
 494              		.loc 1 362 40 is_stmt 0 view .LVU154
 495 0008 C360     		str	r3, [r0, #12]
 363:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 496              		.loc 1 363 1 view .LVU155
 497              		@ sp needed
 498 000a 7047     		bx	lr
 499              		.cfi_endproc
 500              	.LFE36:
 502              		.section	.text.USART_Cmd,"ax",%progbits
 503              		.align	1
 504              		.global	USART_Cmd
 505              		.syntax unified
 506              		.code	16
 507              		.thumb_func
 508              		.fpu softvfp
 510              	USART_Cmd:
 511              	.LVL53:
 512              	.LFB37:
 364:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 365:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 366:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 367:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 368:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 369:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 370:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 371:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 372:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 373:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 513              		.loc 1 373 1 is_stmt 1 view -0
 514              		.cfi_startproc
 515              		@ args = 0, pretend = 0, frame = 0
 516              		@ frame_needed = 0, uses_anonymous_args = 0
 517              		@ link register save eliminated.
 374:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 375:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 518              		.loc 1 375 3 view .LVU157
 376:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 519              		.loc 1 376 3 view .LVU158
 377:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 378:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 520              		.loc 1 378 3 view .LVU159
 521              		.loc 1 378 6 is_stmt 0 view .LVU160
ARM GAS  /tmp/ccEZPSp0.s 			page 17


 522 0000 0029     		cmp	r1, #0
 523 0002 04D0     		beq	.L24
 379:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 380:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 381:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 |= USART_CR1_UE;
 524              		.loc 1 381 5 is_stmt 1 view .LVU161
 525              		.loc 1 381 17 is_stmt 0 view .LVU162
 526 0004 0368     		ldr	r3, [r0]
 527 0006 0122     		movs	r2, #1
 528 0008 1343     		orrs	r3, r2
 529 000a 0360     		str	r3, [r0]
 530              	.L23:
 382:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 383:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 384:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 385:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 386:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 387:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 388:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 531              		.loc 1 388 1 view .LVU163
 532              		@ sp needed
 533 000c 7047     		bx	lr
 534              	.L24:
 386:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 535              		.loc 1 386 5 is_stmt 1 view .LVU164
 386:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 536              		.loc 1 386 17 is_stmt 0 view .LVU165
 537 000e 0368     		ldr	r3, [r0]
 538 0010 0122     		movs	r2, #1
 539 0012 9343     		bics	r3, r2
 540 0014 0360     		str	r3, [r0]
 541              		.loc 1 388 1 view .LVU166
 542 0016 F9E7     		b	.L23
 543              		.cfi_endproc
 544              	.LFE37:
 546              		.section	.text.USART_DirectionModeCmd,"ax",%progbits
 547              		.align	1
 548              		.global	USART_DirectionModeCmd
 549              		.syntax unified
 550              		.code	16
 551              		.thumb_func
 552              		.fpu softvfp
 554              	USART_DirectionModeCmd:
 555              	.LVL54:
 556              	.LFB38:
 389:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 390:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 391:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's transmitter or receiver.
 392:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 393:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_Direction: specifies the USART direction.
 394:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be any combination of the following values:
 395:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_Mode_Tx: USART Transmitter
 396:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_Mode_Rx: USART Receiver
 397:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USART transfer direction.
 398:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.  
 399:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 400:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
ARM GAS  /tmp/ccEZPSp0.s 			page 18


 401:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DirectionModeCmd(USART_TypeDef* USARTx, uint32_t USART_DirectionMode, FunctionalState Ne
 402:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 557              		.loc 1 402 1 is_stmt 1 view -0
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 0
 560              		@ frame_needed = 0, uses_anonymous_args = 0
 561              		@ link register save eliminated.
 403:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 404:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 562              		.loc 1 404 3 view .LVU168
 405:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_MODE(USART_DirectionMode));
 563              		.loc 1 405 3 view .LVU169
 406:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 564              		.loc 1 406 3 view .LVU170
 407:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 408:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 565              		.loc 1 408 3 view .LVU171
 566              		.loc 1 408 6 is_stmt 0 view .LVU172
 567 0000 002A     		cmp	r2, #0
 568 0002 03D0     		beq	.L27
 409:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 410:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the USART's transfer interface by setting the TE and/or RE bits 
 411:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        in the USART CR1 register */
 412:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 |= USART_DirectionMode;
 569              		.loc 1 412 5 is_stmt 1 view .LVU173
 570              		.loc 1 412 17 is_stmt 0 view .LVU174
 571 0004 0368     		ldr	r3, [r0]
 572 0006 1943     		orrs	r1, r3
 573              	.LVL55:
 574              		.loc 1 412 17 view .LVU175
 575 0008 0160     		str	r1, [r0]
 576              	.L26:
 413:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 414:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 415:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 416:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the USART's transfer interface by clearing the TE and/or RE bits
 417:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        in the USART CR3 register */
 418:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 &= (uint32_t)~USART_DirectionMode;
 419:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 420:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 577              		.loc 1 420 1 view .LVU176
 578              		@ sp needed
 579 000a 7047     		bx	lr
 580              	.LVL56:
 581              	.L27:
 418:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 582              		.loc 1 418 5 is_stmt 1 view .LVU177
 418:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 583              		.loc 1 418 17 is_stmt 0 view .LVU178
 584 000c 0368     		ldr	r3, [r0]
 585 000e 8B43     		bics	r3, r1
 586 0010 0360     		str	r3, [r0]
 587              		.loc 1 420 1 view .LVU179
 588 0012 FAE7     		b	.L26
 589              		.cfi_endproc
 590              	.LFE38:
 592              		.section	.text.USART_OverSampling8Cmd,"ax",%progbits
ARM GAS  /tmp/ccEZPSp0.s 			page 19


 593              		.align	1
 594              		.global	USART_OverSampling8Cmd
 595              		.syntax unified
 596              		.code	16
 597              		.thumb_func
 598              		.fpu softvfp
 600              	USART_OverSampling8Cmd:
 601              	.LVL57:
 602              	.LFB39:
 421:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 422:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 423:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 424:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 425:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param NewState: new state of the USART 8x oversampling mode.
 426:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 427:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note
 428:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This function has to be called before calling USART_Init()
 429:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   function in order to have correct baudrate Divider value.
 430:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 431:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 432:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 433:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 603              		.loc 1 433 1 is_stmt 1 view -0
 604              		.cfi_startproc
 605              		@ args = 0, pretend = 0, frame = 0
 606              		@ frame_needed = 0, uses_anonymous_args = 0
 607              		@ link register save eliminated.
 434:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 435:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 608              		.loc 1 435 3 view .LVU181
 436:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 609              		.loc 1 436 3 view .LVU182
 437:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 438:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 610              		.loc 1 438 3 view .LVU183
 611              		.loc 1 438 6 is_stmt 0 view .LVU184
 612 0000 0029     		cmp	r1, #0
 613 0002 05D0     		beq	.L30
 439:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 440:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 441:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 |= USART_CR1_OVER8;
 614              		.loc 1 441 5 is_stmt 1 view .LVU185
 615              		.loc 1 441 17 is_stmt 0 view .LVU186
 616 0004 0268     		ldr	r2, [r0]
 617 0006 8023     		movs	r3, #128
 618 0008 1B02     		lsls	r3, r3, #8
 619 000a 1343     		orrs	r3, r2
 620 000c 0360     		str	r3, [r0]
 621              	.L29:
 442:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 443:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 444:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 445:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 446:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_OVER8);
 447:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 448:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }  
 622              		.loc 1 448 1 view .LVU187
ARM GAS  /tmp/ccEZPSp0.s 			page 20


 623              		@ sp needed
 624 000e 7047     		bx	lr
 625              	.L30:
 446:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 626              		.loc 1 446 5 is_stmt 1 view .LVU188
 446:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 627              		.loc 1 446 17 is_stmt 0 view .LVU189
 628 0010 0368     		ldr	r3, [r0]
 629 0012 024A     		ldr	r2, .L32
 630 0014 1340     		ands	r3, r2
 631 0016 0360     		str	r3, [r0]
 632              		.loc 1 448 1 view .LVU190
 633 0018 F9E7     		b	.L29
 634              	.L33:
 635 001a C046     		.align	2
 636              	.L32:
 637 001c FF7FFFFF 		.word	-32769
 638              		.cfi_endproc
 639              	.LFE39:
 641              		.section	.text.USART_OneBitMethodCmd,"ax",%progbits
 642              		.align	1
 643              		.global	USART_OneBitMethodCmd
 644              		.syntax unified
 645              		.code	16
 646              		.thumb_func
 647              		.fpu softvfp
 649              	USART_OneBitMethodCmd:
 650              	.LVL58:
 651              	.LFB40:
 449:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 450:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 451:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 452:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 453:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 454:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 455:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note
 456:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This function has to be called before calling USART_Cmd() function.  
 457:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 458:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 459:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 460:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 652              		.loc 1 460 1 is_stmt 1 view -0
 653              		.cfi_startproc
 654              		@ args = 0, pretend = 0, frame = 0
 655              		@ frame_needed = 0, uses_anonymous_args = 0
 656              		@ link register save eliminated.
 461:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 462:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 657              		.loc 1 462 3 view .LVU192
 463:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 658              		.loc 1 463 3 view .LVU193
 464:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 465:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 659              		.loc 1 465 3 view .LVU194
 660              		.loc 1 465 6 is_stmt 0 view .LVU195
 661 0000 0029     		cmp	r1, #0
 662 0002 05D0     		beq	.L35
ARM GAS  /tmp/ccEZPSp0.s 			page 21


 466:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 467:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 468:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_CR3_ONEBIT;
 663              		.loc 1 468 5 is_stmt 1 view .LVU196
 664              		.loc 1 468 17 is_stmt 0 view .LVU197
 665 0004 8268     		ldr	r2, [r0, #8]
 666 0006 8023     		movs	r3, #128
 667 0008 1B01     		lsls	r3, r3, #4
 668 000a 1343     		orrs	r3, r2
 669 000c 8360     		str	r3, [r0, #8]
 670              	.L34:
 469:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 470:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 471:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 472:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
 473:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT);
 474:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 475:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 671              		.loc 1 475 1 view .LVU198
 672              		@ sp needed
 673 000e 7047     		bx	lr
 674              	.L35:
 473:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 675              		.loc 1 473 5 is_stmt 1 view .LVU199
 473:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 676              		.loc 1 473 17 is_stmt 0 view .LVU200
 677 0010 8368     		ldr	r3, [r0, #8]
 678 0012 024A     		ldr	r2, .L37
 679 0014 1340     		ands	r3, r2
 680 0016 8360     		str	r3, [r0, #8]
 681              		.loc 1 475 1 view .LVU201
 682 0018 F9E7     		b	.L34
 683              	.L38:
 684 001a C046     		.align	2
 685              	.L37:
 686 001c FFF7FFFF 		.word	-2049
 687              		.cfi_endproc
 688              	.LFE40:
 690              		.section	.text.USART_MSBFirstCmd,"ax",%progbits
 691              		.align	1
 692              		.global	USART_MSBFirstCmd
 693              		.syntax unified
 694              		.code	16
 695              		.thumb_func
 696              		.fpu softvfp
 698              	USART_MSBFirstCmd:
 699              	.LVL59:
 700              	.LFB41:
 476:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 477:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 478:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's most significant bit first 
 479:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         transmitted/received following the start bit.
 480:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 481:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USART most significant bit first
 482:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         transmitted/received following the start bit.
 483:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 484:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note
ARM GAS  /tmp/ccEZPSp0.s 			page 22


 485:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This function has to be called before calling USART_Cmd() function.  
 486:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 487:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 488:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_MSBFirstCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 489:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 701              		.loc 1 489 1 is_stmt 1 view -0
 702              		.cfi_startproc
 703              		@ args = 0, pretend = 0, frame = 0
 704              		@ frame_needed = 0, uses_anonymous_args = 0
 705              		@ link register save eliminated.
 490:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 491:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 706              		.loc 1 491 3 view .LVU203
 492:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 707              		.loc 1 492 3 view .LVU204
 493:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 494:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 708              		.loc 1 494 3 view .LVU205
 709              		.loc 1 494 6 is_stmt 0 view .LVU206
 710 0000 0029     		cmp	r1, #0
 711 0002 05D0     		beq	.L40
 495:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 496:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the most significant bit first transmitted/received following the 
 497:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        start bit by setting the MSBFIRST bit in the CR2 register */
 498:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_CR2_MSBFIRST;
 712              		.loc 1 498 5 is_stmt 1 view .LVU207
 713              		.loc 1 498 17 is_stmt 0 view .LVU208
 714 0004 4268     		ldr	r2, [r0, #4]
 715 0006 8023     		movs	r3, #128
 716 0008 1B03     		lsls	r3, r3, #12
 717 000a 1343     		orrs	r3, r2
 718 000c 4360     		str	r3, [r0, #4]
 719              	.L39:
 499:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 500:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 501:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 502:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the most significant bit first transmitted/received following the 
 503:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        start bit by clearing the MSBFIRST bit in the CR2 register */
 504:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_MSBFIRST);
 505:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 506:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 720              		.loc 1 506 1 view .LVU209
 721              		@ sp needed
 722 000e 7047     		bx	lr
 723              	.L40:
 504:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 724              		.loc 1 504 5 is_stmt 1 view .LVU210
 504:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 725              		.loc 1 504 17 is_stmt 0 view .LVU211
 726 0010 4368     		ldr	r3, [r0, #4]
 727 0012 024A     		ldr	r2, .L42
 728 0014 1340     		ands	r3, r2
 729 0016 4360     		str	r3, [r0, #4]
 730              		.loc 1 506 1 view .LVU212
 731 0018 F9E7     		b	.L39
 732              	.L43:
 733 001a C046     		.align	2
ARM GAS  /tmp/ccEZPSp0.s 			page 23


 734              	.L42:
 735 001c FFFFF7FF 		.word	-524289
 736              		.cfi_endproc
 737              	.LFE41:
 739              		.section	.text.USART_DataInvCmd,"ax",%progbits
 740              		.align	1
 741              		.global	USART_DataInvCmd
 742              		.syntax unified
 743              		.code	16
 744              		.thumb_func
 745              		.fpu softvfp
 747              	USART_DataInvCmd:
 748              	.LVL60:
 749              	.LFB42:
 507:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 508:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 509:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the binary data inversion.
 510:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 511:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param NewState: new defined levels for the USART data.
 512:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 513:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   - ENABLE: Logical data from the data register are send/received in negative
 514:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *             logic. (1=L, 0=H). The parity bit is also inverted.
 515:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   - DISABLE: Logical data from the data register are send/received in positive
 516:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *              logic. (1=H, 0=L) 
 517:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note
 518:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This function has to be called before calling USART_Cmd() function.  
 519:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 520:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 521:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DataInvCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 522:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 750              		.loc 1 522 1 is_stmt 1 view -0
 751              		.cfi_startproc
 752              		@ args = 0, pretend = 0, frame = 0
 753              		@ frame_needed = 0, uses_anonymous_args = 0
 754              		@ link register save eliminated.
 523:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 524:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 755              		.loc 1 524 3 view .LVU214
 525:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 756              		.loc 1 525 3 view .LVU215
 526:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 527:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 757              		.loc 1 527 3 view .LVU216
 758              		.loc 1 527 6 is_stmt 0 view .LVU217
 759 0000 0029     		cmp	r1, #0
 760 0002 05D0     		beq	.L45
 528:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 529:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the binary data inversion feature by setting the DATAINV bit in 
 530:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        the CR2 register */
 531:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_CR2_DATAINV;
 761              		.loc 1 531 5 is_stmt 1 view .LVU218
 762              		.loc 1 531 17 is_stmt 0 view .LVU219
 763 0004 4268     		ldr	r2, [r0, #4]
 764 0006 8023     		movs	r3, #128
 765 0008 DB02     		lsls	r3, r3, #11
 766 000a 1343     		orrs	r3, r2
 767 000c 4360     		str	r3, [r0, #4]
ARM GAS  /tmp/ccEZPSp0.s 			page 24


 768              	.L44:
 532:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 533:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 534:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 535:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the binary data inversion feature by clearing the DATAINV bit in 
 536:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        the CR2 register */
 537:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_DATAINV);
 538:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 539:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 769              		.loc 1 539 1 view .LVU220
 770              		@ sp needed
 771 000e 7047     		bx	lr
 772              	.L45:
 537:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 773              		.loc 1 537 5 is_stmt 1 view .LVU221
 537:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 774              		.loc 1 537 17 is_stmt 0 view .LVU222
 775 0010 4368     		ldr	r3, [r0, #4]
 776 0012 024A     		ldr	r2, .L47
 777 0014 1340     		ands	r3, r2
 778 0016 4360     		str	r3, [r0, #4]
 779              		.loc 1 539 1 view .LVU223
 780 0018 F9E7     		b	.L44
 781              	.L48:
 782 001a C046     		.align	2
 783              	.L47:
 784 001c FFFFFBFF 		.word	-262145
 785              		.cfi_endproc
 786              	.LFE42:
 788              		.section	.text.USART_InvPinCmd,"ax",%progbits
 789              		.align	1
 790              		.global	USART_InvPinCmd
 791              		.syntax unified
 792              		.code	16
 793              		.thumb_func
 794              		.fpu softvfp
 796              	USART_InvPinCmd:
 797              	.LVL61:
 798              	.LFB43:
 540:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 541:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 542:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the Pin(s) active level inversion.
 543:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 544:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_InvPin: specifies the USART pin(s) to invert.
 545:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be any combination of the following values:
 546:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_InvPin_Tx: USART Tx pin active level inversion.
 547:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_InvPin_Rx: USART Rx pin active level inversion.
 548:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param NewState: new active level status for the USART pin(s).
 549:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 550:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   - ENABLE: pin(s) signal values are inverted (Vdd =0, Gnd =1).
 551:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   - DISABLE: pin(s) signal works using the standard logic levels (Vdd =1, Gnd =0).
 552:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note
 553:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This function has to be called before calling USART_Cmd() function.  
 554:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 555:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 556:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_InvPinCmd(USART_TypeDef* USARTx, uint32_t USART_InvPin, FunctionalState NewState)
 557:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
ARM GAS  /tmp/ccEZPSp0.s 			page 25


 799              		.loc 1 557 1 is_stmt 1 view -0
 800              		.cfi_startproc
 801              		@ args = 0, pretend = 0, frame = 0
 802              		@ frame_needed = 0, uses_anonymous_args = 0
 803              		@ link register save eliminated.
 558:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 559:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 804              		.loc 1 559 3 view .LVU225
 560:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_INVERSTION_PIN(USART_InvPin));  
 805              		.loc 1 560 3 view .LVU226
 561:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 806              		.loc 1 561 3 view .LVU227
 562:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 563:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 807              		.loc 1 563 3 view .LVU228
 808              		.loc 1 563 6 is_stmt 0 view .LVU229
 809 0000 002A     		cmp	r2, #0
 810 0002 03D0     		beq	.L50
 564:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 565:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the active level inversion for selected pins by setting the TXINV 
 566:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        and/or RXINV bits in the USART CR2 register */
 567:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_InvPin;
 811              		.loc 1 567 5 is_stmt 1 view .LVU230
 812              		.loc 1 567 17 is_stmt 0 view .LVU231
 813 0004 4368     		ldr	r3, [r0, #4]
 814 0006 1943     		orrs	r1, r3
 815              	.LVL62:
 816              		.loc 1 567 17 view .LVU232
 817 0008 4160     		str	r1, [r0, #4]
 818              	.L49:
 568:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 569:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 570:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 571:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the active level inversion for selected requests by clearing the 
 572:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        TXINV and/or RXINV bits in the USART CR2 register */
 573:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~USART_InvPin;
 574:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 575:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 819              		.loc 1 575 1 view .LVU233
 820              		@ sp needed
 821 000a 7047     		bx	lr
 822              	.LVL63:
 823              	.L50:
 573:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 824              		.loc 1 573 5 is_stmt 1 view .LVU234
 573:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 825              		.loc 1 573 17 is_stmt 0 view .LVU235
 826 000c 4368     		ldr	r3, [r0, #4]
 827 000e 8B43     		bics	r3, r1
 828 0010 4360     		str	r3, [r0, #4]
 829              		.loc 1 575 1 view .LVU236
 830 0012 FAE7     		b	.L49
 831              		.cfi_endproc
 832              	.LFE43:
 834              		.section	.text.USART_SWAPPinCmd,"ax",%progbits
 835              		.align	1
 836              		.global	USART_SWAPPinCmd
ARM GAS  /tmp/ccEZPSp0.s 			page 26


 837              		.syntax unified
 838              		.code	16
 839              		.thumb_func
 840              		.fpu softvfp
 842              	USART_SWAPPinCmd:
 843              	.LVL64:
 844              	.LFB44:
 576:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 577:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 578:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the swap Tx/Rx pins.
 579:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 580:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param NewState: new state of the USARTx TX/RX pins pinout.
 581:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 582:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   - ENABLE: The TX and RX pins functions are swapped.
 583:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   - DISABLE: TX/RX pins are used as defined in standard pinout
 584:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note
 585:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This function has to be called before calling USART_Cmd() function.  
 586:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 587:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 588:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SWAPPinCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 589:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 845              		.loc 1 589 1 is_stmt 1 view -0
 846              		.cfi_startproc
 847              		@ args = 0, pretend = 0, frame = 0
 848              		@ frame_needed = 0, uses_anonymous_args = 0
 849              		@ link register save eliminated.
 590:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 591:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 850              		.loc 1 591 3 view .LVU238
 592:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 851              		.loc 1 592 3 view .LVU239
 593:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 594:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 852              		.loc 1 594 3 view .LVU240
 853              		.loc 1 594 6 is_stmt 0 view .LVU241
 854 0000 0029     		cmp	r1, #0
 855 0002 05D0     		beq	.L53
 595:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 596:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
 597:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_CR2_SWAP;
 856              		.loc 1 597 5 is_stmt 1 view .LVU242
 857              		.loc 1 597 17 is_stmt 0 view .LVU243
 858 0004 4268     		ldr	r2, [r0, #4]
 859 0006 8023     		movs	r3, #128
 860 0008 1B02     		lsls	r3, r3, #8
 861 000a 1343     		orrs	r3, r2
 862 000c 4360     		str	r3, [r0, #4]
 863              	.L52:
 598:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 599:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 600:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 601:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the SWAP feature by clearing the SWAP bit in the CR2 register */
 602:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_SWAP);
 603:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 604:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 864              		.loc 1 604 1 view .LVU244
 865              		@ sp needed
ARM GAS  /tmp/ccEZPSp0.s 			page 27


 866 000e 7047     		bx	lr
 867              	.L53:
 602:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 868              		.loc 1 602 5 is_stmt 1 view .LVU245
 602:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 869              		.loc 1 602 17 is_stmt 0 view .LVU246
 870 0010 4368     		ldr	r3, [r0, #4]
 871 0012 024A     		ldr	r2, .L55
 872 0014 1340     		ands	r3, r2
 873 0016 4360     		str	r3, [r0, #4]
 874              		.loc 1 604 1 view .LVU247
 875 0018 F9E7     		b	.L52
 876              	.L56:
 877 001a C046     		.align	2
 878              	.L55:
 879 001c FF7FFFFF 		.word	-32769
 880              		.cfi_endproc
 881              	.LFE44:
 883              		.section	.text.USART_ReceiverTimeOutCmd,"ax",%progbits
 884              		.align	1
 885              		.global	USART_ReceiverTimeOutCmd
 886              		.syntax unified
 887              		.code	16
 888              		.thumb_func
 889              		.fpu softvfp
 891              	USART_ReceiverTimeOutCmd:
 892              	.LVL65:
 893              	.LFB45:
 605:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 606:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 607:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the receiver Time Out feature.
 608:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
 609:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param NewState: new state of the USARTx receiver Time Out.
 610:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 611:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 612:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 613:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_ReceiverTimeOutCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 614:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 894              		.loc 1 614 1 is_stmt 1 view -0
 895              		.cfi_startproc
 896              		@ args = 0, pretend = 0, frame = 0
 897              		@ frame_needed = 0, uses_anonymous_args = 0
 898              		@ link register save eliminated.
 615:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 616:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 899              		.loc 1 616 3 view .LVU249
 617:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 900              		.loc 1 617 3 view .LVU250
 618:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 619:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 901              		.loc 1 619 3 view .LVU251
 902              		.loc 1 619 6 is_stmt 0 view .LVU252
 903 0000 0029     		cmp	r1, #0
 904 0002 05D0     		beq	.L58
 620:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 621:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
 622:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register */
ARM GAS  /tmp/ccEZPSp0.s 			page 28


 623:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_CR2_RTOEN;
 905              		.loc 1 623 5 is_stmt 1 view .LVU253
 906              		.loc 1 623 17 is_stmt 0 view .LVU254
 907 0004 4268     		ldr	r2, [r0, #4]
 908 0006 8023     		movs	r3, #128
 909 0008 1B04     		lsls	r3, r3, #16
 910 000a 1343     		orrs	r3, r2
 911 000c 4360     		str	r3, [r0, #4]
 912              	.L57:
 624:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 625:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 626:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 627:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the receiver time out feature by clearing the RTOEN bit in the CR2 
 628:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register */
 629:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_RTOEN);
 630:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 631:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 913              		.loc 1 631 1 view .LVU255
 914              		@ sp needed
 915 000e 7047     		bx	lr
 916              	.L58:
 629:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 917              		.loc 1 629 5 is_stmt 1 view .LVU256
 629:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 918              		.loc 1 629 17 is_stmt 0 view .LVU257
 919 0010 4368     		ldr	r3, [r0, #4]
 920 0012 024A     		ldr	r2, .L60
 921 0014 1340     		ands	r3, r2
 922 0016 4360     		str	r3, [r0, #4]
 923              		.loc 1 631 1 view .LVU258
 924 0018 F9E7     		b	.L57
 925              	.L61:
 926 001a C046     		.align	2
 927              	.L60:
 928 001c FFFF7FFF 		.word	-8388609
 929              		.cfi_endproc
 930              	.LFE45:
 932              		.section	.text.USART_SetReceiverTimeOut,"ax",%progbits
 933              		.align	1
 934              		.global	USART_SetReceiverTimeOut
 935              		.syntax unified
 936              		.code	16
 937              		.thumb_func
 938              		.fpu softvfp
 940              	USART_SetReceiverTimeOut:
 941              	.LVL66:
 942              	.LFB46:
 632:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 633:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 634:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the receiver Time Out value.
 635:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
 636:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_ReceiverTimeOut: specifies the Receiver Time Out value.
 637:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 638:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 639:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetReceiverTimeOut(USART_TypeDef* USARTx, uint32_t USART_ReceiverTimeOut)
 640:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {    
 943              		.loc 1 640 1 is_stmt 1 view -0
ARM GAS  /tmp/ccEZPSp0.s 			page 29


 944              		.cfi_startproc
 945              		@ args = 0, pretend = 0, frame = 0
 946              		@ frame_needed = 0, uses_anonymous_args = 0
 947              		@ link register save eliminated.
 641:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 642:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 948              		.loc 1 642 3 view .LVU260
 643:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_TIMEOUT(USART_ReceiverTimeOut));
 949              		.loc 1 643 3 view .LVU261
 644:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 645:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the receiver Time Out value by clearing the RTO[23:0] bits in the RTOR
 646:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****      register  */
 647:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_RTO);
 950              		.loc 1 647 3 view .LVU262
 951              		.loc 1 647 16 is_stmt 0 view .LVU263
 952 0000 4369     		ldr	r3, [r0, #20]
 953 0002 1B0E     		lsrs	r3, r3, #24
 954 0004 1B06     		lsls	r3, r3, #24
 955 0006 4361     		str	r3, [r0, #20]
 648:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the receiver Time Out value by setting the RTO[23:0] bits in the RTOR
 649:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****      register  */
 650:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->RTOR |= USART_ReceiverTimeOut;
 956              		.loc 1 650 3 is_stmt 1 view .LVU264
 957              		.loc 1 650 16 is_stmt 0 view .LVU265
 958 0008 4369     		ldr	r3, [r0, #20]
 959 000a 0B43     		orrs	r3, r1
 960 000c 4361     		str	r3, [r0, #20]
 651:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 961              		.loc 1 651 1 view .LVU266
 962              		@ sp needed
 963 000e 7047     		bx	lr
 964              		.cfi_endproc
 965              	.LFE46:
 967              		.section	.text.USART_SetPrescaler,"ax",%progbits
 968              		.align	1
 969              		.global	USART_SetPrescaler
 970              		.syntax unified
 971              		.code	16
 972              		.thumb_func
 973              		.fpu softvfp
 975              	USART_SetPrescaler:
 976              	.LVL67:
 977              	.LFB47:
 652:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 653:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 654:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the system clock prescaler.
 655:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
 656:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock.
 657:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note
 658:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This function has to be called before calling USART_Cmd() function.    
 659:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 660:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 661:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 662:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** { 
 978              		.loc 1 662 1 is_stmt 1 view -0
 979              		.cfi_startproc
 980              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccEZPSp0.s 			page 30


 981              		@ frame_needed = 0, uses_anonymous_args = 0
 982              		@ link register save eliminated.
 663:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 664:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 983              		.loc 1 664 3 view .LVU268
 665:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 666:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the USART prescaler */
 667:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->GTPR &= USART_GTPR_GT;
 984              		.loc 1 667 3 view .LVU269
 985              		.loc 1 667 16 is_stmt 0 view .LVU270
 986 0000 028A     		ldrh	r2, [r0, #16]
 987 0002 FF23     		movs	r3, #255
 988 0004 9A43     		bics	r2, r3
 989 0006 0282     		strh	r2, [r0, #16]
 668:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the USART prescaler */
 669:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 990              		.loc 1 669 3 is_stmt 1 view .LVU271
 991              		.loc 1 669 16 is_stmt 0 view .LVU272
 992 0008 038A     		ldrh	r3, [r0, #16]
 993 000a 0B43     		orrs	r3, r1
 994 000c 0382     		strh	r3, [r0, #16]
 670:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 995              		.loc 1 670 1 view .LVU273
 996              		@ sp needed
 997 000e 7047     		bx	lr
 998              		.cfi_endproc
 999              	.LFE47:
 1001              		.section	.text.USART_STOPModeCmd,"ax",%progbits
 1002              		.align	1
 1003              		.global	USART_STOPModeCmd
 1004              		.syntax unified
 1005              		.code	16
 1006              		.thumb_func
 1007              		.fpu softvfp
 1009              	USART_STOPModeCmd:
 1010              	.LVL68:
 1011              	.LFB48:
 671:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 672:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 673:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
 674:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 675:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 676:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 677:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group2 STOP Mode functions
 678:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   STOP Mode functions
 679:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
 680:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim
 681:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 682:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                         ##### STOP Mode functions #####
 683:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 684:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage 
 685:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          WakeUp from STOP mode.
 686:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 687:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The USART is able to WakeUp from Stop Mode if USART clock is set to HSI
 688:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          or LSI.
 689:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          
 690:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The WakeUp source is configured by calling USART_StopModeWakeUpSourceConfig()
ARM GAS  /tmp/ccEZPSp0.s 			page 31


 691:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          function.
 692:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          
 693:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] After configuring the source of WakeUp and before entering in Stop Mode 
 694:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          USART_STOPModeCmd() function should be called to allow USART WakeUp.
 695:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                            
 696:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
 697:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
 698:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 699:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 700:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 701:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral in STOP Mode.
 702:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
 703:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral state in stop mode.
 704:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 705:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note
 706:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This function has to be called when USART clock is set to HSI or LSE. 
 707:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 708:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 709:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_STOPModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 710:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1012              		.loc 1 710 1 is_stmt 1 view -0
 1013              		.cfi_startproc
 1014              		@ args = 0, pretend = 0, frame = 0
 1015              		@ frame_needed = 0, uses_anonymous_args = 0
 1016              		@ link register save eliminated.
 711:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 712:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 1017              		.loc 1 712 3 view .LVU275
 713:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1018              		.loc 1 713 3 view .LVU276
 714:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 715:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1019              		.loc 1 715 3 view .LVU277
 1020              		.loc 1 715 6 is_stmt 0 view .LVU278
 1021 0000 0029     		cmp	r1, #0
 1022 0002 04D0     		beq	.L65
 716:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 717:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the selected USART in STOP mode by setting the UESM bit in the CR1
 718:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register */
 719:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 |= USART_CR1_UESM;
 1023              		.loc 1 719 5 is_stmt 1 view .LVU279
 1024              		.loc 1 719 17 is_stmt 0 view .LVU280
 1025 0004 0368     		ldr	r3, [r0]
 1026 0006 0222     		movs	r2, #2
 1027 0008 1343     		orrs	r3, r2
 1028 000a 0360     		str	r3, [r0]
 1029              	.L64:
 720:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 721:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 722:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 723:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the selected USART in STOP mode by clearing the UE bit in the CR1
 724:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register */
 725:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UESM);
 726:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 727:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1030              		.loc 1 727 1 view .LVU281
 1031              		@ sp needed
ARM GAS  /tmp/ccEZPSp0.s 			page 32


 1032 000c 7047     		bx	lr
 1033              	.L65:
 725:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 1034              		.loc 1 725 5 is_stmt 1 view .LVU282
 725:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 1035              		.loc 1 725 17 is_stmt 0 view .LVU283
 1036 000e 0368     		ldr	r3, [r0]
 1037 0010 0222     		movs	r2, #2
 1038 0012 9343     		bics	r3, r2
 1039 0014 0360     		str	r3, [r0]
 1040              		.loc 1 727 1 view .LVU284
 1041 0016 F9E7     		b	.L64
 1042              		.cfi_endproc
 1043              	.LFE48:
 1045              		.section	.text.USART_StopModeWakeUpSourceConfig,"ax",%progbits
 1046              		.align	1
 1047              		.global	USART_StopModeWakeUpSourceConfig
 1048              		.syntax unified
 1049              		.code	16
 1050              		.thumb_func
 1051              		.fpu softvfp
 1053              	USART_StopModeWakeUpSourceConfig:
 1054              	.LVL69:
 1055              	.LFB49:
 728:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 729:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 730:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Selects the USART WakeUp method form stop mode.
 731:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
 732:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_WakeUp: specifies the selected USART wakeup method.
 733:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be one of the following values:
 734:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_WakeUpSource_AddressMatch: WUF active on address match.
 735:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_WakeUpSource_StartBit: WUF active on Start bit detection.
 736:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_WakeUpSource_RXNE: WUF active on RXNE.
 737:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note
 738:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This function has to be called before calling USART_Cmd() function.   
 739:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 740:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 741:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_StopModeWakeUpSourceConfig(USART_TypeDef* USARTx, uint32_t USART_WakeUpSource)
 742:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1056              		.loc 1 742 1 is_stmt 1 view -0
 1057              		.cfi_startproc
 1058              		@ args = 0, pretend = 0, frame = 0
 1059              		@ frame_needed = 0, uses_anonymous_args = 0
 1060              		@ link register save eliminated.
 743:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 744:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 1061              		.loc 1 744 3 view .LVU286
 745:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_STOPMODE_WAKEUPSOURCE(USART_WakeUpSource));
 1062              		.loc 1 745 3 view .LVU287
 746:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 747:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_WUS);
 1063              		.loc 1 747 3 view .LVU288
 1064              		.loc 1 747 15 is_stmt 0 view .LVU289
 1065 0000 8268     		ldr	r2, [r0, #8]
 1066 0002 034B     		ldr	r3, .L68
 1067 0004 1A40     		ands	r2, r3
 1068 0006 8260     		str	r2, [r0, #8]
ARM GAS  /tmp/ccEZPSp0.s 			page 33


 748:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= USART_WakeUpSource;
 1069              		.loc 1 748 3 is_stmt 1 view .LVU290
 1070              		.loc 1 748 15 is_stmt 0 view .LVU291
 1071 0008 8368     		ldr	r3, [r0, #8]
 1072 000a 0B43     		orrs	r3, r1
 1073 000c 8360     		str	r3, [r0, #8]
 749:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1074              		.loc 1 749 1 view .LVU292
 1075              		@ sp needed
 1076 000e 7047     		bx	lr
 1077              	.L69:
 1078              		.align	2
 1079              	.L68:
 1080 0010 FFFFCFFF 		.word	-3145729
 1081              		.cfi_endproc
 1082              	.LFE49:
 1084              		.section	.text.USART_AutoBaudRateCmd,"ax",%progbits
 1085              		.align	1
 1086              		.global	USART_AutoBaudRateCmd
 1087              		.syntax unified
 1088              		.code	16
 1089              		.thumb_func
 1090              		.fpu softvfp
 1092              	USART_AutoBaudRateCmd:
 1093              	.LVL70:
 1094              	.LFB50:
 750:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 751:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 752:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
 753:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 754:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 755:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 756:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group3 AutoBaudRate functions
 757:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   AutoBaudRate functions 
 758:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
 759:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim
 760:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 761:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                        ##### AutoBaudRate functions #####
 762:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 763:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage 
 764:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          the AutoBaudRate detections.
 765:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          
 766:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] Before Enabling AutoBaudRate detection using USART_AutoBaudRateCmd ()
 767:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          The character patterns used to calculate baudrate must be chosen by calling 
 768:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          USART_AutoBaudRateConfig() function. These function take as parameter :
 769:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#)USART_AutoBaudRate_StartBit : any character starting with a bit 1.
 770:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#)USART_AutoBaudRate_FallingEdge : any character starting with a 10xx bit pattern. 
 771:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                           
 772:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] At any later time, another request for AutoBaudRate detection can be performed
 773:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          using USART_AutoBaudRateNewRequest() function.
 774:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          
 775:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The AutoBaudRate detection is monitored by the status of ABRF flag which indicate
 776:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          that the AutoBaudRate detection is completed. In addition to ABRF flag, the ABRE flag
 777:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          indicate that this procedure is completed without success. USART_GetFlagStatus () 
 778:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          function should be used to monitor the status of these flags.  
 779:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              
 780:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
ARM GAS  /tmp/ccEZPSp0.s 			page 34


 781:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
 782:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 783:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 784:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 785:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the Auto Baud Rate.
 786:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
 787:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param NewState: new state of the USARTx auto baud rate.
 788:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 789:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 790:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 791:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_AutoBaudRateCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 792:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1095              		.loc 1 792 1 is_stmt 1 view -0
 1096              		.cfi_startproc
 1097              		@ args = 0, pretend = 0, frame = 0
 1098              		@ frame_needed = 0, uses_anonymous_args = 0
 1099              		@ link register save eliminated.
 793:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 794:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 1100              		.loc 1 794 3 view .LVU294
 795:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1101              		.loc 1 795 3 view .LVU295
 796:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 797:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1102              		.loc 1 797 3 view .LVU296
 1103              		.loc 1 797 6 is_stmt 0 view .LVU297
 1104 0000 0029     		cmp	r1, #0
 1105 0002 05D0     		beq	.L71
 798:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 799:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
 800:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register */
 801:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_CR2_ABREN;
 1106              		.loc 1 801 5 is_stmt 1 view .LVU298
 1107              		.loc 1 801 17 is_stmt 0 view .LVU299
 1108 0004 4268     		ldr	r2, [r0, #4]
 1109 0006 8023     		movs	r3, #128
 1110 0008 5B03     		lsls	r3, r3, #13
 1111 000a 1343     		orrs	r3, r2
 1112 000c 4360     		str	r3, [r0, #4]
 1113              	.L70:
 802:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 803:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 804:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 805:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the auto baud rate feature by clearing the ABREN bit in the CR2 
 806:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register */
 807:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABREN);
 808:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 809:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1114              		.loc 1 809 1 view .LVU300
 1115              		@ sp needed
 1116 000e 7047     		bx	lr
 1117              	.L71:
 807:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 1118              		.loc 1 807 5 is_stmt 1 view .LVU301
 807:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 1119              		.loc 1 807 17 is_stmt 0 view .LVU302
 1120 0010 4368     		ldr	r3, [r0, #4]
ARM GAS  /tmp/ccEZPSp0.s 			page 35


 1121 0012 024A     		ldr	r2, .L73
 1122 0014 1340     		ands	r3, r2
 1123 0016 4360     		str	r3, [r0, #4]
 1124              		.loc 1 809 1 view .LVU303
 1125 0018 F9E7     		b	.L70
 1126              	.L74:
 1127 001a C046     		.align	2
 1128              	.L73:
 1129 001c FFFFEFFF 		.word	-1048577
 1130              		.cfi_endproc
 1131              	.LFE50:
 1133              		.section	.text.USART_AutoBaudRateConfig,"ax",%progbits
 1134              		.align	1
 1135              		.global	USART_AutoBaudRateConfig
 1136              		.syntax unified
 1137              		.code	16
 1138              		.thumb_func
 1139              		.fpu softvfp
 1141              	USART_AutoBaudRateConfig:
 1142              	.LVL71:
 1143              	.LFB51:
 810:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 811:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 812:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Selects the USART auto baud rate method.
 813:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
 814:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_AutoBaudRate: specifies the selected USART auto baud rate method.
 815:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be one of the following values:
 816:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_AutoBaudRate_StartBit: Start Bit duration measurement.
 817:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_AutoBaudRate_FallingEdge: Falling edge to falling edge measurement.
 818:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note
 819:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This function has to be called before calling USART_Cmd() function.  
 820:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 821:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 822:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_AutoBaudRateConfig(USART_TypeDef* USARTx, uint32_t USART_AutoBaudRate)
 823:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1144              		.loc 1 823 1 is_stmt 1 view -0
 1145              		.cfi_startproc
 1146              		@ args = 0, pretend = 0, frame = 0
 1147              		@ frame_needed = 0, uses_anonymous_args = 0
 1148              		@ link register save eliminated.
 824:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 825:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 1149              		.loc 1 825 3 view .LVU305
 826:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_AUTOBAUDRATE_MODE(USART_AutoBaudRate));
 1150              		.loc 1 826 3 view .LVU306
 827:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 828:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABRMODE);
 1151              		.loc 1 828 3 view .LVU307
 1152              		.loc 1 828 15 is_stmt 0 view .LVU308
 1153 0000 4268     		ldr	r2, [r0, #4]
 1154 0002 034B     		ldr	r3, .L76
 1155 0004 1A40     		ands	r2, r3
 1156 0006 4260     		str	r2, [r0, #4]
 829:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 |= USART_AutoBaudRate;
 1157              		.loc 1 829 3 is_stmt 1 view .LVU309
 1158              		.loc 1 829 15 is_stmt 0 view .LVU310
 1159 0008 4368     		ldr	r3, [r0, #4]
ARM GAS  /tmp/ccEZPSp0.s 			page 36


 1160 000a 0B43     		orrs	r3, r1
 1161 000c 4360     		str	r3, [r0, #4]
 830:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1162              		.loc 1 830 1 view .LVU311
 1163              		@ sp needed
 1164 000e 7047     		bx	lr
 1165              	.L77:
 1166              		.align	2
 1167              	.L76:
 1168 0010 FFFF9FFF 		.word	-6291457
 1169              		.cfi_endproc
 1170              	.LFE51:
 1172              		.section	.text.USART_AutoBaudRateNewRequest,"ax",%progbits
 1173              		.align	1
 1174              		.global	USART_AutoBaudRateNewRequest
 1175              		.syntax unified
 1176              		.code	16
 1177              		.thumb_func
 1178              		.fpu softvfp
 1180              	USART_AutoBaudRateNewRequest:
 1181              	.LVL72:
 1182              	.LFB52:
 831:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 832:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 833:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Requests a new AutoBaudRate detection.
 834:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
 835:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 836:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 837:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_AutoBaudRateNewRequest(USART_TypeDef* USARTx)
 838:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1183              		.loc 1 838 1 is_stmt 1 view -0
 1184              		.cfi_startproc
 1185              		@ args = 0, pretend = 0, frame = 0
 1186              		@ frame_needed = 0, uses_anonymous_args = 0
 1187              		@ link register save eliminated.
 839:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 840:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1188              		.loc 1 840 3 view .LVU313
 841:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 842:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->ISR &= (uint32_t)~((uint32_t)USART_FLAG_ABRF);
 1189              		.loc 1 842 3 view .LVU314
 1190              		.loc 1 842 15 is_stmt 0 view .LVU315
 1191 0000 C369     		ldr	r3, [r0, #28]
 1192 0002 024A     		ldr	r2, .L79
 1193 0004 1340     		ands	r3, r2
 1194 0006 C361     		str	r3, [r0, #28]
 843:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1195              		.loc 1 843 1 view .LVU316
 1196              		@ sp needed
 1197 0008 7047     		bx	lr
 1198              	.L80:
 1199 000a C046     		.align	2
 1200              	.L79:
 1201 000c FF7FFFFF 		.word	-32769
 1202              		.cfi_endproc
 1203              	.LFE52:
 1205              		.section	.text.USART_SendData,"ax",%progbits
ARM GAS  /tmp/ccEZPSp0.s 			page 37


 1206              		.align	1
 1207              		.global	USART_SendData
 1208              		.syntax unified
 1209              		.code	16
 1210              		.thumb_func
 1211              		.fpu softvfp
 1213              	USART_SendData:
 1214              	.LVL73:
 1215              	.LFB53:
 844:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 845:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 846:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
 847:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 848:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 849:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 850:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group4 Data transfers functions
 851:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   Data transfers functions 
 852:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
 853:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
 854:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 855:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                     ##### Data transfers functions #####
 856:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 857:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage 
 858:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          the USART data transfers.
 859:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] During an USART reception, data shifts in least significant bit first 
 860:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          through the RX pin. When a transmission is taking place, a write instruction to 
 861:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          the USART_TDR register stores the data in the shift register.
 862:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The read access of the USART_RDR register can be done using 
 863:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          the USART_ReceiveData() function and returns the RDR value.
 864:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          Whereas a write access to the USART_TDR can be done using USART_SendData()
 865:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          function and stores the written data into TDR.
 866:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 867:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
 868:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
 869:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 870:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 871:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 872:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 873:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 874:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  Data: the data to transmit.
 875:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 876:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 877:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 878:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1216              		.loc 1 878 1 is_stmt 1 view -0
 1217              		.cfi_startproc
 1218              		@ args = 0, pretend = 0, frame = 0
 1219              		@ frame_needed = 0, uses_anonymous_args = 0
 1220              		@ link register save eliminated.
 879:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 880:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1221              		.loc 1 880 3 view .LVU318
 881:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 1222              		.loc 1 881 3 view .LVU319
 882:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     
 883:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Transmit Data */
 884:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->TDR = (Data & (uint16_t)0x01FF);
ARM GAS  /tmp/ccEZPSp0.s 			page 38


 1223              		.loc 1 884 3 view .LVU320
 1224              		.loc 1 884 23 is_stmt 0 view .LVU321
 1225 0000 C905     		lsls	r1, r1, #23
 1226              	.LVL74:
 1227              		.loc 1 884 23 view .LVU322
 1228 0002 C90D     		lsrs	r1, r1, #23
 1229              		.loc 1 884 15 view .LVU323
 1230 0004 0185     		strh	r1, [r0, #40]
 885:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1231              		.loc 1 885 1 view .LVU324
 1232              		@ sp needed
 1233 0006 7047     		bx	lr
 1234              		.cfi_endproc
 1235              	.LFE53:
 1237              		.section	.text.USART_ReceiveData,"ax",%progbits
 1238              		.align	1
 1239              		.global	USART_ReceiveData
 1240              		.syntax unified
 1241              		.code	16
 1242              		.thumb_func
 1243              		.fpu softvfp
 1245              	USART_ReceiveData:
 1246              	.LVL75:
 1247              	.LFB54:
 886:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 887:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 888:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 889:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 890:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval The received data.
 891:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 892:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 893:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1248              		.loc 1 893 1 is_stmt 1 view -0
 1249              		.cfi_startproc
 1250              		@ args = 0, pretend = 0, frame = 0
 1251              		@ frame_needed = 0, uses_anonymous_args = 0
 1252              		@ link register save eliminated.
 894:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 895:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1253              		.loc 1 895 3 view .LVU326
 896:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 897:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Receive Data */
 898:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 1254              		.loc 1 898 3 view .LVU327
 1255              		.loc 1 898 27 is_stmt 0 view .LVU328
 1256 0000 808C     		ldrh	r0, [r0, #36]
 1257              	.LVL76:
 1258              		.loc 1 898 10 view .LVU329
 1259 0002 C005     		lsls	r0, r0, #23
 1260 0004 C00D     		lsrs	r0, r0, #23
 899:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1261              		.loc 1 899 1 view .LVU330
 1262              		@ sp needed
 1263 0006 7047     		bx	lr
 1264              		.cfi_endproc
 1265              	.LFE54:
 1267              		.section	.text.USART_SetAddress,"ax",%progbits
ARM GAS  /tmp/ccEZPSp0.s 			page 39


 1268              		.align	1
 1269              		.global	USART_SetAddress
 1270              		.syntax unified
 1271              		.code	16
 1272              		.thumb_func
 1273              		.fpu softvfp
 1275              	USART_SetAddress:
 1276              	.LVL77:
 1277              	.LFB55:
 900:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 901:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 902:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
 903:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 904:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 905:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group5 MultiProcessor Communication functions
 906:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   Multi-Processor Communication functions 
 907:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
 908:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
 909:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 910:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              ##### Multi-Processor Communication functions #####
 911:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 912:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART
 913:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          multiprocessor communication.
 914:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] For instance one of the USARTs can be the master, its TX output is
 915:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          connected to the RX input of the other USART. The others are slaves,
 916:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          their respective TX outputs are logically ANDed together and connected 
 917:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          to the RX input of the master. USART multiprocessor communication is 
 918:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          possible through the following procedure:
 919:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Baud rate, Word length = 9 bits, Stop bits, Parity, 
 920:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              Mode transmitter or Mode receiver and hardware flow control values 
 921:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              using the USART_Init() function.
 922:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the USART address using the USART_SetAddress() function.
 923:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the wake up methode (USART_WakeUp_IdleLine or 
 924:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              USART_WakeUp_AddressMark) using USART_WakeUpConfig() function only 
 925:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              for the slaves.
 926:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
 927:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enter the USART slaves in mute mode using USART_ReceiverWakeUpCmd() 
 928:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              function.
 929:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The USART Slave exit from mute mode when receive the wake up condition.
 930:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 931:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
 932:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
 933:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 934:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 935:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 936:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the address of the USART node.
 937:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 938:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
 939:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 940:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 941:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
 942:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1278              		.loc 1 942 1 is_stmt 1 view -0
 1279              		.cfi_startproc
 1280              		@ args = 0, pretend = 0, frame = 0
 1281              		@ frame_needed = 0, uses_anonymous_args = 0
 1282              		@ link register save eliminated.
ARM GAS  /tmp/ccEZPSp0.s 			page 40


 943:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 944:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1283              		.loc 1 944 3 view .LVU332
 945:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 946:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the USART address */
 947:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 1284              		.loc 1 947 3 view .LVU333
 1285              		.loc 1 947 15 is_stmt 0 view .LVU334
 1286 0000 4368     		ldr	r3, [r0, #4]
 1287 0002 1B02     		lsls	r3, r3, #8
 1288 0004 1B0A     		lsrs	r3, r3, #8
 1289 0006 4360     		str	r3, [r0, #4]
 948:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the USART address node */
 949:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 1290              		.loc 1 949 3 is_stmt 1 view .LVU335
 1291              		.loc 1 949 15 is_stmt 0 view .LVU336
 1292 0008 4368     		ldr	r3, [r0, #4]
 1293              		.loc 1 949 42 view .LVU337
 1294 000a 0906     		lsls	r1, r1, #24
 1295              	.LVL78:
 1296              		.loc 1 949 15 view .LVU338
 1297 000c 0B43     		orrs	r3, r1
 1298 000e 4360     		str	r3, [r0, #4]
 950:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1299              		.loc 1 950 1 view .LVU339
 1300              		@ sp needed
 1301 0010 7047     		bx	lr
 1302              		.cfi_endproc
 1303              	.LFE55:
 1305              		.section	.text.USART_MuteModeCmd,"ax",%progbits
 1306              		.align	1
 1307              		.global	USART_MuteModeCmd
 1308              		.syntax unified
 1309              		.code	16
 1310              		.thumb_func
 1311              		.fpu softvfp
 1313              	USART_MuteModeCmd:
 1314              	.LVL79:
 1315              	.LFB56:
 951:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 952:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 953:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's mute mode.
 954:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 955:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USART mute mode.
 956:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 957:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 958:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 959:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_MuteModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 960:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1316              		.loc 1 960 1 is_stmt 1 view -0
 1317              		.cfi_startproc
 1318              		@ args = 0, pretend = 0, frame = 0
 1319              		@ frame_needed = 0, uses_anonymous_args = 0
 1320              		@ link register save eliminated.
 961:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 962:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1321              		.loc 1 962 3 view .LVU341
ARM GAS  /tmp/ccEZPSp0.s 			page 41


 963:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 1322              		.loc 1 963 3 view .LVU342
 964:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 965:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1323              		.loc 1 965 3 view .LVU343
 1324              		.loc 1 965 6 is_stmt 0 view .LVU344
 1325 0000 0029     		cmp	r1, #0
 1326 0002 05D0     		beq	.L85
 966:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 967:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the USART mute mode by setting the MME bit in the CR1 register */
 968:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 |= USART_CR1_MME;
 1327              		.loc 1 968 5 is_stmt 1 view .LVU345
 1328              		.loc 1 968 17 is_stmt 0 view .LVU346
 1329 0004 0268     		ldr	r2, [r0]
 1330 0006 8023     		movs	r3, #128
 1331 0008 9B01     		lsls	r3, r3, #6
 1332 000a 1343     		orrs	r3, r2
 1333 000c 0360     		str	r3, [r0]
 1334              	.L84:
 969:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 970:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 971:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 972:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the USART mute mode by clearing the MME bit in the CR1 register */
 973:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_MME);
 974:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 975:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1335              		.loc 1 975 1 view .LVU347
 1336              		@ sp needed
 1337 000e 7047     		bx	lr
 1338              	.L85:
 973:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 1339              		.loc 1 973 5 is_stmt 1 view .LVU348
 973:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 1340              		.loc 1 973 17 is_stmt 0 view .LVU349
 1341 0010 0368     		ldr	r3, [r0]
 1342 0012 024A     		ldr	r2, .L87
 1343 0014 1340     		ands	r3, r2
 1344 0016 0360     		str	r3, [r0]
 1345              		.loc 1 975 1 view .LVU350
 1346 0018 F9E7     		b	.L84
 1347              	.L88:
 1348 001a C046     		.align	2
 1349              	.L87:
 1350 001c FFDFFFFF 		.word	-8193
 1351              		.cfi_endproc
 1352              	.LFE56:
 1354              		.section	.text.USART_MuteModeWakeUpConfig,"ax",%progbits
 1355              		.align	1
 1356              		.global	USART_MuteModeWakeUpConfig
 1357              		.syntax unified
 1358              		.code	16
 1359              		.thumb_func
 1360              		.fpu softvfp
 1362              	USART_MuteModeWakeUpConfig:
 1363              	.LVL80:
 1364              	.LFB57:
 976:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
ARM GAS  /tmp/ccEZPSp0.s 			page 42


 977:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 978:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Selects the USART WakeUp method from mute mode.
 979:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 980:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
 981:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be one of the following values:
 982:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
 983:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
 984:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 985:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 986:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_MuteModeWakeUpConfig(USART_TypeDef* USARTx, uint32_t USART_WakeUp)
 987:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1365              		.loc 1 987 1 is_stmt 1 view -0
 1366              		.cfi_startproc
 1367              		@ args = 0, pretend = 0, frame = 0
 1368              		@ frame_needed = 0, uses_anonymous_args = 0
 1369              		@ link register save eliminated.
 988:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 989:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1370              		.loc 1 989 3 view .LVU352
 990:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_MUTEMODE_WAKEUP(USART_WakeUp));
 1371              		.loc 1 990 3 view .LVU353
 991:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 992:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_WAKE);
 1372              		.loc 1 992 3 view .LVU354
 1373              		.loc 1 992 15 is_stmt 0 view .LVU355
 1374 0000 0268     		ldr	r2, [r0]
 1375 0002 034B     		ldr	r3, .L90
 1376 0004 1A40     		ands	r2, r3
 1377 0006 0260     		str	r2, [r0]
 993:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 1378              		.loc 1 993 3 is_stmt 1 view .LVU356
 1379              		.loc 1 993 15 is_stmt 0 view .LVU357
 1380 0008 0368     		ldr	r3, [r0]
 1381 000a 0B43     		orrs	r3, r1
 1382 000c 0360     		str	r3, [r0]
 994:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1383              		.loc 1 994 1 view .LVU358
 1384              		@ sp needed
 1385 000e 7047     		bx	lr
 1386              	.L91:
 1387              		.align	2
 1388              	.L90:
 1389 0010 FFF7FFFF 		.word	-2049
 1390              		.cfi_endproc
 1391              	.LFE57:
 1393              		.section	.text.USART_AddressDetectionConfig,"ax",%progbits
 1394              		.align	1
 1395              		.global	USART_AddressDetectionConfig
 1396              		.syntax unified
 1397              		.code	16
 1398              		.thumb_func
 1399              		.fpu softvfp
 1401              	USART_AddressDetectionConfig:
 1402              	.LVL81:
 1403              	.LFB58:
 995:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 996:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
ARM GAS  /tmp/ccEZPSp0.s 			page 43


 997:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Configure the the USART Address detection length.
 998:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
 999:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_AddressLength: specifies the USART address length detection.
1000:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be one of the following values:
1001:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_AddressLength_4b: 4-bit address length detection 
1002:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_AddressLength_7b: 7-bit address length detection 
1003:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1004:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1005:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_AddressDetectionConfig(USART_TypeDef* USARTx, uint32_t USART_AddressLength)
1006:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1404              		.loc 1 1006 1 is_stmt 1 view -0
 1405              		.cfi_startproc
 1406              		@ args = 0, pretend = 0, frame = 0
 1407              		@ frame_needed = 0, uses_anonymous_args = 0
 1408              		@ link register save eliminated.
1007:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1008:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1409              		.loc 1 1008 3 view .LVU360
1009:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ADDRESS_DETECTION(USART_AddressLength));
 1410              		.loc 1 1009 3 view .LVU361
1010:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1011:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADDM7);
 1411              		.loc 1 1011 3 view .LVU362
 1412              		.loc 1 1011 15 is_stmt 0 view .LVU363
 1413 0000 4268     		ldr	r2, [r0, #4]
 1414 0002 1023     		movs	r3, #16
 1415 0004 9A43     		bics	r2, r3
 1416 0006 4260     		str	r2, [r0, #4]
1012:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 |= USART_AddressLength;
 1417              		.loc 1 1012 3 is_stmt 1 view .LVU364
 1418              		.loc 1 1012 15 is_stmt 0 view .LVU365
 1419 0008 4368     		ldr	r3, [r0, #4]
 1420 000a 0B43     		orrs	r3, r1
 1421 000c 4360     		str	r3, [r0, #4]
1013:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1422              		.loc 1 1013 1 view .LVU366
 1423              		@ sp needed
 1424 000e 7047     		bx	lr
 1425              		.cfi_endproc
 1426              	.LFE58:
 1428              		.section	.text.USART_LINBreakDetectLengthConfig,"ax",%progbits
 1429              		.align	1
 1430              		.global	USART_LINBreakDetectLengthConfig
 1431              		.syntax unified
 1432              		.code	16
 1433              		.thumb_func
 1434              		.fpu softvfp
 1436              	USART_LINBreakDetectLengthConfig:
 1437              	.LVL82:
 1438              	.LFB59:
1014:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1015:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1016:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1017:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1018:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1019:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group6 LIN mode functions
1020:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   LIN mode functions 
ARM GAS  /tmp/ccEZPSp0.s 			page 44


1021:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
1022:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
1023:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1024:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                        ##### LIN mode functions #####
1025:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1026:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART 
1027:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          LIN Mode communication.
1028:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In LIN mode, 8-bit data format with 1 stop bit is required in accordance 
1029:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          with the LIN standard.
1030:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] Only this LIN Feature is supported by the USART IP:
1031:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) LIN Master Synchronous Break send capability and LIN slave break 
1032:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              detection capability :  13-bit break generation and 10/11 bit break 
1033:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              detection.
1034:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] USART LIN Master transmitter communication is possible through the 
1035:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          following procedure:
1036:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
1037:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              Mode transmitter or Mode receiver and hardware flow control values 
1038:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              using the USART_Init() function.
1039:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the LIN mode using the USART_LINCmd() function.
1040:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1041:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Send the break character using USART_SendBreak() function.
1042:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] USART LIN Master receiver communication is possible through the 
1043:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          following procedure:
1044:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
1045:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              Mode transmitter or Mode receiver and hardware flow control values 
1046:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              using the USART_Init() function.
1047:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the break detection length 
1048:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              using the USART_LINBreakDetectLengthConfig() function.
1049:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the LIN mode using the USART_LINCmd() function.
1050:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          -@- In LIN mode, the following bits must be kept cleared:
1051:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (+@) CLKEN in the USART_CR2 register.
1052:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (+@) STOP[1:0], SCEN, HDSEL and IREN in the USART_CR3 register.
1053:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1054:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1055:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1056:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1057:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1058:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1059:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1060:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the USART LIN Break detection length.
1061:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
1062:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
1063:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be one of the following values:
1064:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
1065:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
1066:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1067:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1068:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint32_t USART_LINBreakDetectLength)
1069:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1439              		.loc 1 1069 1 is_stmt 1 view -0
 1440              		.cfi_startproc
 1441              		@ args = 0, pretend = 0, frame = 0
 1442              		@ frame_needed = 0, uses_anonymous_args = 0
 1443              		@ link register save eliminated.
1070:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1071:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 1444              		.loc 1 1071 3 view .LVU368
ARM GAS  /tmp/ccEZPSp0.s 			page 45


1072:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
 1445              		.loc 1 1072 3 view .LVU369
1073:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1074:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LBDL);
 1446              		.loc 1 1074 3 view .LVU370
 1447              		.loc 1 1074 15 is_stmt 0 view .LVU371
 1448 0000 4268     		ldr	r2, [r0, #4]
 1449 0002 2023     		movs	r3, #32
 1450 0004 9A43     		bics	r2, r3
 1451 0006 4260     		str	r2, [r0, #4]
1075:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 1452              		.loc 1 1075 3 is_stmt 1 view .LVU372
 1453              		.loc 1 1075 15 is_stmt 0 view .LVU373
 1454 0008 4368     		ldr	r3, [r0, #4]
 1455 000a 0B43     		orrs	r3, r1
 1456 000c 4360     		str	r3, [r0, #4]
1076:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1457              		.loc 1 1076 1 view .LVU374
 1458              		@ sp needed
 1459 000e 7047     		bx	lr
 1460              		.cfi_endproc
 1461              	.LFE59:
 1463              		.section	.text.USART_LINCmd,"ax",%progbits
 1464              		.align	1
 1465              		.global	USART_LINCmd
 1466              		.syntax unified
 1467              		.code	16
 1468              		.thumb_func
 1469              		.fpu softvfp
 1471              	USART_LINCmd:
 1472              	.LVL83:
 1473              	.LFB60:
1077:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1078:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1079:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's LIN mode.
1080:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
1081:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USART LIN mode.
1082:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
1083:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1084:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1085:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
1086:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1474              		.loc 1 1086 1 is_stmt 1 view -0
 1475              		.cfi_startproc
 1476              		@ args = 0, pretend = 0, frame = 0
 1477              		@ frame_needed = 0, uses_anonymous_args = 0
 1478              		@ link register save eliminated.
1087:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1088:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 1479              		.loc 1 1088 3 view .LVU376
1089:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1480              		.loc 1 1089 3 view .LVU377
1090:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1091:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1481              		.loc 1 1091 3 view .LVU378
 1482              		.loc 1 1091 6 is_stmt 0 view .LVU379
 1483 0000 0029     		cmp	r1, #0
ARM GAS  /tmp/ccEZPSp0.s 			page 46


 1484 0002 05D0     		beq	.L95
1092:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1093:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
1094:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_CR2_LINEN;
 1485              		.loc 1 1094 5 is_stmt 1 view .LVU380
 1486              		.loc 1 1094 17 is_stmt 0 view .LVU381
 1487 0004 4268     		ldr	r2, [r0, #4]
 1488 0006 8023     		movs	r3, #128
 1489 0008 DB01     		lsls	r3, r3, #7
 1490 000a 1343     		orrs	r3, r2
 1491 000c 4360     		str	r3, [r0, #4]
 1492              	.L94:
1095:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1096:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1097:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1098:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
1099:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LINEN);
1100:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1101:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1493              		.loc 1 1101 1 view .LVU382
 1494              		@ sp needed
 1495 000e 7047     		bx	lr
 1496              	.L95:
1099:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 1497              		.loc 1 1099 5 is_stmt 1 view .LVU383
1099:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 1498              		.loc 1 1099 17 is_stmt 0 view .LVU384
 1499 0010 4368     		ldr	r3, [r0, #4]
 1500 0012 024A     		ldr	r2, .L97
 1501 0014 1340     		ands	r3, r2
 1502 0016 4360     		str	r3, [r0, #4]
 1503              		.loc 1 1101 1 view .LVU385
 1504 0018 F9E7     		b	.L94
 1505              	.L98:
 1506 001a C046     		.align	2
 1507              	.L97:
 1508 001c FFBFFFFF 		.word	-16385
 1509              		.cfi_endproc
 1510              	.LFE60:
 1512              		.section	.text.USART_HalfDuplexCmd,"ax",%progbits
 1513              		.align	1
 1514              		.global	USART_HalfDuplexCmd
 1515              		.syntax unified
 1516              		.code	16
 1517              		.thumb_func
 1518              		.fpu softvfp
 1520              	USART_HalfDuplexCmd:
 1521              	.LVL84:
 1522              	.LFB61:
1102:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1103:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1104:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1105:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1106:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1107:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group7 Halfduplex mode function
1108:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   Half-duplex mode function 
1109:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
ARM GAS  /tmp/ccEZPSp0.s 			page 47


1110:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
1111:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1112:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                    ##### Half-duplex mode function #####
1113:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1114:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART
1115:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          Half-duplex communication.
1116:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The USART can be configured to follow a single-wire half-duplex protocol 
1117:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          where the TX and RX lines are internally connected.
1118:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] USART Half duplex communication is possible through the following procedure:
1119:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Baud rate, Word length, Stop bits, Parity, Mode transmitter 
1120:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              or Mode receiver and hardware flow control values using the USART_Init()
1121:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             function.
1122:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the USART address using the USART_SetAddress() function.
1123:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the half duplex mode using USART_HalfDuplexCmd() function.
1124:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1125:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          -@- The RX pin is no longer used.
1126:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          -@- In Half-duplex mode the following bits must be kept cleared:
1127:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (+@) LINEN and CLKEN bits in the USART_CR2 register.
1128:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (+@) SCEN and IREN bits in the USART_CR3 register.
1129:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1130:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1131:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1132:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1133:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1134:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1135:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's Half Duplex communication.
1136:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1137:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USART Communication.
1138:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
1139:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1140:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1141:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
1142:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1523              		.loc 1 1142 1 is_stmt 1 view -0
 1524              		.cfi_startproc
 1525              		@ args = 0, pretend = 0, frame = 0
 1526              		@ frame_needed = 0, uses_anonymous_args = 0
 1527              		@ link register save eliminated.
1143:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1144:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1528              		.loc 1 1144 3 view .LVU387
1145:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1529              		.loc 1 1145 3 view .LVU388
1146:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1147:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1530              		.loc 1 1147 3 view .LVU389
 1531              		.loc 1 1147 6 is_stmt 0 view .LVU390
 1532 0000 0029     		cmp	r1, #0
 1533 0002 04D0     		beq	.L100
1148:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1149:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
1150:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_CR3_HDSEL;
 1534              		.loc 1 1150 5 is_stmt 1 view .LVU391
 1535              		.loc 1 1150 17 is_stmt 0 view .LVU392
 1536 0004 8368     		ldr	r3, [r0, #8]
 1537 0006 0822     		movs	r2, #8
 1538 0008 1343     		orrs	r3, r2
ARM GAS  /tmp/ccEZPSp0.s 			page 48


 1539 000a 8360     		str	r3, [r0, #8]
 1540              	.L99:
1151:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1152:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1153:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1154:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
1155:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_HDSEL);
1156:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1157:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1541              		.loc 1 1157 1 view .LVU393
 1542              		@ sp needed
 1543 000c 7047     		bx	lr
 1544              	.L100:
1155:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 1545              		.loc 1 1155 5 is_stmt 1 view .LVU394
1155:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 1546              		.loc 1 1155 17 is_stmt 0 view .LVU395
 1547 000e 8368     		ldr	r3, [r0, #8]
 1548 0010 0822     		movs	r2, #8
 1549 0012 9343     		bics	r3, r2
 1550 0014 8360     		str	r3, [r0, #8]
 1551              		.loc 1 1157 1 view .LVU396
 1552 0016 F9E7     		b	.L99
 1553              		.cfi_endproc
 1554              	.LFE61:
 1556              		.section	.text.USART_SetGuardTime,"ax",%progbits
 1557              		.align	1
 1558              		.global	USART_SetGuardTime
 1559              		.syntax unified
 1560              		.code	16
 1561              		.thumb_func
 1562              		.fpu softvfp
 1564              	USART_SetGuardTime:
 1565              	.LVL85:
 1566              	.LFB62:
1158:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1159:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1160:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1161:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1162:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1163:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1164:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group8 Smartcard mode functions
1165:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   Smartcard mode functions 
1166:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
1167:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
1168:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1169:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                      ##### Smartcard mode functions #####
1170:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1171:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART
1172:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          Smartcard communication.
1173:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The Smartcard interface is designed to support asynchronous protocol 
1174:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          Smartcards as defined in the ISO 7816-3 standard. The USART can provide 
1175:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          a clock to the smartcard through the SCLK output. In smartcard mode, 
1176:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          SCLK is not associated to the communication but is simply derived from 
1177:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          the internal peripheral input clock through a 5-bit prescaler.
1178:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] Smartcard communication is possible through the following procedure:
1179:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the Smartcard Prsecaler using the USART_SetPrescaler() 
ARM GAS  /tmp/ccEZPSp0.s 			page 49


1180:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              function.
1181:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the Smartcard Guard Time using the USART_SetGuardTime() 
1182:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              function.
1183:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the USART clock using the USART_ClockInit() function as following:
1184:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) USART Clock enabled.
1185:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) USART CPOL Low.
1186:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) USART CPHA on first edge.
1187:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) USART Last Bit Clock Enabled.
1188:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Smartcard interface using the USART_Init() function as 
1189:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              following:
1190:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) Word Length = 9 Bits.
1191:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) 1.5 Stop Bit.
1192:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) Even parity.
1193:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) BaudRate = 12096 baud.
1194:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) Hardware flow control disabled (RTS and CTS signals).
1195:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) Tx and Rx enabled
1196:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Optionally you can enable the parity error interrupt using 
1197:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              the USART_ITConfig() function.
1198:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the Smartcard NACK using the USART_SmartCardNACKCmd() function.
1199:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the Smartcard interface using the USART_SmartCardCmd() function.
1200:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1201:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] 
1202:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   Please refer to the ISO 7816-3 specification for more details.
1203:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] 
1204:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (@) It is also possible to choose 0.5 stop bit for receiving but it is 
1205:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              recommended to use 1.5 stop bits for both transmitting and receiving 
1206:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              to avoid switching between the two configurations.
1207:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (@) In smartcard mode, the following bits must be kept cleared:
1208:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (+@) LINEN bit in the USART_CR2 register.
1209:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (+@) HDSEL and IREN bits in the USART_CR3 register.
1210:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1211:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1212:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1213:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1214:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1215:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1216:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the specified USART guard time.
1217:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
1218:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_GuardTime: specifies the guard time.
1219:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1220:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1221:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
1222:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {    
 1567              		.loc 1 1222 1 is_stmt 1 view -0
 1568              		.cfi_startproc
 1569              		@ args = 0, pretend = 0, frame = 0
 1570              		@ frame_needed = 0, uses_anonymous_args = 0
 1571              		@ link register save eliminated.
1223:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1224:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 1572              		.loc 1 1224 3 view .LVU398
1225:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1226:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the USART Guard time */
1227:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 1573              		.loc 1 1227 3 view .LVU399
 1574              		.loc 1 1227 16 is_stmt 0 view .LVU400
 1575 0000 038A     		ldrh	r3, [r0, #16]
ARM GAS  /tmp/ccEZPSp0.s 			page 50


 1576 0002 FF22     		movs	r2, #255
 1577 0004 1340     		ands	r3, r2
 1578 0006 0382     		strh	r3, [r0, #16]
1228:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the USART guard time */
1229:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 1579              		.loc 1 1229 3 is_stmt 1 view .LVU401
 1580              		.loc 1 1229 16 is_stmt 0 view .LVU402
 1581 0008 038A     		ldrh	r3, [r0, #16]
 1582              		.loc 1 1229 19 view .LVU403
 1583 000a 0902     		lsls	r1, r1, #8
 1584              	.LVL86:
 1585              		.loc 1 1229 16 view .LVU404
 1586 000c 0B43     		orrs	r3, r1
 1587 000e 0382     		strh	r3, [r0, #16]
1230:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1588              		.loc 1 1230 1 view .LVU405
 1589              		@ sp needed
 1590 0010 7047     		bx	lr
 1591              		.cfi_endproc
 1592              	.LFE62:
 1594              		.section	.text.USART_SmartCardCmd,"ax",%progbits
 1595              		.align	1
 1596              		.global	USART_SmartCardCmd
 1597              		.syntax unified
 1598              		.code	16
 1599              		.thumb_func
 1600              		.fpu softvfp
 1602              	USART_SmartCardCmd:
 1603              	.LVL87:
 1604              	.LFB63:
1231:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1232:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1233:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's Smart Card mode.
1234:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
1235:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the Smart Card mode.
1236:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.      
1237:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1238:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1239:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
1240:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1605              		.loc 1 1240 1 is_stmt 1 view -0
 1606              		.cfi_startproc
 1607              		@ args = 0, pretend = 0, frame = 0
 1608              		@ frame_needed = 0, uses_anonymous_args = 0
 1609              		@ link register save eliminated.
1241:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1242:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 1610              		.loc 1 1242 3 view .LVU407
1243:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1611              		.loc 1 1243 3 view .LVU408
1244:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1612              		.loc 1 1244 3 view .LVU409
 1613              		.loc 1 1244 6 is_stmt 0 view .LVU410
 1614 0000 0029     		cmp	r1, #0
 1615 0002 04D0     		beq	.L104
1245:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1246:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
ARM GAS  /tmp/ccEZPSp0.s 			page 51


1247:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_CR3_SCEN;
 1616              		.loc 1 1247 5 is_stmt 1 view .LVU411
 1617              		.loc 1 1247 17 is_stmt 0 view .LVU412
 1618 0004 8368     		ldr	r3, [r0, #8]
 1619 0006 2022     		movs	r2, #32
 1620 0008 1343     		orrs	r3, r2
 1621 000a 8360     		str	r3, [r0, #8]
 1622              	.L103:
1248:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1249:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1250:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1251:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
1252:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCEN);
1253:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1254:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1623              		.loc 1 1254 1 view .LVU413
 1624              		@ sp needed
 1625 000c 7047     		bx	lr
 1626              	.L104:
1252:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 1627              		.loc 1 1252 5 is_stmt 1 view .LVU414
1252:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 1628              		.loc 1 1252 17 is_stmt 0 view .LVU415
 1629 000e 8368     		ldr	r3, [r0, #8]
 1630 0010 2022     		movs	r2, #32
 1631 0012 9343     		bics	r3, r2
 1632 0014 8360     		str	r3, [r0, #8]
 1633              		.loc 1 1254 1 view .LVU416
 1634 0016 F9E7     		b	.L103
 1635              		.cfi_endproc
 1636              	.LFE63:
 1638              		.section	.text.USART_SmartCardNACKCmd,"ax",%progbits
 1639              		.align	1
 1640              		.global	USART_SmartCardNACKCmd
 1641              		.syntax unified
 1642              		.code	16
 1643              		.thumb_func
 1644              		.fpu softvfp
 1646              	USART_SmartCardNACKCmd:
 1647              	.LVL88:
 1648              	.LFB64:
1255:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1256:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1257:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables NACK transmission.
1258:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
1259:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the NACK transmission.
1260:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.  
1261:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1262:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1263:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
1264:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1649              		.loc 1 1264 1 is_stmt 1 view -0
 1650              		.cfi_startproc
 1651              		@ args = 0, pretend = 0, frame = 0
 1652              		@ frame_needed = 0, uses_anonymous_args = 0
 1653              		@ link register save eliminated.
1265:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
ARM GAS  /tmp/ccEZPSp0.s 			page 52


1266:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx)); 
 1654              		.loc 1 1266 3 view .LVU418
1267:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1655              		.loc 1 1267 3 view .LVU419
1268:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1656              		.loc 1 1268 3 view .LVU420
 1657              		.loc 1 1268 6 is_stmt 0 view .LVU421
 1658 0000 0029     		cmp	r1, #0
 1659 0002 04D0     		beq	.L107
1269:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1270:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
1271:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_CR3_NACK;
 1660              		.loc 1 1271 5 is_stmt 1 view .LVU422
 1661              		.loc 1 1271 17 is_stmt 0 view .LVU423
 1662 0004 8368     		ldr	r3, [r0, #8]
 1663 0006 1022     		movs	r2, #16
 1664 0008 1343     		orrs	r3, r2
 1665 000a 8360     		str	r3, [r0, #8]
 1666              	.L106:
1272:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1273:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1274:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1275:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
1276:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_NACK);
1277:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1278:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1667              		.loc 1 1278 1 view .LVU424
 1668              		@ sp needed
 1669 000c 7047     		bx	lr
 1670              	.L107:
1276:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 1671              		.loc 1 1276 5 is_stmt 1 view .LVU425
1276:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 1672              		.loc 1 1276 17 is_stmt 0 view .LVU426
 1673 000e 8368     		ldr	r3, [r0, #8]
 1674 0010 1022     		movs	r2, #16
 1675 0012 9343     		bics	r3, r2
 1676 0014 8360     		str	r3, [r0, #8]
 1677              		.loc 1 1278 1 view .LVU427
 1678 0016 F9E7     		b	.L106
 1679              		.cfi_endproc
 1680              	.LFE64:
 1682              		.section	.text.USART_SetAutoRetryCount,"ax",%progbits
 1683              		.align	1
 1684              		.global	USART_SetAutoRetryCount
 1685              		.syntax unified
 1686              		.code	16
 1687              		.thumb_func
 1688              		.fpu softvfp
 1690              	USART_SetAutoRetryCount:
 1691              	.LVL89:
 1692              	.LFB65:
1279:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1280:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1281:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the Smart Card number of retries in transmit and receive.
1282:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
1283:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_AutoCount: specifies the Smart Card auto retry count.
ARM GAS  /tmp/ccEZPSp0.s 			page 53


1284:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1285:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1286:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetAutoRetryCount(USART_TypeDef* USARTx, uint8_t USART_AutoCount)
1287:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {    
 1693              		.loc 1 1287 1 is_stmt 1 view -0
 1694              		.cfi_startproc
 1695              		@ args = 0, pretend = 0, frame = 0
 1696              		@ frame_needed = 0, uses_anonymous_args = 0
 1697              		@ link register save eliminated.
1288:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1289:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 1698              		.loc 1 1289 3 view .LVU429
1290:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_AUTO_RETRY_COUNTER(USART_AutoCount));
 1699              		.loc 1 1290 3 view .LVU430
1291:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the USART auto retry count */
1292:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 1700              		.loc 1 1292 3 view .LVU431
 1701              		.loc 1 1292 15 is_stmt 0 view .LVU432
 1702 0000 8368     		ldr	r3, [r0, #8]
 1703 0002 044A     		ldr	r2, .L110
 1704 0004 1340     		ands	r3, r2
 1705 0006 8360     		str	r3, [r0, #8]
1293:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the USART auto retry count*/
1294:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 1706              		.loc 1 1294 3 is_stmt 1 view .LVU433
 1707              		.loc 1 1294 15 is_stmt 0 view .LVU434
 1708 0008 8368     		ldr	r3, [r0, #8]
 1709              		.loc 1 1294 18 view .LVU435
 1710 000a 4904     		lsls	r1, r1, #17
 1711              	.LVL90:
 1712              		.loc 1 1294 15 view .LVU436
 1713 000c 0B43     		orrs	r3, r1
 1714 000e 8360     		str	r3, [r0, #8]
1295:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1715              		.loc 1 1295 1 view .LVU437
 1716              		@ sp needed
 1717 0010 7047     		bx	lr
 1718              	.L111:
 1719 0012 C046     		.align	2
 1720              	.L110:
 1721 0014 FFFFF1FF 		.word	-917505
 1722              		.cfi_endproc
 1723              	.LFE65:
 1725              		.section	.text.USART_SetBlockLength,"ax",%progbits
 1726              		.align	1
 1727              		.global	USART_SetBlockLength
 1728              		.syntax unified
 1729              		.code	16
 1730              		.thumb_func
 1731              		.fpu softvfp
 1733              	USART_SetBlockLength:
 1734              	.LVL91:
 1735              	.LFB66:
1296:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1297:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1298:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the Smart Card Block length.
1299:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
ARM GAS  /tmp/ccEZPSp0.s 			page 54


1300:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_BlockLength: specifies the Smart Card block length.
1301:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1302:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1303:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetBlockLength(USART_TypeDef* USARTx, uint8_t USART_BlockLength)
1304:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {    
 1736              		.loc 1 1304 1 is_stmt 1 view -0
 1737              		.cfi_startproc
 1738              		@ args = 0, pretend = 0, frame = 0
 1739              		@ frame_needed = 0, uses_anonymous_args = 0
 1740              		@ link register save eliminated.
1305:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1306:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 1741              		.loc 1 1306 3 view .LVU439
1307:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1308:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the Smart card block length */
1309:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 1742              		.loc 1 1309 3 view .LVU440
 1743              		.loc 1 1309 16 is_stmt 0 view .LVU441
 1744 0000 4369     		ldr	r3, [r0, #20]
 1745 0002 1B02     		lsls	r3, r3, #8
 1746 0004 1B0A     		lsrs	r3, r3, #8
 1747 0006 4361     		str	r3, [r0, #20]
1310:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the Smart Card block length */
1311:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 1748              		.loc 1 1311 3 is_stmt 1 view .LVU442
 1749              		.loc 1 1311 16 is_stmt 0 view .LVU443
 1750 0008 4369     		ldr	r3, [r0, #20]
 1751              		.loc 1 1311 19 view .LVU444
 1752 000a 0906     		lsls	r1, r1, #24
 1753              	.LVL92:
 1754              		.loc 1 1311 16 view .LVU445
 1755 000c 0B43     		orrs	r3, r1
 1756 000e 4361     		str	r3, [r0, #20]
1312:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1757              		.loc 1 1312 1 view .LVU446
 1758              		@ sp needed
 1759 0010 7047     		bx	lr
 1760              		.cfi_endproc
 1761              	.LFE66:
 1763              		.section	.text.USART_IrDAConfig,"ax",%progbits
 1764              		.align	1
 1765              		.global	USART_IrDAConfig
 1766              		.syntax unified
 1767              		.code	16
 1768              		.thumb_func
 1769              		.fpu softvfp
 1771              	USART_IrDAConfig:
 1772              	.LVL93:
 1773              	.LFB67:
1313:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1314:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1315:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1316:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1317:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1318:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group9 IrDA mode functions
1319:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   IrDA mode functions 
1320:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
ARM GAS  /tmp/ccEZPSp0.s 			page 55


1321:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
1322:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1323:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                         ##### IrDA mode functions #####
1324:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1325:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART
1326:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          IrDA communication.
1327:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] IrDA is a half duplex communication protocol. If the Transmitter is busy, 
1328:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          any data on the IrDA receive line will be ignored by the IrDA decoder 
1329:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          and if the Receiver is busy, data on the TX from the USART to IrDA will 
1330:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          not be encoded by IrDA. While receiving data, transmission should be 
1331:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          avoided as the data to be transmitted could be corrupted.
1332:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] IrDA communication is possible through the following procedure:
1333:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Baud rate, Word length = 8 bits, Stop bits, Parity, 
1334:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              Transmitter/Receiver modes and hardware flow control values using 
1335:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              the USART_Init() function.
1336:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the IrDA pulse width by configuring the prescaler using  
1337:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              the USART_SetPrescaler() function.
1338:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the IrDA  USART_IrDAMode_LowPower or USART_IrDAMode_Normal 
1339:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              mode using the USART_IrDAConfig() function.
1340:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the IrDA using the USART_IrDACmd() function.
1341:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.         
1342:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..]
1343:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     (@) A pulse of width less than two and greater than one PSC period(s) may or 
1344:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         may not be rejected.
1345:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     (@) The receiver set up time should be managed by software. The IrDA physical 
1346:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         layer specification specifies a minimum of 10 ms delay between 
1347:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         transmission and reception (IrDA is a half duplex protocol).
1348:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     (@) In IrDA mode, the following bits must be kept cleared:
1349:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (+@) LINEN, STOP and CLKEN bits in the USART_CR2 register.
1350:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (+@) SCEN and HDSEL bits in the USART_CR3 register.
1351:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1352:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1353:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1354:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1355:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1356:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1357:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Configures the USART's IrDA interface.
1358:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
1359:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
1360:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be one of the following values:
1361:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IrDAMode_LowPower
1362:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IrDAMode_Normal
1363:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1364:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1365:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint32_t USART_IrDAMode)
1366:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1774              		.loc 1 1366 1 is_stmt 1 view -0
 1775              		.cfi_startproc
 1776              		@ args = 0, pretend = 0, frame = 0
 1777              		@ frame_needed = 0, uses_anonymous_args = 0
 1778              		@ link register save eliminated.
1367:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1368:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 1779              		.loc 1 1368 3 view .LVU448
1369:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
 1780              		.loc 1 1369 3 view .LVU449
1370:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
ARM GAS  /tmp/ccEZPSp0.s 			page 56


1371:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IRLP);
 1781              		.loc 1 1371 3 view .LVU450
 1782              		.loc 1 1371 15 is_stmt 0 view .LVU451
 1783 0000 8268     		ldr	r2, [r0, #8]
 1784 0002 0423     		movs	r3, #4
 1785 0004 9A43     		bics	r2, r3
 1786 0006 8260     		str	r2, [r0, #8]
1372:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 1787              		.loc 1 1372 3 is_stmt 1 view .LVU452
 1788              		.loc 1 1372 15 is_stmt 0 view .LVU453
 1789 0008 8368     		ldr	r3, [r0, #8]
 1790 000a 0B43     		orrs	r3, r1
 1791 000c 8360     		str	r3, [r0, #8]
1373:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1792              		.loc 1 1373 1 view .LVU454
 1793              		@ sp needed
 1794 000e 7047     		bx	lr
 1795              		.cfi_endproc
 1796              	.LFE67:
 1798              		.section	.text.USART_IrDACmd,"ax",%progbits
 1799              		.align	1
 1800              		.global	USART_IrDACmd
 1801              		.syntax unified
 1802              		.code	16
 1803              		.thumb_func
 1804              		.fpu softvfp
 1806              	USART_IrDACmd:
 1807              	.LVL94:
 1808              	.LFB68:
1374:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1375:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1376:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
1377:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 to select the USART peripheral.
1378:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the IrDA mode.
1379:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
1380:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1381:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1382:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
1383:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1809              		.loc 1 1383 1 is_stmt 1 view -0
 1810              		.cfi_startproc
 1811              		@ args = 0, pretend = 0, frame = 0
 1812              		@ frame_needed = 0, uses_anonymous_args = 0
 1813              		@ link register save eliminated.
1384:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1385:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_1_PERIPH(USARTx));
 1814              		.loc 1 1385 3 view .LVU456
1386:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1815              		.loc 1 1386 3 view .LVU457
1387:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1388:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1816              		.loc 1 1388 3 view .LVU458
 1817              		.loc 1 1388 6 is_stmt 0 view .LVU459
 1818 0000 0029     		cmp	r1, #0
 1819 0002 04D0     		beq	.L115
1389:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1390:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
ARM GAS  /tmp/ccEZPSp0.s 			page 57


1391:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_CR3_IREN;
 1820              		.loc 1 1391 5 is_stmt 1 view .LVU460
 1821              		.loc 1 1391 17 is_stmt 0 view .LVU461
 1822 0004 8368     		ldr	r3, [r0, #8]
 1823 0006 0222     		movs	r2, #2
 1824 0008 1343     		orrs	r3, r2
 1825 000a 8360     		str	r3, [r0, #8]
 1826              	.L114:
1392:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1393:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1394:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1395:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
1396:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IREN);
1397:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1398:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1827              		.loc 1 1398 1 view .LVU462
 1828              		@ sp needed
 1829 000c 7047     		bx	lr
 1830              	.L115:
1396:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 1831              		.loc 1 1396 5 is_stmt 1 view .LVU463
1396:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 1832              		.loc 1 1396 17 is_stmt 0 view .LVU464
 1833 000e 8368     		ldr	r3, [r0, #8]
 1834 0010 0222     		movs	r2, #2
 1835 0012 9343     		bics	r3, r2
 1836 0014 8360     		str	r3, [r0, #8]
 1837              		.loc 1 1398 1 view .LVU465
 1838 0016 F9E7     		b	.L114
 1839              		.cfi_endproc
 1840              	.LFE68:
 1842              		.section	.text.USART_DECmd,"ax",%progbits
 1843              		.align	1
 1844              		.global	USART_DECmd
 1845              		.syntax unified
 1846              		.code	16
 1847              		.thumb_func
 1848              		.fpu softvfp
 1850              	USART_DECmd:
 1851              	.LVL95:
 1852              	.LFB69:
1399:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1400:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1401:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1402:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1403:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group10 RS485 mode function
1404:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief  RS485 mode function 
1405:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
1406:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim  
1407:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1408:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                         ##### RS485 mode functions #####
1409:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1410:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART
1411:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          RS485 flow control.
1412:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] RS485 flow control (Driver enable feature) handling is possible through
1413:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          the following procedure:
1414:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Baud rate, Word length = 8 bits, Stop bits, Parity, 
ARM GAS  /tmp/ccEZPSp0.s 			page 58


1415:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              Transmitter/Receiver modes and hardware flow control values using 
1416:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              the USART_Init() function.
1417:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the Driver Enable using the USART_DECmd() function.
1418:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the Driver Enable polarity using the USART_DEPolarityConfig()
1419:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              function.
1420:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the Driver Enable assertion time using USART_SetDEAssertionTime() 
1421:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              function and deassertion time using the USART_SetDEDeassertionTime()
1422:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              function.    
1423:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1424:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****       -@-  
1425:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        (+@) The assertion and dessertion times are expressed in sample time units (1/8 or 
1426:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             1/16 bit time, depending on the oversampling rate).
1427:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        
1428:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1429:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1430:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1431:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1432:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1433:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's DE functionality.
1434:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1435:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the driver enable mode.
1436:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.      
1437:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1438:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1439:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DECmd(USART_TypeDef* USARTx, FunctionalState NewState)
1440:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1853              		.loc 1 1440 1 is_stmt 1 view -0
 1854              		.cfi_startproc
 1855              		@ args = 0, pretend = 0, frame = 0
 1856              		@ frame_needed = 0, uses_anonymous_args = 0
 1857              		@ link register save eliminated.
1441:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1442:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1858              		.loc 1 1442 3 view .LVU467
1443:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1859              		.loc 1 1443 3 view .LVU468
1444:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1860              		.loc 1 1444 3 view .LVU469
 1861              		.loc 1 1444 6 is_stmt 0 view .LVU470
 1862 0000 0029     		cmp	r1, #0
 1863 0002 05D0     		beq	.L118
1445:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1446:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the DE functionality by setting the DEM bit in the CR3 register */
1447:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_CR3_DEM;
 1864              		.loc 1 1447 5 is_stmt 1 view .LVU471
 1865              		.loc 1 1447 17 is_stmt 0 view .LVU472
 1866 0004 8268     		ldr	r2, [r0, #8]
 1867 0006 8023     		movs	r3, #128
 1868 0008 DB01     		lsls	r3, r3, #7
 1869 000a 1343     		orrs	r3, r2
 1870 000c 8360     		str	r3, [r0, #8]
 1871              	.L117:
1448:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1449:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1450:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1451:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the DE functionality by clearing the DEM bit in the CR3 register */
1452:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEM);
ARM GAS  /tmp/ccEZPSp0.s 			page 59


1453:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1454:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1872              		.loc 1 1454 1 view .LVU473
 1873              		@ sp needed
 1874 000e 7047     		bx	lr
 1875              	.L118:
1452:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 1876              		.loc 1 1452 5 is_stmt 1 view .LVU474
1452:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 1877              		.loc 1 1452 17 is_stmt 0 view .LVU475
 1878 0010 8368     		ldr	r3, [r0, #8]
 1879 0012 024A     		ldr	r2, .L120
 1880 0014 1340     		ands	r3, r2
 1881 0016 8360     		str	r3, [r0, #8]
 1882              		.loc 1 1454 1 view .LVU476
 1883 0018 F9E7     		b	.L117
 1884              	.L121:
 1885 001a C046     		.align	2
 1886              	.L120:
 1887 001c FFBFFFFF 		.word	-16385
 1888              		.cfi_endproc
 1889              	.LFE69:
 1891              		.section	.text.USART_DEPolarityConfig,"ax",%progbits
 1892              		.align	1
 1893              		.global	USART_DEPolarityConfig
 1894              		.syntax unified
 1895              		.code	16
 1896              		.thumb_func
 1897              		.fpu softvfp
 1899              	USART_DEPolarityConfig:
 1900              	.LVL96:
 1901              	.LFB70:
1455:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1456:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1457:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Configures the USART's DE polarity
1458:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1459:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_DEPolarity: specifies the DE polarity.
1460:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be one of the following values:
1461:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_DEPolarity_Low
1462:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_DEPolarity_High
1463:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1464:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1465:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DEPolarityConfig(USART_TypeDef* USARTx, uint32_t USART_DEPolarity)
1466:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1902              		.loc 1 1466 1 is_stmt 1 view -0
 1903              		.cfi_startproc
 1904              		@ args = 0, pretend = 0, frame = 0
 1905              		@ frame_needed = 0, uses_anonymous_args = 0
 1906              		@ link register save eliminated.
1467:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1468:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1907              		.loc 1 1468 3 view .LVU478
1469:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_DE_POLARITY(USART_DEPolarity));
 1908              		.loc 1 1469 3 view .LVU479
1470:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1471:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEP);
 1909              		.loc 1 1471 3 view .LVU480
ARM GAS  /tmp/ccEZPSp0.s 			page 60


 1910              		.loc 1 1471 15 is_stmt 0 view .LVU481
 1911 0000 8268     		ldr	r2, [r0, #8]
 1912 0002 034B     		ldr	r3, .L123
 1913 0004 1A40     		ands	r2, r3
 1914 0006 8260     		str	r2, [r0, #8]
1472:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= USART_DEPolarity;
 1915              		.loc 1 1472 3 is_stmt 1 view .LVU482
 1916              		.loc 1 1472 15 is_stmt 0 view .LVU483
 1917 0008 8368     		ldr	r3, [r0, #8]
 1918 000a 0B43     		orrs	r3, r1
 1919 000c 8360     		str	r3, [r0, #8]
1473:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1920              		.loc 1 1473 1 view .LVU484
 1921              		@ sp needed
 1922 000e 7047     		bx	lr
 1923              	.L124:
 1924              		.align	2
 1925              	.L123:
 1926 0010 FF7FFFFF 		.word	-32769
 1927              		.cfi_endproc
 1928              	.LFE70:
 1930              		.section	.text.USART_SetDEAssertionTime,"ax",%progbits
 1931              		.align	1
 1932              		.global	USART_SetDEAssertionTime
 1933              		.syntax unified
 1934              		.code	16
 1935              		.thumb_func
 1936              		.fpu softvfp
 1938              	USART_SetDEAssertionTime:
 1939              	.LVL97:
 1940              	.LFB71:
1474:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1475:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1476:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the specified RS485 DE assertion time
1477:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1478:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *  @param  USART_AssertionTime: specifies the time between the activation of the DE
1479:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *  signal and the beginning of the start bit
1480:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1481:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1482:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetDEAssertionTime(USART_TypeDef* USARTx, uint32_t USART_DEAssertionTime)
1483:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1941              		.loc 1 1483 1 is_stmt 1 view -0
 1942              		.cfi_startproc
 1943              		@ args = 0, pretend = 0, frame = 0
 1944              		@ frame_needed = 0, uses_anonymous_args = 0
 1945              		@ link register save eliminated.
1484:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1485:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1946              		.loc 1 1485 3 view .LVU486
1486:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEAssertionTime)); 
 1947              		.loc 1 1486 3 view .LVU487
1487:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1488:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the DE assertion time */
1489:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 1948              		.loc 1 1489 3 view .LVU488
 1949              		.loc 1 1489 15 is_stmt 0 view .LVU489
 1950 0000 0368     		ldr	r3, [r0]
ARM GAS  /tmp/ccEZPSp0.s 			page 61


 1951 0002 044A     		ldr	r2, .L126
 1952 0004 1340     		ands	r3, r2
 1953 0006 0360     		str	r3, [r0]
1490:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the new value for the DE assertion time */
1491:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 1954              		.loc 1 1491 3 is_stmt 1 view .LVU490
 1955              		.loc 1 1491 15 is_stmt 0 view .LVU491
 1956 0008 0368     		ldr	r3, [r0]
 1957              		.loc 1 1491 50 view .LVU492
 1958 000a 4905     		lsls	r1, r1, #21
 1959              	.LVL98:
 1960              		.loc 1 1491 15 view .LVU493
 1961 000c 0B43     		orrs	r3, r1
 1962 000e 0360     		str	r3, [r0]
1492:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1963              		.loc 1 1492 1 view .LVU494
 1964              		@ sp needed
 1965 0010 7047     		bx	lr
 1966              	.L127:
 1967 0012 C046     		.align	2
 1968              	.L126:
 1969 0014 FFFF1FFC 		.word	-65011713
 1970              		.cfi_endproc
 1971              	.LFE71:
 1973              		.section	.text.USART_SetDEDeassertionTime,"ax",%progbits
 1974              		.align	1
 1975              		.global	USART_SetDEDeassertionTime
 1976              		.syntax unified
 1977              		.code	16
 1978              		.thumb_func
 1979              		.fpu softvfp
 1981              	USART_SetDEDeassertionTime:
 1982              	.LVL99:
 1983              	.LFB72:
1493:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1494:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1495:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the specified RS485 DE deassertion time
1496:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1497:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *  @param  USART_DeassertionTime: specifies the time between the middle of the last 
1498:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   stop bit in a transmitted message and the de-activation of the DE signal
1499:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1500:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1501:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetDEDeassertionTime(USART_TypeDef* USARTx, uint32_t USART_DEDeassertionTime)
1502:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1984              		.loc 1 1502 1 is_stmt 1 view -0
 1985              		.cfi_startproc
 1986              		@ args = 0, pretend = 0, frame = 0
 1987              		@ frame_needed = 0, uses_anonymous_args = 0
 1988              		@ link register save eliminated.
1503:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1504:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1989              		.loc 1 1504 3 view .LVU496
1505:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEDeassertionTime)); 
 1990              		.loc 1 1505 3 view .LVU497
1506:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1507:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the DE deassertion time */
1508:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
ARM GAS  /tmp/ccEZPSp0.s 			page 62


 1991              		.loc 1 1508 3 view .LVU498
 1992              		.loc 1 1508 15 is_stmt 0 view .LVU499
 1993 0000 0368     		ldr	r3, [r0]
 1994 0002 044A     		ldr	r2, .L129
 1995 0004 1340     		ands	r3, r2
 1996 0006 0360     		str	r3, [r0]
1509:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the new value for the DE deassertion time */
1510:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 1997              		.loc 1 1510 3 is_stmt 1 view .LVU500
 1998              		.loc 1 1510 15 is_stmt 0 view .LVU501
 1999 0008 0368     		ldr	r3, [r0]
 2000              		.loc 1 1510 52 view .LVU502
 2001 000a 0904     		lsls	r1, r1, #16
 2002              	.LVL100:
 2003              		.loc 1 1510 15 view .LVU503
 2004 000c 0B43     		orrs	r3, r1
 2005 000e 0360     		str	r3, [r0]
1511:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2006              		.loc 1 1511 1 view .LVU504
 2007              		@ sp needed
 2008 0010 7047     		bx	lr
 2009              	.L130:
 2010 0012 C046     		.align	2
 2011              	.L129:
 2012 0014 FFFFE0FF 		.word	-2031617
 2013              		.cfi_endproc
 2014              	.LFE72:
 2016              		.section	.text.USART_DMACmd,"ax",%progbits
 2017              		.align	1
 2018              		.global	USART_DMACmd
 2019              		.syntax unified
 2020              		.code	16
 2021              		.thumb_func
 2022              		.fpu softvfp
 2024              	USART_DMACmd:
 2025              	.LVL101:
 2026              	.LFB73:
1512:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1513:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1514:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1515:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1516:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1517:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group11 DMA transfers management functions
1518:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   DMA transfers management functions
1519:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
1520:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
1521:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1522:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                ##### DMA transfers management functions #####
1523:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1524:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This section provides two functions that can be used only in DMA mode.
1525:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In DMA Mode, the USART communication can be managed by 2 DMA Channel 
1526:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          requests:
1527:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request.
1528:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request.
1529:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In this Mode it is advised to use the following function:
1530:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, 
1531:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              FunctionalState NewState).
ARM GAS  /tmp/ccEZPSp0.s 			page 63


1532:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1533:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1534:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1535:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1536:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1537:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface.
1538:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1539:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
1540:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be any combination of the following values:
1541:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_DMAReq_Tx: USART DMA transmit request
1542:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_DMAReq_Rx: USART DMA receive request
1543:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the DMA Request sources.
1544:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.  
1545:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1546:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1547:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint32_t USART_DMAReq, FunctionalState NewState)
1548:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 2027              		.loc 1 1548 1 is_stmt 1 view -0
 2028              		.cfi_startproc
 2029              		@ args = 0, pretend = 0, frame = 0
 2030              		@ frame_needed = 0, uses_anonymous_args = 0
 2031              		@ link register save eliminated.
1549:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1550:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2032              		.loc 1 1550 3 view .LVU506
1551:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
 2033              		.loc 1 1551 3 view .LVU507
1552:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 2034              		.loc 1 1552 3 view .LVU508
1553:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1554:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 2035              		.loc 1 1554 3 view .LVU509
 2036              		.loc 1 1554 6 is_stmt 0 view .LVU510
 2037 0000 002A     		cmp	r2, #0
 2038 0002 03D0     		beq	.L132
1555:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1556:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
1557:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        DMAR bits in the USART CR3 register */
1558:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 2039              		.loc 1 1558 5 is_stmt 1 view .LVU511
 2040              		.loc 1 1558 17 is_stmt 0 view .LVU512
 2041 0004 8368     		ldr	r3, [r0, #8]
 2042 0006 1943     		orrs	r1, r3
 2043              	.LVL102:
 2044              		.loc 1 1558 17 view .LVU513
 2045 0008 8160     		str	r1, [r0, #8]
 2046              	.L131:
1559:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1560:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1561:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1562:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
1563:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        DMAR bits in the USART CR3 register */
1564:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~USART_DMAReq;
1565:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1566:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2047              		.loc 1 1566 1 view .LVU514
 2048              		@ sp needed
ARM GAS  /tmp/ccEZPSp0.s 			page 64


 2049 000a 7047     		bx	lr
 2050              	.LVL103:
 2051              	.L132:
1564:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 2052              		.loc 1 1564 5 is_stmt 1 view .LVU515
1564:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 2053              		.loc 1 1564 17 is_stmt 0 view .LVU516
 2054 000c 8368     		ldr	r3, [r0, #8]
 2055 000e 8B43     		bics	r3, r1
 2056 0010 8360     		str	r3, [r0, #8]
 2057              		.loc 1 1566 1 view .LVU517
 2058 0012 FAE7     		b	.L131
 2059              		.cfi_endproc
 2060              	.LFE73:
 2062              		.section	.text.USART_DMAReceptionErrorConfig,"ax",%progbits
 2063              		.align	1
 2064              		.global	USART_DMAReceptionErrorConfig
 2065              		.syntax unified
 2066              		.code	16
 2067              		.thumb_func
 2068              		.fpu softvfp
 2070              	USART_DMAReceptionErrorConfig:
 2071              	.LVL104:
 2072              	.LFB74:
1567:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1568:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1569:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface when reception error occurs.
1570:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1571:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_DMAOnError: specifies the DMA status in case of reception error.
1572:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be any combination of the following values:
1573:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_DMAOnError_Enable: DMA receive request enabled when the USART DMA  
1574:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          reception error is asserted.
1575:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_DMAOnError_Disable: DMA receive request disabled when the USART DMA 
1576:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          reception error is asserted.
1577:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1578:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1579:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DMAReceptionErrorConfig(USART_TypeDef* USARTx, uint32_t USART_DMAOnError)
1580:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 2073              		.loc 1 1580 1 is_stmt 1 view -0
 2074              		.cfi_startproc
 2075              		@ args = 0, pretend = 0, frame = 0
 2076              		@ frame_needed = 0, uses_anonymous_args = 0
 2077              		@ link register save eliminated.
1581:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1582:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2078              		.loc 1 1582 3 view .LVU519
1583:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_DMAONERROR(USART_DMAOnError)); 
 2079              		.loc 1 1583 3 view .LVU520
1584:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1585:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the DMA Reception error detection bit */
1586:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DDRE);
 2080              		.loc 1 1586 3 view .LVU521
 2081              		.loc 1 1586 15 is_stmt 0 view .LVU522
 2082 0000 8268     		ldr	r2, [r0, #8]
 2083 0002 034B     		ldr	r3, .L135
 2084 0004 1A40     		ands	r2, r3
 2085 0006 8260     		str	r2, [r0, #8]
ARM GAS  /tmp/ccEZPSp0.s 			page 65


1587:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the new value for the DMA Reception error detection bit */
1588:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= USART_DMAOnError;
 2086              		.loc 1 1588 3 is_stmt 1 view .LVU523
 2087              		.loc 1 1588 15 is_stmt 0 view .LVU524
 2088 0008 8368     		ldr	r3, [r0, #8]
 2089 000a 0B43     		orrs	r3, r1
 2090 000c 8360     		str	r3, [r0, #8]
1589:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2091              		.loc 1 1589 1 view .LVU525
 2092              		@ sp needed
 2093 000e 7047     		bx	lr
 2094              	.L136:
 2095              		.align	2
 2096              	.L135:
 2097 0010 FFDFFFFF 		.word	-8193
 2098              		.cfi_endproc
 2099              	.LFE74:
 2101              		.section	.text.USART_ITConfig,"ax",%progbits
 2102              		.align	1
 2103              		.global	USART_ITConfig
 2104              		.syntax unified
 2105              		.code	16
 2106              		.thumb_func
 2107              		.fpu softvfp
 2109              	USART_ITConfig:
 2110              	.LVL105:
 2111              	.LFB75:
1590:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1591:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1592:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1593:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1594:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1595:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group12 Interrupts and flags management functions
1596:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   Interrupts and flags management functions 
1597:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
1598:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
1599:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1600:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             ##### Interrupts and flags management functions #####
1601:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1602:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to configure the 
1603:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          USART Interrupts sources, Requests and check or clear the flags or pending bits status. 
1604:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          The user should identify which mode will be used in his application to 
1605:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          manage the communication: Polling mode, Interrupt mode.
1606:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1607:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *** Polling Mode ***
1608:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ====================
1609:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In Polling Mode, the SPI communication can be managed by these flags:
1610:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_REACK: to indicate the status of the Receive Enable 
1611:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              acknowledge flag
1612:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_TEACK: to indicate the status of the Transmit Enable 
1613:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              acknowledge flag.
1614:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_WUF: to indicate the status of the Wake up flag.
1615:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_RWU: to indicate the status of the Receive Wake up flag.
1616:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_SBK: to indicate the status of the Send Break flag.
1617:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_CMF: to indicate the status of the Character match flag.
1618:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_BUSY: to indicate the status of the Busy flag.
1619:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_ABRF: to indicate the status of the Auto baud rate flag.
ARM GAS  /tmp/ccEZPSp0.s 			page 66


1620:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_ABRE: to indicate the status of the Auto baud rate error flag.
1621:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_EOBF: to indicate the status of the End of block flag.
1622:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_RTOF: to indicate the status of the Receive time out flag.
1623:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_nCTSS: to indicate the status of the Inverted nCTS input 
1624:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              bit status.
1625:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_TXE: to indicate the status of the transmit buffer register.
1626:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_RXNE: to indicate the status of the receive buffer register.
1627:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_TC: to indicate the status of the transmit operation.
1628:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_IDLE: to indicate the status of the Idle Line.
1629:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_CTS: to indicate the status of the nCTS input.
1630:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_LBD: to indicate the status of the LIN break detection.
1631:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_NE: to indicate if a noise error occur.
1632:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_FE: to indicate if a frame error occur.
1633:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_PE: to indicate if a parity error occur.
1634:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_ORE: to indicate if an Overrun error occur.
1635:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In this Mode it is advised to use the following functions:
1636:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG).
1637:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG).
1638:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1639:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *** Interrupt Mode ***
1640:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ======================
1641:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In Interrupt Mode, the USART communication can be managed by 8 interrupt 
1642:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          sources and 10 pending bits:
1643:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) Pending Bits:
1644:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_WU: to indicate the status of the Wake up interrupt.
1645:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_CM: to indicate the status of Character match interrupt.
1646:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_EOB: to indicate the status of End of block interrupt.
1647:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_RTO: to indicate the status of Receive time out interrupt.
1648:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_CTS: to indicate the status of CTS change interrupt.
1649:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_LBD: to indicate the status of LIN Break detection interrupt.
1650:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_TC: to indicate the status of Transmission complete interrupt.
1651:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_IDLE: to indicate the status of IDLE line detected interrupt.
1652:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_ORE: to indicate the status of OverRun Error interrupt.
1653:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_NE: to indicate the status of Noise Error interrupt.
1654:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_FE: to indicate the status of Framing Error interrupt.
1655:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_PE: to indicate the status of Parity Error interrupt.  
1656:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1657:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) Interrupt Source:
1658:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_WU: specifies the interrupt source for Wake up interrupt.
1659:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_CM: specifies the interrupt source for Character match 
1660:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   interrupt.
1661:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_EOB: specifies the interrupt source for End of block
1662:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   interrupt.
1663:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_RTO: specifies the interrupt source for Receive time-out
1664:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   interrupt.
1665:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_CTS: specifies the interrupt source for CTS change interrupt.
1666:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_LBD: specifies the interrupt source for LIN Break 
1667:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   detection interrupt.
1668:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_TXE: specifies the interrupt source for Tansmit Data 
1669:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   Register empty interrupt.
1670:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_TC: specifies the interrupt source for Transmission 
1671:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   complete interrupt.
1672:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_RXNE: specifies the interrupt source for Receive Data 
1673:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   register not empty interrupt.
1674:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_IDLE: specifies the interrupt source for Idle line 
1675:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   detection interrupt.
1676:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_PE: specifies the interrupt source for Parity Error interrupt.
ARM GAS  /tmp/ccEZPSp0.s 			page 67


1677:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_ERR: specifies the interrupt source for Error interrupt
1678:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   (Frame error, noise error, overrun error)
1679:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              -@@- Some parameters are coded in order to use them as interrupt 
1680:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                  source or as pending bits.
1681:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In this Mode it is advised to use the following functions:
1682:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState
1683:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT).
1684:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT).
1685:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1686:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1687:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1688:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1689:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1690:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1691:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
1692:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1693:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
1694:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be one of the following values:
1695:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_WU:  Wake up interrupt.
1696:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_CM:  Character match interrupt.
1697:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_EOB:  End of block interrupt.
1698:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_RTO:  Receive time out interrupt.
1699:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_CTS:  CTS change interrupt.
1700:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_LBD:  LIN Break detection interrupt.
1701:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_TXE:  Tansmit Data Register empty interrupt.
1702:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_TC:  Transmission complete interrupt.
1703:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_RXNE:  Receive Data register not empty interrupt.
1704:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_IDLE:  Idle line detection interrupt.
1705:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_PE:  Parity Error interrupt.
1706:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
1707:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
1708:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
1709:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1710:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1711:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
1712:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 2112              		.loc 1 1712 1 is_stmt 1 view -0
 2113              		.cfi_startproc
 2114              		@ args = 0, pretend = 0, frame = 0
 2115              		@ frame_needed = 0, uses_anonymous_args = 0
 2116              		.loc 1 1712 1 is_stmt 0 view .LVU527
 2117 0000 30B5     		push	{r4, r5, lr}
 2118              	.LCFI4:
 2119              		.cfi_def_cfa_offset 12
 2120              		.cfi_offset 4, -12
 2121              		.cfi_offset 5, -8
 2122              		.cfi_offset 14, -4
1713:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t usartreg = 0, itpos = 0, itmask = 0;
 2123              		.loc 1 1713 3 is_stmt 1 view .LVU528
 2124              	.LVL106:
1714:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t usartxbase = 0;
 2125              		.loc 1 1714 3 view .LVU529
1715:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1716:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2126              		.loc 1 1716 3 view .LVU530
1717:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
 2127              		.loc 1 1717 3 view .LVU531
ARM GAS  /tmp/ccEZPSp0.s 			page 68


1718:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2128              		.loc 1 1718 3 view .LVU532
1719:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1720:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   usartxbase = (uint32_t)USARTx;
 2129              		.loc 1 1720 3 view .LVU533
 2130              		.loc 1 1720 14 is_stmt 0 view .LVU534
 2131 0002 0500     		movs	r5, r0
 2132              	.LVL107:
1721:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1722:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Get the USART register index */
1723:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   usartreg = (((uint16_t)USART_IT) >> 0x08);
 2133              		.loc 1 1723 3 is_stmt 1 view .LVU535
 2134              		.loc 1 1723 16 is_stmt 0 view .LVU536
 2135 0004 8BB2     		uxth	r3, r1
 2136              		.loc 1 1723 36 view .LVU537
 2137 0006 1B0A     		lsrs	r3, r3, #8
 2138              	.LVL108:
1724:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1725:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Get the interrupt position */
1726:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   itpos = USART_IT & IT_MASK;
 2139              		.loc 1 1726 3 is_stmt 1 view .LVU538
 2140              		.loc 1 1726 9 is_stmt 0 view .LVU539
 2141 0008 FF24     		movs	r4, #255
 2142 000a 0C40     		ands	r4, r1
 2143              	.LVL109:
1727:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 2144              		.loc 1 1727 3 is_stmt 1 view .LVU540
 2145              		.loc 1 1727 10 is_stmt 0 view .LVU541
 2146 000c 0121     		movs	r1, #1
 2147              	.LVL110:
 2148              		.loc 1 1727 10 view .LVU542
 2149 000e A140     		lsls	r1, r1, r4
 2150              	.LVL111:
1728:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1729:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (usartreg == 0x02) /* The IT is in CR2 register */
 2151              		.loc 1 1729 3 is_stmt 1 view .LVU543
 2152              		.loc 1 1729 6 is_stmt 0 view .LVU544
 2153 0010 022B     		cmp	r3, #2
 2154 0012 07D0     		beq	.L142
1730:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1731:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     usartxbase += 0x04;
1732:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1733:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else if (usartreg == 0x03) /* The IT is in CR3 register */
 2155              		.loc 1 1733 8 is_stmt 1 view .LVU545
 2156              		.loc 1 1733 11 is_stmt 0 view .LVU546
 2157 0014 032B     		cmp	r3, #3
 2158 0016 07D0     		beq	.L143
 2159              	.LVL112:
 2160              	.L139:
1734:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1735:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     usartxbase += 0x08;
1736:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1737:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else /* The IT is in CR1 register */
1738:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1739:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 2161              		.loc 1 1739 3 is_stmt 1 view .LVU547
1740:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
ARM GAS  /tmp/ccEZPSp0.s 			page 69


 2162              		.loc 1 1740 3 view .LVU548
 2163              		.loc 1 1740 6 is_stmt 0 view .LVU549
 2164 0018 002A     		cmp	r2, #0
 2165 001a 08D0     		beq	.L140
1741:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1742:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
 2166              		.loc 1 1742 5 is_stmt 1 view .LVU550
 2167              		.loc 1 1742 34 is_stmt 0 view .LVU551
 2168 001c 2B68     		ldr	r3, [r5]
 2169              	.LVL113:
 2170              		.loc 1 1742 34 view .LVU552
 2171 001e 1943     		orrs	r1, r3
 2172              	.LVL114:
 2173              		.loc 1 1742 34 view .LVU553
 2174 0020 2960     		str	r1, [r5]
 2175              	.L137:
1743:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1744:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1745:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1746:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
1747:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1748:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2176              		.loc 1 1748 1 view .LVU554
 2177              		@ sp needed
 2178              	.LVL115:
 2179              	.LVL116:
 2180              		.loc 1 1748 1 view .LVU555
 2181 0022 30BD     		pop	{r4, r5, pc}
 2182              	.LVL117:
 2183              	.L142:
1731:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 2184              		.loc 1 1731 5 is_stmt 1 view .LVU556
1731:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 2185              		.loc 1 1731 16 is_stmt 0 view .LVU557
 2186 0024 051D     		adds	r5, r0, #4
 2187              	.LVL118:
1731:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 2188              		.loc 1 1731 16 view .LVU558
 2189 0026 F7E7     		b	.L139
 2190              	.LVL119:
 2191              	.L143:
1735:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 2192              		.loc 1 1735 5 is_stmt 1 view .LVU559
1735:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 2193              		.loc 1 1735 16 is_stmt 0 view .LVU560
 2194 0028 0830     		adds	r0, r0, #8
 2195              	.LVL120:
1735:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 2196              		.loc 1 1735 16 view .LVU561
 2197 002a 0500     		movs	r5, r0
 2198              	.LVL121:
1735:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 2199              		.loc 1 1735 16 view .LVU562
 2200 002c F4E7     		b	.L139
 2201              	.LVL122:
 2202              	.L140:
1746:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
ARM GAS  /tmp/ccEZPSp0.s 			page 70


 2203              		.loc 1 1746 5 is_stmt 1 view .LVU563
1746:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 2204              		.loc 1 1746 33 is_stmt 0 view .LVU564
 2205 002e 2B68     		ldr	r3, [r5]
 2206              	.LVL123:
1746:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 2207              		.loc 1 1746 33 view .LVU565
 2208 0030 8B43     		bics	r3, r1
 2209 0032 2B60     		str	r3, [r5]
 2210              		.loc 1 1748 1 view .LVU566
 2211 0034 F5E7     		b	.L137
 2212              		.cfi_endproc
 2213              	.LFE75:
 2215              		.section	.text.USART_RequestCmd,"ax",%progbits
 2216              		.align	1
 2217              		.global	USART_RequestCmd
 2218              		.syntax unified
 2219              		.code	16
 2220              		.thumb_func
 2221              		.fpu softvfp
 2223              	USART_RequestCmd:
 2224              	.LVL124:
 2225              	.LFB76:
1749:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1750:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1751:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables the specified USART's Request.
1752:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1753:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_Request: specifies the USART request.
1754:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be any combination of the following values:
1755:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_Request_TXFRQ: Transmit data flush ReQuest
1756:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_Request_RXFRQ: Receive data flush ReQuest
1757:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_Request_MMRQ: Mute Mode ReQuest
1758:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_Request_SBKRQ: Send Break ReQuest
1759:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_Request_ABRRQ: Auto Baud Rate ReQuest
1760:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the DMA interface when reception error occurs.
1761:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be: ENABLE or DISABLE.  
1762:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1763:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1764:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_RequestCmd(USART_TypeDef* USARTx, uint32_t USART_Request, FunctionalState NewState)
1765:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 2226              		.loc 1 1765 1 is_stmt 1 view -0
 2227              		.cfi_startproc
 2228              		@ args = 0, pretend = 0, frame = 0
 2229              		@ frame_needed = 0, uses_anonymous_args = 0
 2230              		@ link register save eliminated.
1766:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1767:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2231              		.loc 1 1767 3 view .LVU568
1768:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_REQUEST(USART_Request));
 2232              		.loc 1 1768 3 view .LVU569
1769:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 2233              		.loc 1 1769 3 view .LVU570
1770:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1771:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 2234              		.loc 1 1771 3 view .LVU571
 2235              		.loc 1 1771 6 is_stmt 0 view .LVU572
 2236 0000 002A     		cmp	r2, #0
ARM GAS  /tmp/ccEZPSp0.s 			page 71


 2237 0002 04D0     		beq	.L145
1772:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1773:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
1774:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register.*/
1775:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****       USARTx->RQR |= USART_Request;
 2238              		.loc 1 1775 7 is_stmt 1 view .LVU573
 2239              		.loc 1 1775 19 is_stmt 0 view .LVU574
 2240 0004 038B     		ldrh	r3, [r0, #24]
 2241 0006 1943     		orrs	r1, r3
 2242              	.LVL125:
 2243              		.loc 1 1775 19 view .LVU575
 2244 0008 89B2     		uxth	r1, r1
 2245 000a 0183     		strh	r1, [r0, #24]
 2246              	.L144:
1776:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1777:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1778:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1779:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the USART ReQuest by clearing the dedicated request bit in the RQR
1780:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register.*/
1781:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->RQR &= (uint32_t)~USART_Request;
1782:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1783:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2247              		.loc 1 1783 1 view .LVU576
 2248              		@ sp needed
 2249 000c 7047     		bx	lr
 2250              	.LVL126:
 2251              	.L145:
1781:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 2252              		.loc 1 1781 5 is_stmt 1 view .LVU577
1781:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 2253              		.loc 1 1781 17 is_stmt 0 view .LVU578
 2254 000e 038B     		ldrh	r3, [r0, #24]
 2255 0010 8B43     		bics	r3, r1
 2256 0012 0383     		strh	r3, [r0, #24]
 2257              		.loc 1 1783 1 view .LVU579
 2258 0014 FAE7     		b	.L144
 2259              		.cfi_endproc
 2260              	.LFE76:
 2262              		.section	.text.USART_OverrunDetectionConfig,"ax",%progbits
 2263              		.align	1
 2264              		.global	USART_OverrunDetectionConfig
 2265              		.syntax unified
 2266              		.code	16
 2267              		.thumb_func
 2268              		.fpu softvfp
 2270              	USART_OverrunDetectionConfig:
 2271              	.LVL127:
 2272              	.LFB77:
1784:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1785:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1786:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's Overrun detection.
1787:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1788:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_OVRDetection: specifies the OVR detection status in case of OVR error.
1789:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be any combination of the following values:
1790:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_OVRDetection_Enable: OVR error detection enabled when the USART OVR error 
1791:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          is asserted.
1792:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_OVRDetection_Disable: OVR error detection disabled when the USART OVR error 
ARM GAS  /tmp/ccEZPSp0.s 			page 72


1793:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          is asserted.
1794:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1795:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1796:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_OverrunDetectionConfig(USART_TypeDef* USARTx, uint32_t USART_OVRDetection)
1797:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 2273              		.loc 1 1797 1 is_stmt 1 view -0
 2274              		.cfi_startproc
 2275              		@ args = 0, pretend = 0, frame = 0
 2276              		@ frame_needed = 0, uses_anonymous_args = 0
 2277              		@ link register save eliminated.
1798:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1799:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2278              		.loc 1 1799 3 view .LVU581
1800:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_OVRDETECTION(USART_OVRDetection));
 2279              		.loc 1 1800 3 view .LVU582
1801:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1802:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the OVR detection bit */
1803:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_OVRDIS);
 2280              		.loc 1 1803 3 view .LVU583
 2281              		.loc 1 1803 15 is_stmt 0 view .LVU584
 2282 0000 8268     		ldr	r2, [r0, #8]
 2283 0002 034B     		ldr	r3, .L148
 2284 0004 1A40     		ands	r2, r3
 2285 0006 8260     		str	r2, [r0, #8]
1804:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the new value for the OVR detection bit */
1805:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= USART_OVRDetection;
 2286              		.loc 1 1805 3 is_stmt 1 view .LVU585
 2287              		.loc 1 1805 15 is_stmt 0 view .LVU586
 2288 0008 8368     		ldr	r3, [r0, #8]
 2289 000a 0B43     		orrs	r3, r1
 2290 000c 8360     		str	r3, [r0, #8]
1806:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2291              		.loc 1 1806 1 view .LVU587
 2292              		@ sp needed
 2293 000e 7047     		bx	lr
 2294              	.L149:
 2295              		.align	2
 2296              	.L148:
 2297 0010 FFEFFFFF 		.word	-4097
 2298              		.cfi_endproc
 2299              	.LFE77:
 2301              		.section	.text.USART_GetFlagStatus,"ax",%progbits
 2302              		.align	1
 2303              		.global	USART_GetFlagStatus
 2304              		.syntax unified
 2305              		.code	16
 2306              		.thumb_func
 2307              		.fpu softvfp
 2309              	USART_GetFlagStatus:
 2310              	.LVL128:
 2311              	.LFB78:
1807:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1808:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1809:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
1810:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1811:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
1812:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be one of the following values:
ARM GAS  /tmp/ccEZPSp0.s 			page 73


1813:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_REACK:  Receive Enable acknowledge flag.
1814:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_TEACK:  Transmit Enable acknowledge flag.
1815:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_WUF:  Wake up flag.
1816:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_RWU:  Receive Wake up flag.
1817:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_SBK:  Send Break flag.
1818:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_CMF:  Character match flag.
1819:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_BUSY:  Busy flag.
1820:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_ABRF:  Auto baud rate flag.
1821:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_ABRE:  Auto baud rate error flag.
1822:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_EOBF:  End of block flag.
1823:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_RTOF:  Receive time out flag.
1824:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_nCTSS:  Inverted nCTS input bit status.
1825:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_CTS:  CTS Change flag.
1826:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_LBD:  LIN Break detection flag.
1827:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_TXE:  Transmit data register empty flag.
1828:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_TC:  Transmission Complete flag.
1829:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_RXNE:  Receive data register not empty flag.
1830:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_IDLE:  Idle Line detection flag.
1831:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_ORE:  OverRun Error flag.
1832:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_NE:  Noise Error flag.
1833:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_FE:  Framing Error flag.
1834:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_PE:  Parity Error flag.
1835:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
1836:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1837:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
1838:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 2312              		.loc 1 1838 1 is_stmt 1 view -0
 2313              		.cfi_startproc
 2314              		@ args = 0, pretend = 0, frame = 0
 2315              		@ frame_needed = 0, uses_anonymous_args = 0
 2316              		@ link register save eliminated.
1839:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   FlagStatus bitstatus = RESET;
 2317              		.loc 1 1839 3 view .LVU589
1840:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1841:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2318              		.loc 1 1841 3 view .LVU590
1842:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
 2319              		.loc 1 1842 3 view .LVU591
1843:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1844:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 2320              		.loc 1 1844 3 view .LVU592
 2321              		.loc 1 1844 14 is_stmt 0 view .LVU593
 2322 0000 C369     		ldr	r3, [r0, #28]
 2323              		.loc 1 1844 6 view .LVU594
 2324 0002 1942     		tst	r1, r3
 2325 0004 01D0     		beq	.L152
1845:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1846:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     bitstatus = SET;
 2326              		.loc 1 1846 15 view .LVU595
 2327 0006 0120     		movs	r0, #1
 2328              	.LVL129:
 2329              	.L151:
1847:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1848:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1849:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1850:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     bitstatus = RESET;
1851:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
ARM GAS  /tmp/ccEZPSp0.s 			page 74


1852:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   return bitstatus;
 2330              		.loc 1 1852 3 is_stmt 1 view .LVU596
1853:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2331              		.loc 1 1853 1 is_stmt 0 view .LVU597
 2332              		@ sp needed
 2333 0008 7047     		bx	lr
 2334              	.LVL130:
 2335              	.L152:
1850:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 2336              		.loc 1 1850 15 view .LVU598
 2337 000a 0020     		movs	r0, #0
 2338              	.LVL131:
1850:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 2339              		.loc 1 1850 15 view .LVU599
 2340 000c FCE7     		b	.L151
 2341              		.cfi_endproc
 2342              	.LFE78:
 2344              		.section	.text.USART_ClearFlag,"ax",%progbits
 2345              		.align	1
 2346              		.global	USART_ClearFlag
 2347              		.syntax unified
 2348              		.code	16
 2349              		.thumb_func
 2350              		.fpu softvfp
 2352              	USART_ClearFlag:
 2353              	.LVL132:
 2354              	.LFB79:
1854:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1855:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1856:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Clears the USARTx's pending flags.
1857:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1858:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
1859:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be any combination of the following values:
1860:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_WUF:  Wake up flag.
1861:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_CMF:  Character match flag.
1862:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_EOBF:  End of block flag.
1863:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_RTOF:  Receive time out flag.
1864:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_CTS:  CTS Change flag.
1865:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_LBD:  LIN Break detection flag.
1866:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_TC:  Transmission Complete flag.
1867:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_IDLE:  IDLE line detected flag.
1868:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_ORE:  OverRun Error flag.
1869:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_NE: Noise Error flag.
1870:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_FE: Framing Error flag.
1871:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_FLAG_PE:   Parity Errorflag.
1872:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   
1873:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     RXNE pending bit is cleared by a read to the USART_RDR register 
1874:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           (USART_ReceiveData()) or by writing 1 to the RXFRQ in the register
1875:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           USART_RQR (USART_RequestCmd()).
1876:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     TC flag can be also cleared by software sequence: a read operation
1877:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           to USART_SR register (USART_GetFlagStatus()) followed by a write 
1878:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           operation to USART_TDR register (USART_SendData()).
1879:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     TXE flag is cleared by a write to the USART_TDR register (USART_SendData())
1880:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           or by writing 1 to the TXFRQ in the register USART_RQR (USART_RequestCmd()).
1881:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     SBKF flag is cleared by 1 to the SBKRQ in the register USART_RQR
1882:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           (USART_RequestCmd()).
1883:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
ARM GAS  /tmp/ccEZPSp0.s 			page 75


1884:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1885:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint32_t USART_FLAG)
1886:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 2355              		.loc 1 1886 1 is_stmt 1 view -0
 2356              		.cfi_startproc
 2357              		@ args = 0, pretend = 0, frame = 0
 2358              		@ frame_needed = 0, uses_anonymous_args = 0
 2359              		@ link register save eliminated.
1887:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1888:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2360              		.loc 1 1888 3 view .LVU601
1889:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
 2361              		.loc 1 1889 3 view .LVU602
1890:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****      
1891:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->ICR = USART_FLAG;
 2362              		.loc 1 1891 3 view .LVU603
 2363              		.loc 1 1891 15 is_stmt 0 view .LVU604
 2364 0000 0162     		str	r1, [r0, #32]
1892:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2365              		.loc 1 1892 1 view .LVU605
 2366              		@ sp needed
 2367 0002 7047     		bx	lr
 2368              		.cfi_endproc
 2369              	.LFE79:
 2371              		.section	.text.USART_GetITStatus,"ax",%progbits
 2372              		.align	1
 2373              		.global	USART_GetITStatus
 2374              		.syntax unified
 2375              		.code	16
 2376              		.thumb_func
 2377              		.fpu softvfp
 2379              	USART_GetITStatus:
 2380              	.LVL133:
 2381              	.LFB80:
1893:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1894:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1895:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
1896:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1897:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
1898:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be one of the following values:
1899:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_WU:  Wake up interrupt.
1900:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_CM:  Character match interrupt.
1901:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_EOB:  End of block interrupt.
1902:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_RTO:  Receive time out interrupt.
1903:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_CTS:  CTS change interrupt.
1904:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_LBD:  LIN Break detection interrupt.
1905:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_TXE:  Tansmit Data Register empty interrupt.
1906:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_TC:  Transmission complete interrupt.
1907:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_RXNE:  Receive Data register not empty interrupt.
1908:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_IDLE:  Idle line detection interrupt.
1909:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_ORE:  OverRun Error interrupt.
1910:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_NE:  Noise Error interrupt.
1911:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_FE:  Framing Error interrupt.
1912:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_PE:  Parity Error interrupt.
1913:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
1914:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1915:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
ARM GAS  /tmp/ccEZPSp0.s 			page 76


1916:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 2382              		.loc 1 1916 1 is_stmt 1 view -0
 2383              		.cfi_startproc
 2384              		@ args = 0, pretend = 0, frame = 0
 2385              		@ frame_needed = 0, uses_anonymous_args = 0
 2386              		.loc 1 1916 1 is_stmt 0 view .LVU607
 2387 0000 10B5     		push	{r4, lr}
 2388              	.LCFI5:
 2389              		.cfi_def_cfa_offset 8
 2390              		.cfi_offset 4, -8
 2391              		.cfi_offset 14, -4
1917:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 2392              		.loc 1 1917 3 is_stmt 1 view .LVU608
 2393              	.LVL134:
1918:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   ITStatus bitstatus = RESET;
 2394              		.loc 1 1918 3 view .LVU609
1919:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1920:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2395              		.loc 1 1920 3 view .LVU610
1921:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT)); 
 2396              		.loc 1 1921 3 view .LVU611
1922:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1923:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Get the USART register index */
1924:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   usartreg = (((uint16_t)USART_IT) >> 0x08);
 2397              		.loc 1 1924 3 view .LVU612
 2398              		.loc 1 1924 16 is_stmt 0 view .LVU613
 2399 0002 8AB2     		uxth	r2, r1
 2400              		.loc 1 1924 36 view .LVU614
 2401 0004 120A     		lsrs	r2, r2, #8
 2402              	.LVL135:
1925:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Get the interrupt position */
1926:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   itmask = USART_IT & IT_MASK;
 2403              		.loc 1 1926 3 is_stmt 1 view .LVU615
 2404              		.loc 1 1926 10 is_stmt 0 view .LVU616
 2405 0006 FF24     		movs	r4, #255
 2406 0008 0C40     		ands	r4, r1
 2407              	.LVL136:
1927:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 2408              		.loc 1 1927 3 is_stmt 1 view .LVU617
 2409              		.loc 1 1927 10 is_stmt 0 view .LVU618
 2410 000a 0123     		movs	r3, #1
 2411 000c A340     		lsls	r3, r3, r4
 2412              	.LVL137:
1928:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1929:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 2413              		.loc 1 1929 3 is_stmt 1 view .LVU619
 2414              		.loc 1 1929 6 is_stmt 0 view .LVU620
 2415 000e 012A     		cmp	r2, #1
 2416 0010 0ED0     		beq	.L161
1930:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1931:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     itmask &= USARTx->CR1;
1932:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1933:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 2417              		.loc 1 1933 8 is_stmt 1 view .LVU621
 2418              		.loc 1 1933 11 is_stmt 0 view .LVU622
 2419 0012 022A     		cmp	r2, #2
 2420 0014 0FD0     		beq	.L162
ARM GAS  /tmp/ccEZPSp0.s 			page 77


1934:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1935:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     itmask &= USARTx->CR2;
1936:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1937:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else /* The IT  is in CR3 register */
1938:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1939:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     itmask &= USARTx->CR3;
 2421              		.loc 1 1939 5 is_stmt 1 view .LVU623
 2422              		.loc 1 1939 21 is_stmt 0 view .LVU624
 2423 0016 8268     		ldr	r2, [r0, #8]
 2424              	.LVL138:
 2425              		.loc 1 1939 12 view .LVU625
 2426 0018 1340     		ands	r3, r2
 2427              	.LVL139:
 2428              	.L156:
1940:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1941:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1942:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   bitpos = USART_IT >> 0x10;
 2429              		.loc 1 1942 3 is_stmt 1 view .LVU626
 2430              		.loc 1 1942 10 is_stmt 0 view .LVU627
 2431 001a 090C     		lsrs	r1, r1, #16
 2432              	.LVL140:
1943:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 2433              		.loc 1 1943 3 is_stmt 1 view .LVU628
 2434              		.loc 1 1943 10 is_stmt 0 view .LVU629
 2435 001c 0122     		movs	r2, #1
 2436 001e 8A40     		lsls	r2, r2, r1
 2437              	.LVL141:
1944:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   bitpos &= USARTx->ISR;
 2438              		.loc 1 1944 3 is_stmt 1 view .LVU630
 2439              		.loc 1 1944 19 is_stmt 0 view .LVU631
 2440 0020 C169     		ldr	r1, [r0, #28]
 2441              		.loc 1 1944 10 view .LVU632
 2442 0022 0A40     		ands	r2, r1
 2443              	.LVL142:
1945:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 2444              		.loc 1 1945 3 is_stmt 1 view .LVU633
 2445              		.loc 1 1945 6 is_stmt 0 view .LVU634
 2446 0024 002B     		cmp	r3, #0
 2447 0026 09D0     		beq	.L159
 2448              		.loc 1 1945 34 discriminator 1 view .LVU635
 2449 0028 002A     		cmp	r2, #0
 2450 002a 09D1     		bne	.L160
1946:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1947:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     bitstatus = SET;
1948:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1949:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1950:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1951:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     bitstatus = RESET;
 2451              		.loc 1 1951 15 view .LVU636
 2452 002c 0020     		movs	r0, #0
 2453              	.LVL143:
 2454              		.loc 1 1951 15 view .LVU637
 2455 002e 06E0     		b	.L158
 2456              	.LVL144:
 2457              	.L161:
1931:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 2458              		.loc 1 1931 5 is_stmt 1 view .LVU638
ARM GAS  /tmp/ccEZPSp0.s 			page 78


1931:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 2459              		.loc 1 1931 21 is_stmt 0 view .LVU639
 2460 0030 0268     		ldr	r2, [r0]
 2461              	.LVL145:
1931:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 2462              		.loc 1 1931 12 view .LVU640
 2463 0032 1340     		ands	r3, r2
 2464              	.LVL146:
1931:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 2465              		.loc 1 1931 12 view .LVU641
 2466 0034 F1E7     		b	.L156
 2467              	.LVL147:
 2468              	.L162:
1935:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 2469              		.loc 1 1935 5 is_stmt 1 view .LVU642
1935:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 2470              		.loc 1 1935 21 is_stmt 0 view .LVU643
 2471 0036 4268     		ldr	r2, [r0, #4]
 2472              	.LVL148:
1935:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 2473              		.loc 1 1935 12 view .LVU644
 2474 0038 1340     		ands	r3, r2
 2475              	.LVL149:
1935:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 2476              		.loc 1 1935 12 view .LVU645
 2477 003a EEE7     		b	.L156
 2478              	.LVL150:
 2479              	.L159:
 2480              		.loc 1 1951 15 view .LVU646
 2481 003c 0020     		movs	r0, #0
 2482              	.LVL151:
 2483              	.L158:
1952:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1953:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1954:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   return bitstatus;  
 2484              		.loc 1 1954 3 is_stmt 1 view .LVU647
1955:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2485              		.loc 1 1955 1 is_stmt 0 view .LVU648
 2486              		@ sp needed
 2487 003e 10BD     		pop	{r4, pc}
 2488              	.LVL152:
 2489              	.L160:
1947:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 2490              		.loc 1 1947 15 view .LVU649
 2491 0040 0120     		movs	r0, #1
 2492              	.LVL153:
1947:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 2493              		.loc 1 1947 15 view .LVU650
 2494 0042 FCE7     		b	.L158
 2495              		.cfi_endproc
 2496              	.LFE80:
 2498              		.section	.text.USART_ClearITPendingBit,"ax",%progbits
 2499              		.align	1
 2500              		.global	USART_ClearITPendingBit
 2501              		.syntax unified
 2502              		.code	16
 2503              		.thumb_func
ARM GAS  /tmp/ccEZPSp0.s 			page 79


 2504              		.fpu softvfp
 2506              	USART_ClearITPendingBit:
 2507              	.LVL154:
 2508              	.LFB81:
1956:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1957:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1958:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
1959:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
1960:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
1961:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   This parameter can be one of the following values:
1962:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_WU:  Wake up interrupt.
1963:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_CM:  Character match interrupt.
1964:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_EOB:  End of block interrupt.
1965:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_RTO:  Receive time out interrupt.
1966:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_CTS:  CTS change interrupt.
1967:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_LBD:  LIN Break detection interrupt.
1968:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_TC:  Transmission complete interrupt.
1969:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_IDLE:  IDLE line detected interrupt.
1970:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_ORE:  OverRun Error interrupt.
1971:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_NE:  Noise Error interrupt.
1972:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_FE:  Framing Error interrupt.
1973:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *     @arg USART_IT_PE:  Parity Error interrupt.
1974:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *
1975:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     RXNE pending bit is cleared by a read to the USART_RDR register 
1976:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           (USART_ReceiveData()) or by writing 1 to the RXFRQ in the register 
1977:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           USART_RQR (USART_RequestCmd()).
1978:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     TC pending bit can be also cleared by software sequence: a read 
1979:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           operation to USART_SR register (USART_GetITStatus()) followed by  
1980:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           a write operation to USART_TDR register (USART_SendData()).
1981:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     TXE pending bit is cleared by a write to the USART_TDR register 
1982:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           (USART_SendData()) or by writing 1 to the TXFRQ in the register 
1983:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           USART_RQR (USART_RequestCmd()).
1984:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1985:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1986:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint32_t USART_IT)
1987:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 2509              		.loc 1 1987 1 is_stmt 1 view -0
 2510              		.cfi_startproc
 2511              		@ args = 0, pretend = 0, frame = 0
 2512              		@ frame_needed = 0, uses_anonymous_args = 0
 2513              		@ link register save eliminated.
1988:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t bitpos = 0, itmask = 0;
 2514              		.loc 1 1988 3 view .LVU652
1989:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1990:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2515              		.loc 1 1990 3 view .LVU653
1991:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT)); 
 2516              		.loc 1 1991 3 view .LVU654
1992:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1993:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   bitpos = USART_IT >> 0x10;
 2517              		.loc 1 1993 3 view .LVU655
 2518              		.loc 1 1993 10 is_stmt 0 view .LVU656
 2519 0000 090C     		lsrs	r1, r1, #16
 2520              	.LVL155:
1994:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 2521              		.loc 1 1994 3 is_stmt 1 view .LVU657
 2522              		.loc 1 1994 10 is_stmt 0 view .LVU658
ARM GAS  /tmp/ccEZPSp0.s 			page 80


 2523 0002 0123     		movs	r3, #1
 2524 0004 8B40     		lsls	r3, r3, r1
 2525              	.LVL156:
1995:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->ICR = (uint32_t)itmask;
 2526              		.loc 1 1995 3 is_stmt 1 view .LVU659
 2527              		.loc 1 1995 15 is_stmt 0 view .LVU660
 2528 0006 0362     		str	r3, [r0, #32]
1996:Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2529              		.loc 1 1996 1 view .LVU661
 2530              		@ sp needed
 2531 0008 7047     		bx	lr
 2532              		.cfi_endproc
 2533              	.LFE81:
 2535              		.text
 2536              	.Letext0:
 2537              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2538              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2539              		.file 4 "./Libraries/CMSIS/ST/STM32F0xx/Include/stm32f0xx.h"
 2540              		.file 5 "./Libraries/STM32F0xx_StdPeriph_Driver/inc/stm32f0xx_rcc.h"
 2541              		.file 6 "./Libraries/STM32F0xx_StdPeriph_Driver/inc/stm32f0xx_usart.h"
 2542              		.file 7 "./Libraries/CMSIS/ST/STM32F0xx/Include/system_stm32f0xx.h"
ARM GAS  /tmp/ccEZPSp0.s 			page 81


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f0xx_usart.c
     /tmp/ccEZPSp0.s:16     .text.USART_DeInit:0000000000000000 $t
     /tmp/ccEZPSp0.s:24     .text.USART_DeInit:0000000000000000 USART_DeInit
     /tmp/ccEZPSp0.s:92     .text.USART_DeInit:000000000000003c $d
     /tmp/ccEZPSp0.s:99     .text.USART_Init:0000000000000000 $t
     /tmp/ccEZPSp0.s:106    .text.USART_Init:0000000000000000 USART_Init
     /tmp/ccEZPSp0.s:350    .text.USART_Init:00000000000000c0 $d
     /tmp/ccEZPSp0.s:358    .text.USART_StructInit:0000000000000000 $t
     /tmp/ccEZPSp0.s:365    .text.USART_StructInit:0000000000000000 USART_StructInit
     /tmp/ccEZPSp0.s:402    .text.USART_ClockInit:0000000000000000 $t
     /tmp/ccEZPSp0.s:409    .text.USART_ClockInit:0000000000000000 USART_ClockInit
     /tmp/ccEZPSp0.s:463    .text.USART_ClockInit:000000000000001c $d
     /tmp/ccEZPSp0.s:468    .text.USART_ClockStructInit:0000000000000000 $t
     /tmp/ccEZPSp0.s:475    .text.USART_ClockStructInit:0000000000000000 USART_ClockStructInit
     /tmp/ccEZPSp0.s:503    .text.USART_Cmd:0000000000000000 $t
     /tmp/ccEZPSp0.s:510    .text.USART_Cmd:0000000000000000 USART_Cmd
     /tmp/ccEZPSp0.s:547    .text.USART_DirectionModeCmd:0000000000000000 $t
     /tmp/ccEZPSp0.s:554    .text.USART_DirectionModeCmd:0000000000000000 USART_DirectionModeCmd
     /tmp/ccEZPSp0.s:593    .text.USART_OverSampling8Cmd:0000000000000000 $t
     /tmp/ccEZPSp0.s:600    .text.USART_OverSampling8Cmd:0000000000000000 USART_OverSampling8Cmd
     /tmp/ccEZPSp0.s:637    .text.USART_OverSampling8Cmd:000000000000001c $d
     /tmp/ccEZPSp0.s:642    .text.USART_OneBitMethodCmd:0000000000000000 $t
     /tmp/ccEZPSp0.s:649    .text.USART_OneBitMethodCmd:0000000000000000 USART_OneBitMethodCmd
     /tmp/ccEZPSp0.s:686    .text.USART_OneBitMethodCmd:000000000000001c $d
     /tmp/ccEZPSp0.s:691    .text.USART_MSBFirstCmd:0000000000000000 $t
     /tmp/ccEZPSp0.s:698    .text.USART_MSBFirstCmd:0000000000000000 USART_MSBFirstCmd
     /tmp/ccEZPSp0.s:735    .text.USART_MSBFirstCmd:000000000000001c $d
     /tmp/ccEZPSp0.s:740    .text.USART_DataInvCmd:0000000000000000 $t
     /tmp/ccEZPSp0.s:747    .text.USART_DataInvCmd:0000000000000000 USART_DataInvCmd
     /tmp/ccEZPSp0.s:784    .text.USART_DataInvCmd:000000000000001c $d
     /tmp/ccEZPSp0.s:789    .text.USART_InvPinCmd:0000000000000000 $t
     /tmp/ccEZPSp0.s:796    .text.USART_InvPinCmd:0000000000000000 USART_InvPinCmd
     /tmp/ccEZPSp0.s:835    .text.USART_SWAPPinCmd:0000000000000000 $t
     /tmp/ccEZPSp0.s:842    .text.USART_SWAPPinCmd:0000000000000000 USART_SWAPPinCmd
     /tmp/ccEZPSp0.s:879    .text.USART_SWAPPinCmd:000000000000001c $d
     /tmp/ccEZPSp0.s:884    .text.USART_ReceiverTimeOutCmd:0000000000000000 $t
     /tmp/ccEZPSp0.s:891    .text.USART_ReceiverTimeOutCmd:0000000000000000 USART_ReceiverTimeOutCmd
     /tmp/ccEZPSp0.s:928    .text.USART_ReceiverTimeOutCmd:000000000000001c $d
     /tmp/ccEZPSp0.s:933    .text.USART_SetReceiverTimeOut:0000000000000000 $t
     /tmp/ccEZPSp0.s:940    .text.USART_SetReceiverTimeOut:0000000000000000 USART_SetReceiverTimeOut
     /tmp/ccEZPSp0.s:968    .text.USART_SetPrescaler:0000000000000000 $t
     /tmp/ccEZPSp0.s:975    .text.USART_SetPrescaler:0000000000000000 USART_SetPrescaler
     /tmp/ccEZPSp0.s:1002   .text.USART_STOPModeCmd:0000000000000000 $t
     /tmp/ccEZPSp0.s:1009   .text.USART_STOPModeCmd:0000000000000000 USART_STOPModeCmd
     /tmp/ccEZPSp0.s:1046   .text.USART_StopModeWakeUpSourceConfig:0000000000000000 $t
     /tmp/ccEZPSp0.s:1053   .text.USART_StopModeWakeUpSourceConfig:0000000000000000 USART_StopModeWakeUpSourceConfig
     /tmp/ccEZPSp0.s:1080   .text.USART_StopModeWakeUpSourceConfig:0000000000000010 $d
     /tmp/ccEZPSp0.s:1085   .text.USART_AutoBaudRateCmd:0000000000000000 $t
     /tmp/ccEZPSp0.s:1092   .text.USART_AutoBaudRateCmd:0000000000000000 USART_AutoBaudRateCmd
     /tmp/ccEZPSp0.s:1129   .text.USART_AutoBaudRateCmd:000000000000001c $d
     /tmp/ccEZPSp0.s:1134   .text.USART_AutoBaudRateConfig:0000000000000000 $t
     /tmp/ccEZPSp0.s:1141   .text.USART_AutoBaudRateConfig:0000000000000000 USART_AutoBaudRateConfig
     /tmp/ccEZPSp0.s:1168   .text.USART_AutoBaudRateConfig:0000000000000010 $d
     /tmp/ccEZPSp0.s:1173   .text.USART_AutoBaudRateNewRequest:0000000000000000 $t
     /tmp/ccEZPSp0.s:1180   .text.USART_AutoBaudRateNewRequest:0000000000000000 USART_AutoBaudRateNewRequest
     /tmp/ccEZPSp0.s:1201   .text.USART_AutoBaudRateNewRequest:000000000000000c $d
ARM GAS  /tmp/ccEZPSp0.s 			page 82


     /tmp/ccEZPSp0.s:1206   .text.USART_SendData:0000000000000000 $t
     /tmp/ccEZPSp0.s:1213   .text.USART_SendData:0000000000000000 USART_SendData
     /tmp/ccEZPSp0.s:1238   .text.USART_ReceiveData:0000000000000000 $t
     /tmp/ccEZPSp0.s:1245   .text.USART_ReceiveData:0000000000000000 USART_ReceiveData
     /tmp/ccEZPSp0.s:1268   .text.USART_SetAddress:0000000000000000 $t
     /tmp/ccEZPSp0.s:1275   .text.USART_SetAddress:0000000000000000 USART_SetAddress
     /tmp/ccEZPSp0.s:1306   .text.USART_MuteModeCmd:0000000000000000 $t
     /tmp/ccEZPSp0.s:1313   .text.USART_MuteModeCmd:0000000000000000 USART_MuteModeCmd
     /tmp/ccEZPSp0.s:1350   .text.USART_MuteModeCmd:000000000000001c $d
     /tmp/ccEZPSp0.s:1355   .text.USART_MuteModeWakeUpConfig:0000000000000000 $t
     /tmp/ccEZPSp0.s:1362   .text.USART_MuteModeWakeUpConfig:0000000000000000 USART_MuteModeWakeUpConfig
     /tmp/ccEZPSp0.s:1389   .text.USART_MuteModeWakeUpConfig:0000000000000010 $d
     /tmp/ccEZPSp0.s:1394   .text.USART_AddressDetectionConfig:0000000000000000 $t
     /tmp/ccEZPSp0.s:1401   .text.USART_AddressDetectionConfig:0000000000000000 USART_AddressDetectionConfig
     /tmp/ccEZPSp0.s:1429   .text.USART_LINBreakDetectLengthConfig:0000000000000000 $t
     /tmp/ccEZPSp0.s:1436   .text.USART_LINBreakDetectLengthConfig:0000000000000000 USART_LINBreakDetectLengthConfig
     /tmp/ccEZPSp0.s:1464   .text.USART_LINCmd:0000000000000000 $t
     /tmp/ccEZPSp0.s:1471   .text.USART_LINCmd:0000000000000000 USART_LINCmd
     /tmp/ccEZPSp0.s:1508   .text.USART_LINCmd:000000000000001c $d
     /tmp/ccEZPSp0.s:1513   .text.USART_HalfDuplexCmd:0000000000000000 $t
     /tmp/ccEZPSp0.s:1520   .text.USART_HalfDuplexCmd:0000000000000000 USART_HalfDuplexCmd
     /tmp/ccEZPSp0.s:1557   .text.USART_SetGuardTime:0000000000000000 $t
     /tmp/ccEZPSp0.s:1564   .text.USART_SetGuardTime:0000000000000000 USART_SetGuardTime
     /tmp/ccEZPSp0.s:1595   .text.USART_SmartCardCmd:0000000000000000 $t
     /tmp/ccEZPSp0.s:1602   .text.USART_SmartCardCmd:0000000000000000 USART_SmartCardCmd
     /tmp/ccEZPSp0.s:1639   .text.USART_SmartCardNACKCmd:0000000000000000 $t
     /tmp/ccEZPSp0.s:1646   .text.USART_SmartCardNACKCmd:0000000000000000 USART_SmartCardNACKCmd
     /tmp/ccEZPSp0.s:1683   .text.USART_SetAutoRetryCount:0000000000000000 $t
     /tmp/ccEZPSp0.s:1690   .text.USART_SetAutoRetryCount:0000000000000000 USART_SetAutoRetryCount
     /tmp/ccEZPSp0.s:1721   .text.USART_SetAutoRetryCount:0000000000000014 $d
     /tmp/ccEZPSp0.s:1726   .text.USART_SetBlockLength:0000000000000000 $t
     /tmp/ccEZPSp0.s:1733   .text.USART_SetBlockLength:0000000000000000 USART_SetBlockLength
     /tmp/ccEZPSp0.s:1764   .text.USART_IrDAConfig:0000000000000000 $t
     /tmp/ccEZPSp0.s:1771   .text.USART_IrDAConfig:0000000000000000 USART_IrDAConfig
     /tmp/ccEZPSp0.s:1799   .text.USART_IrDACmd:0000000000000000 $t
     /tmp/ccEZPSp0.s:1806   .text.USART_IrDACmd:0000000000000000 USART_IrDACmd
     /tmp/ccEZPSp0.s:1843   .text.USART_DECmd:0000000000000000 $t
     /tmp/ccEZPSp0.s:1850   .text.USART_DECmd:0000000000000000 USART_DECmd
     /tmp/ccEZPSp0.s:1887   .text.USART_DECmd:000000000000001c $d
     /tmp/ccEZPSp0.s:1892   .text.USART_DEPolarityConfig:0000000000000000 $t
     /tmp/ccEZPSp0.s:1899   .text.USART_DEPolarityConfig:0000000000000000 USART_DEPolarityConfig
     /tmp/ccEZPSp0.s:1926   .text.USART_DEPolarityConfig:0000000000000010 $d
     /tmp/ccEZPSp0.s:1931   .text.USART_SetDEAssertionTime:0000000000000000 $t
     /tmp/ccEZPSp0.s:1938   .text.USART_SetDEAssertionTime:0000000000000000 USART_SetDEAssertionTime
     /tmp/ccEZPSp0.s:1969   .text.USART_SetDEAssertionTime:0000000000000014 $d
     /tmp/ccEZPSp0.s:1974   .text.USART_SetDEDeassertionTime:0000000000000000 $t
     /tmp/ccEZPSp0.s:1981   .text.USART_SetDEDeassertionTime:0000000000000000 USART_SetDEDeassertionTime
     /tmp/ccEZPSp0.s:2012   .text.USART_SetDEDeassertionTime:0000000000000014 $d
     /tmp/ccEZPSp0.s:2017   .text.USART_DMACmd:0000000000000000 $t
     /tmp/ccEZPSp0.s:2024   .text.USART_DMACmd:0000000000000000 USART_DMACmd
     /tmp/ccEZPSp0.s:2063   .text.USART_DMAReceptionErrorConfig:0000000000000000 $t
     /tmp/ccEZPSp0.s:2070   .text.USART_DMAReceptionErrorConfig:0000000000000000 USART_DMAReceptionErrorConfig
     /tmp/ccEZPSp0.s:2097   .text.USART_DMAReceptionErrorConfig:0000000000000010 $d
     /tmp/ccEZPSp0.s:2102   .text.USART_ITConfig:0000000000000000 $t
     /tmp/ccEZPSp0.s:2109   .text.USART_ITConfig:0000000000000000 USART_ITConfig
     /tmp/ccEZPSp0.s:2216   .text.USART_RequestCmd:0000000000000000 $t
     /tmp/ccEZPSp0.s:2223   .text.USART_RequestCmd:0000000000000000 USART_RequestCmd
ARM GAS  /tmp/ccEZPSp0.s 			page 83


     /tmp/ccEZPSp0.s:2263   .text.USART_OverrunDetectionConfig:0000000000000000 $t
     /tmp/ccEZPSp0.s:2270   .text.USART_OverrunDetectionConfig:0000000000000000 USART_OverrunDetectionConfig
     /tmp/ccEZPSp0.s:2297   .text.USART_OverrunDetectionConfig:0000000000000010 $d
     /tmp/ccEZPSp0.s:2302   .text.USART_GetFlagStatus:0000000000000000 $t
     /tmp/ccEZPSp0.s:2309   .text.USART_GetFlagStatus:0000000000000000 USART_GetFlagStatus
     /tmp/ccEZPSp0.s:2345   .text.USART_ClearFlag:0000000000000000 $t
     /tmp/ccEZPSp0.s:2352   .text.USART_ClearFlag:0000000000000000 USART_ClearFlag
     /tmp/ccEZPSp0.s:2372   .text.USART_GetITStatus:0000000000000000 $t
     /tmp/ccEZPSp0.s:2379   .text.USART_GetITStatus:0000000000000000 USART_GetITStatus
     /tmp/ccEZPSp0.s:2499   .text.USART_ClearITPendingBit:0000000000000000 $t
     /tmp/ccEZPSp0.s:2506   .text.USART_ClearITPendingBit:0000000000000000 USART_ClearITPendingBit

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
__aeabi_uidiv
RCC_GetClocksFreq
