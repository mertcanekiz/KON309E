ARM GAS  /tmp/ccH9kfPa.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f0xx_pwr.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.PWR_DeInit,"ax",%progbits
  16              		.align	1
  17              		.global	PWR_DeInit
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	PWR_DeInit:
  25              	.LFB40:
  26              		.file 1 "Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c"
   1:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
   2:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ******************************************************************************
   3:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @file    stm32f0xx_pwr.c
   4:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @author  MCD Application Team
   5:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @version V1.0.0
   6:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @date    23-March-2012
   7:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @brief   This file provides firmware functions to manage the following 
   8:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:
   9:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *           + Backup Domain Access
  10:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *           + PVD configuration
  11:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *           + WakeUp pins configuration
  12:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *           + Low Power modes configuration
  13:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *           + Flags management
  14:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *
  15:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ******************************************************************************
  16:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @attention
  17:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *
  18:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  19:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *
  20:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  21:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * You may not use this file except in compliance with the License.
  22:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * You may obtain a copy of the License at:
  23:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *
  24:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  25:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *
  26:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * Unless required by applicable law or agreed to in writing, software 
  27:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  28:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  29:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * See the License for the specific language governing permissions and
  30:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * limitations under the License.
  31:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *
  32:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ******************************************************************************
ARM GAS  /tmp/ccH9kfPa.s 			page 2


  33:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
  34:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
  35:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /* Includes ------------------------------------------------------------------*/
  36:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** #include "stm32f0xx_pwr.h"
  37:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** #include "stm32f0xx_rcc.h"
  38:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
  39:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
  40:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @{
  41:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
  42:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
  43:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /** @defgroup PWR 
  44:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @brief PWR driver modules
  45:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @{
  46:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */ 
  47:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
  48:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  49:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /* Private define ------------------------------------------------------------*/
  50:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
  51:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /* ------------------ PWR registers bit mask ------------------------ */
  52:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
  53:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /* CR register bit mask */
  54:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** #define CR_DS_MASK               ((uint32_t)0xFFFFFFFC)
  55:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** #define CR_PLS_MASK              ((uint32_t)0xFFFFFF1F)
  56:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
  57:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /* Private macro -------------------------------------------------------------*/
  58:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /* Private variables ---------------------------------------------------------*/
  59:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  60:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /* Private functions ---------------------------------------------------------*/
  61:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
  62:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /** @defgroup PWR_Private_Functions
  63:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @{
  64:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
  65:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
  66:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /** @defgroup PWR_Group1 Backup Domain Access function 
  67:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****  *  @brief   Backup Domain Access function
  68:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****  *
  69:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** @verbatim
  70:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ==============================================================================
  71:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                    ##### Backup Domain Access function #####
  72:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ==============================================================================
  73:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
  74:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     [..] After reset, the Backup Domain Registers (RCC BDCR Register, RTC registers
  75:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****          and RTC backup registers) are protected against possible stray write accesses.
  76:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     [..] To enable access to Backup domain use the PWR_BackupAccessCmd(ENABLE) function.
  77:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
  78:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** @endverbatim
  79:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @{
  80:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
  81:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
  82:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
  83:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @brief  Deinitializes the PWR peripheral registers to their default reset values.
  84:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @param  None
  85:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @retval None
  86:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
  87:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** void PWR_DeInit(void)
  88:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** {
  27              		.loc 1 88 1 view -0
ARM GAS  /tmp/ccH9kfPa.s 			page 3


  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 10B5     		push	{r4, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  89:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  36              		.loc 1 89 3 view .LVU1
  37 0002 8024     		movs	r4, #128
  38 0004 6405     		lsls	r4, r4, #21
  39 0006 0121     		movs	r1, #1
  40 0008 2000     		movs	r0, r4
  41 000a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  42              	.LVL0:
  90:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
  43              		.loc 1 90 3 view .LVU2
  44 000e 0021     		movs	r1, #0
  45 0010 2000     		movs	r0, r4
  46 0012 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  47              	.LVL1:
  91:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** }
  48              		.loc 1 91 1 is_stmt 0 view .LVU3
  49              		@ sp needed
  50 0016 10BD     		pop	{r4, pc}
  51              		.cfi_endproc
  52              	.LFE40:
  54              		.section	.text.PWR_BackupAccessCmd,"ax",%progbits
  55              		.align	1
  56              		.global	PWR_BackupAccessCmd
  57              		.syntax unified
  58              		.code	16
  59              		.thumb_func
  60              		.fpu softvfp
  62              	PWR_BackupAccessCmd:
  63              	.LVL2:
  64              	.LFB41:
  92:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
  93:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
  94:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @brief  Enables or disables access to the Backup domain registers.
  95:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @note   If the HSE divided by 32 is used as the RTC clock, the 
  96:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         Backup Domain Access should be kept enabled.
  97:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @param  NewState: new state of the access to the Backup domain registers.
  98:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
  99:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @retval None
 100:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 101:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** void PWR_BackupAccessCmd(FunctionalState NewState)
 102:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** {
  65              		.loc 1 102 1 is_stmt 1 view -0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69              		@ link register save eliminated.
 103:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Check the parameters */
 104:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
  70              		.loc 1 104 3 view .LVU5
ARM GAS  /tmp/ccH9kfPa.s 			page 4


 105:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   
 106:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   if (NewState != DISABLE)
  71              		.loc 1 106 3 view .LVU6
  72              		.loc 1 106 6 is_stmt 0 view .LVU7
  73 0000 0028     		cmp	r0, #0
  74 0002 06D0     		beq	.L3
 107:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   {
 108:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     /* Enable the Backup Domain Access */
 109:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     PWR->CR |= PWR_CR_DBP;
  75              		.loc 1 109 5 is_stmt 1 view .LVU8
  76              		.loc 1 109 13 is_stmt 0 view .LVU9
  77 0004 064A     		ldr	r2, .L5
  78 0006 1168     		ldr	r1, [r2]
  79 0008 8023     		movs	r3, #128
  80 000a 5B00     		lsls	r3, r3, #1
  81 000c 0B43     		orrs	r3, r1
  82 000e 1360     		str	r3, [r2]
  83              	.L2:
 110:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 111:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   else
 112:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   {
 113:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     /* Disable the Backup Domain Access */
 114:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     PWR->CR &= (uint32_t)~((uint32_t)PWR_CR_DBP);
 115:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   } 
 116:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** }
  84              		.loc 1 116 1 view .LVU10
  85              		@ sp needed
  86 0010 7047     		bx	lr
  87              	.L3:
 114:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   } 
  88              		.loc 1 114 5 is_stmt 1 view .LVU11
 114:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   } 
  89              		.loc 1 114 13 is_stmt 0 view .LVU12
  90 0012 034A     		ldr	r2, .L5
  91 0014 1368     		ldr	r3, [r2]
  92 0016 0349     		ldr	r1, .L5+4
  93 0018 0B40     		ands	r3, r1
  94 001a 1360     		str	r3, [r2]
  95              		.loc 1 116 1 view .LVU13
  96 001c F8E7     		b	.L2
  97              	.L6:
  98 001e C046     		.align	2
  99              	.L5:
 100 0020 00700040 		.word	1073770496
 101 0024 FFFEFFFF 		.word	-257
 102              		.cfi_endproc
 103              	.LFE41:
 105              		.section	.text.PWR_PVDLevelConfig,"ax",%progbits
 106              		.align	1
 107              		.global	PWR_PVDLevelConfig
 108              		.syntax unified
 109              		.code	16
 110              		.thumb_func
 111              		.fpu softvfp
 113              	PWR_PVDLevelConfig:
 114              	.LVL3:
 115              	.LFB42:
ARM GAS  /tmp/ccH9kfPa.s 			page 5


 117:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 118:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
 119:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @}
 120:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 121:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 122:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /** @defgroup PWR_Group2 PVD configuration functions
 123:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****  *  @brief   PVD configuration functions 
 124:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****  *
 125:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** @verbatim
 126:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ==============================================================================
 127:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                     ##### PVD configuration functions #####
 128:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ==============================================================================
 129:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   [..]
 130:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   (+) The PVD is used to monitor the VDD power supply by comparing it to a threshold
 131:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****       selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
 132:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   (+) A PVDO flag is available to indicate if VDD/VDDA is higher or lower than the 
 133:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****       PVD threshold. This event is internally connected to the EXTI line16
 134:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****       and can generate an interrupt if enabled through the EXTI registers.
 135:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   (+) The PVD is stopped in Standby mode.
 136:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 137:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** @endverbatim
 138:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @{
 139:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 140:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 141:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
 142:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 143:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @param  PWR_PVDLevel: specifies the PVD detection level
 144:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         This parameter can be one of the following values:
 145:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_PVDLevel_0: PVD detection level set to 1.9V
 146:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_PVDLevel_1: PVD detection level set to 2.1V
 147:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_PVDLevel_2: PVD detection level set to 2.3V
 148:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_PVDLevel_3: PVD detection level set to 2.5V
 149:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_PVDLevel_4: PVD detection level set to 2.7V
 150:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_PVDLevel_5: PVD detection level set to 2.9V
 151:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_PVDLevel_6: PVD detection level set to 3.1V
 152:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_PVDLevel_7: PVD detection level set to 3.3V
 153:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @retval None
 154:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 155:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
 156:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** {
 116              		.loc 1 156 1 is_stmt 1 view -0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120              		@ link register save eliminated.
 157:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   uint32_t tmpreg = 0;
 121              		.loc 1 157 3 view .LVU15
 158:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   
 159:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Check the parameters */
 160:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
 122              		.loc 1 160 3 view .LVU16
 161:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   
 162:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   tmpreg = PWR->CR;
 123              		.loc 1 162 3 view .LVU17
 124              		.loc 1 162 10 is_stmt 0 view .LVU18
 125 0000 034A     		ldr	r2, .L8
 126 0002 1368     		ldr	r3, [r2]
ARM GAS  /tmp/ccH9kfPa.s 			page 6


 127              	.LVL4:
 163:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   
 164:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Clear PLS[7:5] bits */
 165:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   tmpreg &= CR_PLS_MASK;
 128              		.loc 1 165 3 is_stmt 1 view .LVU19
 129              		.loc 1 165 10 is_stmt 0 view .LVU20
 130 0004 E021     		movs	r1, #224
 131 0006 8B43     		bics	r3, r1
 132              	.LVL5:
 166:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   
 167:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Set PLS[7:5] bits according to PWR_PVDLevel value */
 168:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   tmpreg |= PWR_PVDLevel;
 133              		.loc 1 168 3 is_stmt 1 view .LVU21
 134              		.loc 1 168 10 is_stmt 0 view .LVU22
 135 0008 0343     		orrs	r3, r0
 136              	.LVL6:
 169:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   
 170:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Store the new value */
 171:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   PWR->CR = tmpreg;
 137              		.loc 1 171 3 is_stmt 1 view .LVU23
 138              		.loc 1 171 11 is_stmt 0 view .LVU24
 139 000a 1360     		str	r3, [r2]
 172:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** }
 140              		.loc 1 172 1 view .LVU25
 141              		@ sp needed
 142 000c 7047     		bx	lr
 143              	.L9:
 144 000e C046     		.align	2
 145              	.L8:
 146 0010 00700040 		.word	1073770496
 147              		.cfi_endproc
 148              	.LFE42:
 150              		.section	.text.PWR_PVDCmd,"ax",%progbits
 151              		.align	1
 152              		.global	PWR_PVDCmd
 153              		.syntax unified
 154              		.code	16
 155              		.thumb_func
 156              		.fpu softvfp
 158              	PWR_PVDCmd:
 159              	.LVL7:
 160              	.LFB43:
 173:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 174:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
 175:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @brief  Enables or disables the Power Voltage Detector(PVD).
 176:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @param  NewState: new state of the PVD.
 177:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 178:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @retval None
 179:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 180:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** void PWR_PVDCmd(FunctionalState NewState)
 181:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** {
 161              		.loc 1 181 1 is_stmt 1 view -0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165              		@ link register save eliminated.
 182:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Check the parameters */
ARM GAS  /tmp/ccH9kfPa.s 			page 7


 183:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 166              		.loc 1 183 3 view .LVU27
 184:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   
 185:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   if (NewState != DISABLE)
 167              		.loc 1 185 3 view .LVU28
 168              		.loc 1 185 6 is_stmt 0 view .LVU29
 169 0000 0028     		cmp	r0, #0
 170 0002 05D0     		beq	.L11
 186:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   {
 187:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     /* Enable the PVD */
 188:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     PWR->CR |= PWR_CR_PVDE;
 171              		.loc 1 188 5 is_stmt 1 view .LVU30
 172              		.loc 1 188 13 is_stmt 0 view .LVU31
 173 0004 054A     		ldr	r2, .L13
 174 0006 1368     		ldr	r3, [r2]
 175 0008 1021     		movs	r1, #16
 176 000a 0B43     		orrs	r3, r1
 177 000c 1360     		str	r3, [r2]
 178              	.L10:
 189:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 190:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   else
 191:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   {
 192:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     /* Disable the PVD */
 193:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     PWR->CR &= (uint32_t)~((uint32_t)PWR_CR_PVDE);
 194:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   } 
 195:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** }
 179              		.loc 1 195 1 view .LVU32
 180              		@ sp needed
 181 000e 7047     		bx	lr
 182              	.L11:
 193:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   } 
 183              		.loc 1 193 5 is_stmt 1 view .LVU33
 193:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   } 
 184              		.loc 1 193 13 is_stmt 0 view .LVU34
 185 0010 024A     		ldr	r2, .L13
 186 0012 1368     		ldr	r3, [r2]
 187 0014 1021     		movs	r1, #16
 188 0016 8B43     		bics	r3, r1
 189 0018 1360     		str	r3, [r2]
 190              		.loc 1 195 1 view .LVU35
 191 001a F8E7     		b	.L10
 192              	.L14:
 193              		.align	2
 194              	.L13:
 195 001c 00700040 		.word	1073770496
 196              		.cfi_endproc
 197              	.LFE43:
 199              		.section	.text.PWR_WakeUpPinCmd,"ax",%progbits
 200              		.align	1
 201              		.global	PWR_WakeUpPinCmd
 202              		.syntax unified
 203              		.code	16
 204              		.thumb_func
 205              		.fpu softvfp
 207              	PWR_WakeUpPinCmd:
 208              	.LVL8:
 209              	.LFB44:
ARM GAS  /tmp/ccH9kfPa.s 			page 8


 196:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 197:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
 198:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @}
 199:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 200:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 201:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /** @defgroup PWR_Group3 WakeUp pins configuration functions
 202:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****  *  @brief   WakeUp pins configuration functions 
 203:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****  *
 204:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** @verbatim
 205:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ==============================================================================
 206:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                ##### WakeUp pin configuration functions #####
 207:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ==============================================================================
 208:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 209:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   (+) WakeUp pins are used to wakeup the system from Standby mode. These pins are 
 210:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****       forced in input pull down configuration and are active on rising edges.
 211:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   (+) There are three WakeUp pins: WakeUp Pin 1 on PA.00 and WakeUp Pin 2 on PC.13.
 212:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 213:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** @endverbatim
 214:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @{
 215:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 216:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 217:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
 218:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @brief  Enables or disables the WakeUp Pin functionality.
 219:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @param  PWR_WakeUpPin: specifies the WakeUpPin.
 220:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         This parameter can be: PWR_WakeUpPin_1 or PWR_WakeUpPin_2.
 221:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @param  NewState: new state of the WakeUp Pin functionality.
 222:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 223:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @retval None
 224:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 225:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** void PWR_WakeUpPinCmd(uint32_t PWR_WakeUpPin, FunctionalState NewState)
 226:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** {
 210              		.loc 1 226 1 is_stmt 1 view -0
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 0
 213              		@ frame_needed = 0, uses_anonymous_args = 0
 214              		@ link register save eliminated.
 227:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Check the parameters */
 228:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(PWR_WakeUpPin));
 215              		.loc 1 228 3 view .LVU37
 229:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 216              		.loc 1 229 3 view .LVU38
 230:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 231:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   if (NewState != DISABLE)
 217              		.loc 1 231 3 view .LVU39
 218              		.loc 1 231 6 is_stmt 0 view .LVU40
 219 0000 0029     		cmp	r1, #0
 220 0002 04D0     		beq	.L16
 232:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   {
 233:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     /* Enable the EWUPx pin */
 234:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     PWR->CSR |= PWR_WakeUpPin;
 221              		.loc 1 234 5 is_stmt 1 view .LVU41
 222              		.loc 1 234 14 is_stmt 0 view .LVU42
 223 0004 044A     		ldr	r2, .L18
 224 0006 5368     		ldr	r3, [r2, #4]
 225 0008 1843     		orrs	r0, r3
 226              	.LVL9:
 227              		.loc 1 234 14 view .LVU43
ARM GAS  /tmp/ccH9kfPa.s 			page 9


 228 000a 5060     		str	r0, [r2, #4]
 229              	.L15:
 235:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 236:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   else
 237:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   {
 238:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     /* Disable the EWUPx pin */
 239:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     PWR->CSR &= ~PWR_WakeUpPin;
 240:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 241:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** }
 230              		.loc 1 241 1 view .LVU44
 231              		@ sp needed
 232 000c 7047     		bx	lr
 233              	.LVL10:
 234              	.L16:
 239:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 235              		.loc 1 239 5 is_stmt 1 view .LVU45
 239:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 236              		.loc 1 239 14 is_stmt 0 view .LVU46
 237 000e 024A     		ldr	r2, .L18
 238 0010 5368     		ldr	r3, [r2, #4]
 239 0012 8343     		bics	r3, r0
 240 0014 5360     		str	r3, [r2, #4]
 241              		.loc 1 241 1 view .LVU47
 242 0016 F9E7     		b	.L15
 243              	.L19:
 244              		.align	2
 245              	.L18:
 246 0018 00700040 		.word	1073770496
 247              		.cfi_endproc
 248              	.LFE44:
 250              		.section	.text.PWR_EnterSleepMode,"ax",%progbits
 251              		.align	1
 252              		.global	PWR_EnterSleepMode
 253              		.syntax unified
 254              		.code	16
 255              		.thumb_func
 256              		.fpu softvfp
 258              	PWR_EnterSleepMode:
 259              	.LVL11:
 260              	.LFB45:
 242:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 243:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
 244:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @}
 245:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 246:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 247:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 248:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /** @defgroup PWR_Group4 Low Power modes configuration functions
 249:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****  *  @brief   Low Power modes configuration functions 
 250:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****  *
 251:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** @verbatim
 252:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ==============================================================================
 253:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****               ##### Low Power modes configuration functions #####
 254:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ==============================================================================
 255:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 256:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     [..] The devices feature three low-power modes:
 257:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     (+) Sleep mode: Cortex-M0 core stopped, peripherals kept running.
 258:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     (+) Stop mode: all clocks are stopped, regulator running, regulator in low power mode
ARM GAS  /tmp/ccH9kfPa.s 			page 10


 259:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     (+) Standby mode: VCORE domain powered off
 260:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 261:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *** Sleep mode *** 
 262:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ==================
 263:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   [..] 
 264:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     (+) Entry:
 265:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****         (++) The Sleep mode is entered by executing the WFE() or WFI() instructions.
 266:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     (+) Exit:
 267:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****         (++) Any peripheral interrupt acknowledged by the nested vectored interrupt 
 268:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              controller (NVIC) can wake up the device from Sleep mode.
 269:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 270:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *** Stop mode *** 
 271:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   =================
 272:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   [..] In Stop mode, all clocks in the VCORE domain are stopped, the PLL, the HSI,
 273:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****        the HSI14 and the HSE RC oscillators are disabled. Internal SRAM and register 
 274:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****        contents are preserved.
 275:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****        The voltage regulator can be configured either in normal or low-power mode.
 276:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 277:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     (+) Entry:
 278:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****         (++) The Stop mode is entered using the PWR_EnterSTOPMode(PWR_Regulator_LowPower,) 
 279:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              function with regulator in LowPower or with Regulator ON.
 280:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     (+) Exit:
 281:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****         (++) Any EXTI Line (Internal or External) configured in Interrupt/Event mode
 282:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              or any internal IPs (I2C, UASRT or CEC) wakeup event.
 283:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 284:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *** Standby mode *** 
 285:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ====================
 286:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   [..] The Standby mode allows to achieve the lowest power consumption. It is based 
 287:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****        on the Cortex-M0 deepsleep mode, with the voltage regulator disabled. 
 288:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****        The VCORE domain is consequently powered off. The PLL, the HSI, the HSI14 
 289:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****        oscillator and the HSE oscillator are also switched off. SRAM and register 
 290:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****        contents are lost except for the Backup domain (RTC registers, RTC backup 
 291:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****        registers and Standby circuitry).
 292:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****    
 293:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   [..] The voltage regulator is OFF.
 294:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 295:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     (+) Entry:
 296:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****         (++) The Standby mode is entered using the PWR_EnterSTANDBYMode() function.
 297:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     (+) Exit:
 298:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****         (++) WKUP pin rising edge, RTC alarm (Alarm A and Alarm B), RTC wakeup,
 299:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              tamper event, time-stamp event, external reset in NRST pin, IWDG reset.
 300:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 301:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *** Auto-wakeup (AWU) from low-power mode *** 
 302:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   =============================================
 303:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   [..] The MCU can be woken up from low-power mode by an RTC Alarm event, a tamper 
 304:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****        event, a time-stamp event, or a comparator event, without depending on an 
 305:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****        external interrupt (Auto-wakeup mode).
 306:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 307:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     (+) RTC auto-wakeup (AWU) from the Stop mode
 308:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****         (++) To wake up from the Stop mode with an RTC alarm event, it is necessary to:
 309:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              (+++) Configure the EXTI Line 17 to be sensitive to rising edges (Interrupt 
 310:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                    or Event modes) using the EXTI_Init() function.
 311:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              (+++) Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 312:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              (+++) Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 313:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                    and RTC_AlarmCmd() functions.
 314:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****         (++) To wake up from the Stop mode with an RTC Tamper or time stamp event, it 
 315:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              is necessary to:
ARM GAS  /tmp/ccH9kfPa.s 			page 11


 316:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              (+++) Configure the EXTI Line 19 to be sensitive to rising edges (Interrupt 
 317:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                    or Event modes) using the EXTI_Init() function.
 318:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              (+++) Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 319:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                    function.
 320:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              (+++) Configure the RTC to detect the tamper or time stamp event using the
 321:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                    RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 322:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                    functions.
 323:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 324:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     (+) RTC auto-wakeup (AWU) from the Standby mode
 325:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****         (++) To wake up from the Standby mode with an RTC alarm event, it is necessary to:
 326:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              (+++) Enable the RTC Alarm Interrupt using the RTC_ITConfig() function.
 327:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              (+++) Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 328:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                    and RTC_AlarmCmd() functions.
 329:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****         (++) To wake up from the Standby mode with an RTC Tamper or time stamp event, it 
 330:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              is necessary to:
 331:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              (+++) Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 332:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                    function.
 333:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              (+++) Configure the RTC to detect the tamper or time stamp event using the
 334:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                    RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 335:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                    functions.
 336:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 337:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     (+) Comparator auto-wakeup (AWU) from the Stop mode
 338:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****         (++) To wake up from the Stop mode with an comparator 1 or comparator 2 wakeup
 339:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              event, it is necessary to:
 340:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              (+++) Configure the EXTI Line 21 for comparator 1 or EXTI Line 22 for comparator 2 
 341:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                    to be sensitive to to the selected edges (falling, rising or falling 
 342:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                    and rising) (Interrupt or Event modes) using the EXTI_Init() function.
 343:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****              (+++) Configure the comparator to generate the event.
 344:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 345:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** @endverbatim
 346:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @{
 347:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 348:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 349:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
 350:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @brief  Enters Sleep mode.
 351:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @note   In Sleep mode, all I/O pins keep the same state as in Run mode.
 352:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @param  PWR_SLEEPEntry: specifies if SLEEP mode in entered with WFI or WFE instruction.
 353:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         This parameter can be one of the following values:
 354:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_SLEEPEntry_WFI: enter SLEEP mode with WFI instruction
 355:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_SLEEPEntry_WFE: enter SLEEP mode with WFE instruction
 356:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @retval None
 357:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 358:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** void PWR_EnterSleepMode(uint8_t PWR_SLEEPEntry)
 359:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** {
 261              		.loc 1 359 1 is_stmt 1 view -0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 0
 264              		@ frame_needed = 0, uses_anonymous_args = 0
 265              		@ link register save eliminated.
 360:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Check the parameters */
 361:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   assert_param(IS_PWR_SLEEP_ENTRY(PWR_SLEEPEntry));
 266              		.loc 1 361 3 view .LVU49
 362:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 363:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Clear SLEEPDEEP bit of Cortex-M0 System Control Register */
 364:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 267              		.loc 1 364 3 view .LVU50
 268              		.loc 1 364 12 is_stmt 0 view .LVU51
ARM GAS  /tmp/ccH9kfPa.s 			page 12


 269 0000 054A     		ldr	r2, .L24
 270 0002 1369     		ldr	r3, [r2, #16]
 271 0004 0421     		movs	r1, #4
 272 0006 8B43     		bics	r3, r1
 273 0008 1361     		str	r3, [r2, #16]
 365:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   
 366:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Select SLEEP mode entry -------------------------------------------------*/
 367:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   if(PWR_SLEEPEntry == PWR_SLEEPEntry_WFI)
 274              		.loc 1 367 3 is_stmt 1 view .LVU52
 275              		.loc 1 367 5 is_stmt 0 view .LVU53
 276 000a 0128     		cmp	r0, #1
 277 000c 01D0     		beq	.L23
 368:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   {
 369:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     /* Request Wait For Interrupt */
 370:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     __WFI();
 371:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 372:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   else
 373:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   {
 374:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     /* Request Wait For Event */
 375:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     __WFE();
 278              		.loc 1 375 5 is_stmt 1 view .LVU54
 279              		.syntax divided
 280              	@ 375 "Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c" 1
 281 000e 20BF     		wfe
 282              	@ 0 "" 2
 283              		.thumb
 284              		.syntax unified
 285              	.L20:
 376:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 377:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** }
 286              		.loc 1 377 1 is_stmt 0 view .LVU55
 287              		@ sp needed
 288 0010 7047     		bx	lr
 289              	.L23:
 370:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 290              		.loc 1 370 5 is_stmt 1 view .LVU56
 291              		.syntax divided
 292              	@ 370 "Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c" 1
 293 0012 30BF     		wfi
 294              	@ 0 "" 2
 295              		.thumb
 296              		.syntax unified
 297 0014 FCE7     		b	.L20
 298              	.L25:
 299 0016 C046     		.align	2
 300              	.L24:
 301 0018 00ED00E0 		.word	-536810240
 302              		.cfi_endproc
 303              	.LFE45:
 305              		.section	.text.PWR_EnterSTOPMode,"ax",%progbits
 306              		.align	1
 307              		.global	PWR_EnterSTOPMode
 308              		.syntax unified
 309              		.code	16
 310              		.thumb_func
 311              		.fpu softvfp
 313              	PWR_EnterSTOPMode:
ARM GAS  /tmp/ccH9kfPa.s 			page 13


 314              	.LVL12:
 315              	.LFB46:
 378:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 379:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
 380:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @brief  Enters STOP mode.
 381:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @note   In Stop mode, all I/O pins keep the same state as in Run mode.
 382:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @note   When exiting Stop mode by issuing an interrupt or a wakeup event, 
 383:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 384:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @note   When the voltage regulator operates in low power mode, an additional 
 385:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 386:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption 
 387:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         is higher although the startup time is reduced.
 388:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @param  PWR_Regulator: specifies the regulator state in STOP mode.
 389:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         This parameter can be one of the following values:
 390:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_Regulator_ON: STOP mode with regulator ON
 391:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_Regulator_LowPower: STOP mode with regulator in low power mode
 392:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
 393:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         This parameter can be one of the following values:
 394:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
 395:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
 396:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @retval None
 397:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 398:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
 399:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** {
 316              		.loc 1 399 1 view -0
 317              		.cfi_startproc
 318              		@ args = 0, pretend = 0, frame = 0
 319              		@ frame_needed = 0, uses_anonymous_args = 0
 320              		.loc 1 399 1 is_stmt 0 view .LVU58
 321 0000 10B5     		push	{r4, lr}
 322              	.LCFI1:
 323              		.cfi_def_cfa_offset 8
 324              		.cfi_offset 4, -8
 325              		.cfi_offset 14, -4
 400:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   uint32_t tmpreg = 0;
 326              		.loc 1 400 3 is_stmt 1 view .LVU59
 327              	.LVL13:
 401:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 402:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Check the parameters */
 403:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   assert_param(IS_PWR_REGULATOR(PWR_Regulator));
 328              		.loc 1 403 3 view .LVU60
 404:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
 329              		.loc 1 404 3 view .LVU61
 405:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 406:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 407:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   tmpreg = PWR->CR;
 330              		.loc 1 407 3 view .LVU62
 331              		.loc 1 407 10 is_stmt 0 view .LVU63
 332 0002 0B4A     		ldr	r2, .L30
 333 0004 1368     		ldr	r3, [r2]
 334              	.LVL14:
 408:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Clear PDDS and LPDSR bits */
 409:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   tmpreg &= CR_DS_MASK;
 335              		.loc 1 409 3 is_stmt 1 view .LVU64
 336              		.loc 1 409 10 is_stmt 0 view .LVU65
 337 0006 0324     		movs	r4, #3
 338 0008 A343     		bics	r3, r4
ARM GAS  /tmp/ccH9kfPa.s 			page 14


 339              	.LVL15:
 410:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 411:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Set LPDSR bit according to PWR_Regulator value */
 412:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   tmpreg |= PWR_Regulator;
 340              		.loc 1 412 3 is_stmt 1 view .LVU66
 341              		.loc 1 412 10 is_stmt 0 view .LVU67
 342 000a 0343     		orrs	r3, r0
 343              	.LVL16:
 413:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 414:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Store the new value */
 415:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   PWR->CR = tmpreg;
 344              		.loc 1 415 3 is_stmt 1 view .LVU68
 345              		.loc 1 415 11 is_stmt 0 view .LVU69
 346 000c 1360     		str	r3, [r2]
 416:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 417:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex-M0 System Control Register */
 418:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 347              		.loc 1 418 3 is_stmt 1 view .LVU70
 348              		.loc 1 418 12 is_stmt 0 view .LVU71
 349 000e 094A     		ldr	r2, .L30+4
 350 0010 1369     		ldr	r3, [r2, #16]
 351              	.LVL17:
 352              		.loc 1 418 12 view .LVU72
 353 0012 0420     		movs	r0, #4
 354              	.LVL18:
 355              		.loc 1 418 12 view .LVU73
 356 0014 0343     		orrs	r3, r0
 357 0016 1361     		str	r3, [r2, #16]
 358              	.LVL19:
 419:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 420:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 421:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 359              		.loc 1 421 3 is_stmt 1 view .LVU74
 360              		.loc 1 421 5 is_stmt 0 view .LVU75
 361 0018 0129     		cmp	r1, #1
 362 001a 06D0     		beq	.L29
 422:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   {
 423:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     /* Request Wait For Interrupt */
 424:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     __WFI();
 425:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 426:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   else
 427:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   {
 428:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     /* Request Wait For Event */
 429:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     __WFE();
 363              		.loc 1 429 5 is_stmt 1 view .LVU76
 364              		.syntax divided
 365              	@ 429 "Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c" 1
 366 001c 20BF     		wfe
 367              	@ 0 "" 2
 368              		.thumb
 369              		.syntax unified
 370              	.L28:
 430:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 431:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 432:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 371              		.loc 1 432 3 view .LVU77
 372              		.loc 1 432 12 is_stmt 0 view .LVU78
ARM GAS  /tmp/ccH9kfPa.s 			page 15


 373 001e 054A     		ldr	r2, .L30+4
 374 0020 1369     		ldr	r3, [r2, #16]
 375 0022 0421     		movs	r1, #4
 376              	.LVL20:
 377              		.loc 1 432 12 view .LVU79
 378 0024 8B43     		bics	r3, r1
 379 0026 1361     		str	r3, [r2, #16]
 433:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** }
 380              		.loc 1 433 1 view .LVU80
 381              		@ sp needed
 382              		.loc 1 433 1 view .LVU81
 383 0028 10BD     		pop	{r4, pc}
 384              	.LVL21:
 385              	.L29:
 424:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 386              		.loc 1 424 5 is_stmt 1 view .LVU82
 387              		.syntax divided
 388              	@ 424 "Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c" 1
 389 002a 30BF     		wfi
 390              	@ 0 "" 2
 391              		.thumb
 392              		.syntax unified
 393 002c F7E7     		b	.L28
 394              	.L31:
 395 002e C046     		.align	2
 396              	.L30:
 397 0030 00700040 		.word	1073770496
 398 0034 00ED00E0 		.word	-536810240
 399              		.cfi_endproc
 400              	.LFE46:
 402              		.section	.text.PWR_EnterSTANDBYMode,"ax",%progbits
 403              		.align	1
 404              		.global	PWR_EnterSTANDBYMode
 405              		.syntax unified
 406              		.code	16
 407              		.thumb_func
 408              		.fpu softvfp
 410              	PWR_EnterSTANDBYMode:
 411              	.LFB47:
 434:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 435:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
 436:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @brief  Enters STANDBY mode.
 437:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @note   In Standby mode, all I/O pins are high impedance except for:
 438:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         Reset pad (still available) 
 439:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         RTC_AF1 pin (PC13) if configured for Wakeup pin 2 (WKUP2), tamper, 
 440:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         time-stamp, RTC Alarm out, or RTC clock calibration out.
 441:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         WKUP pin 1 (PA0) if enabled.
 442:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @param  None
 443:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @retval None
 444:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 445:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** void PWR_EnterSTANDBYMode(void)
 446:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** {
 412              		.loc 1 446 1 view -0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 0
 415              		@ frame_needed = 0, uses_anonymous_args = 0
 416              		@ link register save eliminated.
ARM GAS  /tmp/ccH9kfPa.s 			page 16


 447:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Clear Wakeup flag */
 448:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   PWR->CR |= PWR_CR_CWUF;
 417              		.loc 1 448 3 view .LVU84
 418              		.loc 1 448 11 is_stmt 0 view .LVU85
 419 0000 074B     		ldr	r3, .L33
 420 0002 1A68     		ldr	r2, [r3]
 421 0004 0421     		movs	r1, #4
 422 0006 0A43     		orrs	r2, r1
 423 0008 1A60     		str	r2, [r3]
 449:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 450:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Select STANDBY mode */
 451:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   PWR->CR |= PWR_CR_PDDS;
 424              		.loc 1 451 3 is_stmt 1 view .LVU86
 425              		.loc 1 451 11 is_stmt 0 view .LVU87
 426 000a 1A68     		ldr	r2, [r3]
 427 000c 0220     		movs	r0, #2
 428 000e 0243     		orrs	r2, r0
 429 0010 1A60     		str	r2, [r3]
 452:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 453:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex-M0 System Control Register */
 454:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 430              		.loc 1 454 3 is_stmt 1 view .LVU88
 431              		.loc 1 454 12 is_stmt 0 view .LVU89
 432 0012 044A     		ldr	r2, .L33+4
 433 0014 1369     		ldr	r3, [r2, #16]
 434 0016 0B43     		orrs	r3, r1
 435 0018 1361     		str	r3, [r2, #16]
 455:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 456:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Request Wait For Interrupt */
 457:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   __WFI();
 436              		.loc 1 457 3 is_stmt 1 view .LVU90
 437              		.syntax divided
 438              	@ 457 "Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c" 1
 439 001a 30BF     		wfi
 440              	@ 0 "" 2
 458:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** }
 441              		.loc 1 458 1 is_stmt 0 view .LVU91
 442              		.thumb
 443              		.syntax unified
 444              		@ sp needed
 445 001c 7047     		bx	lr
 446              	.L34:
 447 001e C046     		.align	2
 448              	.L33:
 449 0020 00700040 		.word	1073770496
 450 0024 00ED00E0 		.word	-536810240
 451              		.cfi_endproc
 452              	.LFE47:
 454              		.section	.text.PWR_GetFlagStatus,"ax",%progbits
 455              		.align	1
 456              		.global	PWR_GetFlagStatus
 457              		.syntax unified
 458              		.code	16
 459              		.thumb_func
 460              		.fpu softvfp
 462              	PWR_GetFlagStatus:
 463              	.LVL22:
ARM GAS  /tmp/ccH9kfPa.s 			page 17


 464              	.LFB48:
 459:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 460:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
 461:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @}
 462:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 463:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 464:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /** @defgroup PWR_Group5 Flags management functions
 465:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****  *  @brief   Flags management functions 
 466:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****  *
 467:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** @verbatim
 468:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ==============================================================================
 469:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****                        ##### Flags management functions #####
 470:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   ==============================================================================
 471:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 472:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** @endverbatim
 473:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @{
 474:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 475:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 476:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
 477:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @brief  Checks whether the specified PWR flag is set or not.
 478:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to check.
 479:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         This parameter can be one of the following values:
 480:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_FLAG_WU: Wake Up flag. This flag indicates that a wakeup
 481:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *                  event was received from the WKUP pin or from the RTC alarm 
 482:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *                  (Alarm A or Alarm B), RTC Tamper event or RTC TimeStamp event.
 483:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_FLAG_SB: StandBy flag. This flag indicates that the 
 484:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *                  system was resumed from StandBy mode.
 485:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_FLAG_PVDO: PVD Output. This flag is valid only if PVD 
 486:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *                  is enabled by the PWR_PVDCmd() function.
 487:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_FLAG_VREFINTRDY: Internal Voltage Reference Ready flag. 
 488:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *                  This flag indicates the state of the internal voltage 
 489:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *                  reference, VREFINT.
 490:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @retval The new state of PWR_FLAG (SET or RESET).
 491:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 492:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
 493:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** {
 465              		.loc 1 493 1 is_stmt 1 view -0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 0
 468              		@ frame_needed = 0, uses_anonymous_args = 0
 469              		@ link register save eliminated.
 494:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   FlagStatus bitstatus = RESET;
 470              		.loc 1 494 3 view .LVU93
 495:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Check the parameters */
 496:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
 471              		.loc 1 496 3 view .LVU94
 497:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 498:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 472              		.loc 1 498 3 view .LVU95
 473              		.loc 1 498 11 is_stmt 0 view .LVU96
 474 0000 034B     		ldr	r3, .L38
 475 0002 5B68     		ldr	r3, [r3, #4]
 476              		.loc 1 498 6 view .LVU97
 477 0004 1842     		tst	r0, r3
 478 0006 01D0     		beq	.L37
 499:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   {
 500:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     bitstatus = SET;
ARM GAS  /tmp/ccH9kfPa.s 			page 18


 479              		.loc 1 500 15 view .LVU98
 480 0008 0120     		movs	r0, #1
 481              	.LVL23:
 482              	.L36:
 501:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 502:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   else
 503:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   {
 504:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****     bitstatus = RESET;
 505:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 506:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Return the flag status */
 507:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   return bitstatus;
 483              		.loc 1 507 3 is_stmt 1 view .LVU99
 508:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** }
 484              		.loc 1 508 1 is_stmt 0 view .LVU100
 485              		@ sp needed
 486 000a 7047     		bx	lr
 487              	.LVL24:
 488              	.L37:
 504:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 489              		.loc 1 504 15 view .LVU101
 490 000c 0020     		movs	r0, #0
 491              	.LVL25:
 504:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   }
 492              		.loc 1 504 15 view .LVU102
 493 000e FCE7     		b	.L36
 494              	.L39:
 495              		.align	2
 496              	.L38:
 497 0010 00700040 		.word	1073770496
 498              		.cfi_endproc
 499              	.LFE48:
 501              		.section	.text.PWR_ClearFlag,"ax",%progbits
 502              		.align	1
 503              		.global	PWR_ClearFlag
 504              		.syntax unified
 505              		.code	16
 506              		.thumb_func
 507              		.fpu softvfp
 509              	PWR_ClearFlag:
 510              	.LVL26:
 511              	.LFB49:
 509:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 510:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** /**
 511:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @brief  Clears the PWR's pending flags.
 512:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to clear.
 513:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *         This parameter can be one of the following values:
 514:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_FLAG_WU: Wake Up flag
 515:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   *             @arg PWR_FLAG_SB: StandBy flag
 516:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   * @retval None
 517:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   */
 518:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** void PWR_ClearFlag(uint32_t PWR_FLAG)
 519:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** {
 512              		.loc 1 519 1 is_stmt 1 view -0
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 0
 515              		@ frame_needed = 0, uses_anonymous_args = 0
 516              		@ link register save eliminated.
ARM GAS  /tmp/ccH9kfPa.s 			page 19


 520:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   /* Check the parameters */
 521:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
 517              		.loc 1 521 3 view .LVU104
 522:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** 
 523:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c ****   PWR->CR |=  PWR_FLAG << 2;
 518              		.loc 1 523 3 view .LVU105
 519              		.loc 1 523 11 is_stmt 0 view .LVU106
 520 0000 024A     		ldr	r2, .L41
 521 0002 1368     		ldr	r3, [r2]
 522              		.loc 1 523 24 view .LVU107
 523 0004 8000     		lsls	r0, r0, #2
 524              	.LVL27:
 525              		.loc 1 523 11 view .LVU108
 526 0006 0343     		orrs	r3, r0
 527 0008 1360     		str	r3, [r2]
 524:Drivers/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_pwr.c **** }
 528              		.loc 1 524 1 view .LVU109
 529              		@ sp needed
 530 000a 7047     		bx	lr
 531              	.L42:
 532              		.align	2
 533              	.L41:
 534 000c 00700040 		.word	1073770496
 535              		.cfi_endproc
 536              	.LFE49:
 538              		.text
 539              	.Letext0:
 540              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 541              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 542              		.file 4 "Drivers/CMSIS/Include/core_cm0.h"
 543              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 544              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 545              		.file 7 "Drivers/STM32F0xx_StdPeriph_Driver/inc/stm32f0xx_rcc.h"
ARM GAS  /tmp/ccH9kfPa.s 			page 20


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f0xx_pwr.c
     /tmp/ccH9kfPa.s:16     .text.PWR_DeInit:0000000000000000 $t
     /tmp/ccH9kfPa.s:24     .text.PWR_DeInit:0000000000000000 PWR_DeInit
     /tmp/ccH9kfPa.s:55     .text.PWR_BackupAccessCmd:0000000000000000 $t
     /tmp/ccH9kfPa.s:62     .text.PWR_BackupAccessCmd:0000000000000000 PWR_BackupAccessCmd
     /tmp/ccH9kfPa.s:100    .text.PWR_BackupAccessCmd:0000000000000020 $d
     /tmp/ccH9kfPa.s:106    .text.PWR_PVDLevelConfig:0000000000000000 $t
     /tmp/ccH9kfPa.s:113    .text.PWR_PVDLevelConfig:0000000000000000 PWR_PVDLevelConfig
     /tmp/ccH9kfPa.s:146    .text.PWR_PVDLevelConfig:0000000000000010 $d
     /tmp/ccH9kfPa.s:151    .text.PWR_PVDCmd:0000000000000000 $t
     /tmp/ccH9kfPa.s:158    .text.PWR_PVDCmd:0000000000000000 PWR_PVDCmd
     /tmp/ccH9kfPa.s:195    .text.PWR_PVDCmd:000000000000001c $d
     /tmp/ccH9kfPa.s:200    .text.PWR_WakeUpPinCmd:0000000000000000 $t
     /tmp/ccH9kfPa.s:207    .text.PWR_WakeUpPinCmd:0000000000000000 PWR_WakeUpPinCmd
     /tmp/ccH9kfPa.s:246    .text.PWR_WakeUpPinCmd:0000000000000018 $d
     /tmp/ccH9kfPa.s:251    .text.PWR_EnterSleepMode:0000000000000000 $t
     /tmp/ccH9kfPa.s:258    .text.PWR_EnterSleepMode:0000000000000000 PWR_EnterSleepMode
     /tmp/ccH9kfPa.s:301    .text.PWR_EnterSleepMode:0000000000000018 $d
     /tmp/ccH9kfPa.s:306    .text.PWR_EnterSTOPMode:0000000000000000 $t
     /tmp/ccH9kfPa.s:313    .text.PWR_EnterSTOPMode:0000000000000000 PWR_EnterSTOPMode
     /tmp/ccH9kfPa.s:397    .text.PWR_EnterSTOPMode:0000000000000030 $d
     /tmp/ccH9kfPa.s:403    .text.PWR_EnterSTANDBYMode:0000000000000000 $t
     /tmp/ccH9kfPa.s:410    .text.PWR_EnterSTANDBYMode:0000000000000000 PWR_EnterSTANDBYMode
     /tmp/ccH9kfPa.s:449    .text.PWR_EnterSTANDBYMode:0000000000000020 $d
     /tmp/ccH9kfPa.s:455    .text.PWR_GetFlagStatus:0000000000000000 $t
     /tmp/ccH9kfPa.s:462    .text.PWR_GetFlagStatus:0000000000000000 PWR_GetFlagStatus
     /tmp/ccH9kfPa.s:497    .text.PWR_GetFlagStatus:0000000000000010 $d
     /tmp/ccH9kfPa.s:502    .text.PWR_ClearFlag:0000000000000000 $t
     /tmp/ccH9kfPa.s:509    .text.PWR_ClearFlag:0000000000000000 PWR_ClearFlag
     /tmp/ccH9kfPa.s:534    .text.PWR_ClearFlag:000000000000000c $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
